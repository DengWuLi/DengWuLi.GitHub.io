<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1008</title>
    <link href="/2023/02/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201008/"/>
    <url>/2023/02/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201008/</url>
    
    <content type="html"><![CDATA[<h1 id="数组元素循环右移问题"><a href="#数组元素循环右移问题" class="headerlink" title="数组元素循环右移问题"></a>数组元素循环右移问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>一个数组 $A$ 中存在有 $N(N&gt;0)$ 个整数, 在不允许使用另外数组的前提下，将每个整数循环向右移$M(M \geq 0)$ 个位置，即将 $A$ 中的数据由 $(A_{0}A_{1}···A_{N-1})$ 变换为 $(A_{N-M}···A_{N-1}A_{0}A_{1}A_{N-M-1})$ (最后 $M$ 个数循环移至最前面的 $M$ 个位置) 如果需要考虑程序移动数据的次数尽量少, 要如何设计移动的方法?</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个输入包含一个测试用例, 第1行输入 $N(1 \geq N \leq 100)$ 和 $M(M \geq 0)$; 第2行输入 $N$ 个整数, 之间用空格分隔.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出循环右移 $M$ 位以后的整数序列, 之间用空格分隔, 序列结尾不能有多余空格.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">6 2<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5 6 1 2 3 4<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1008 数组元素循环右移问题</span><br><span class="hljs-comment"> * 2022/07/23</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-type">int</span>* p, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = p[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>        p[i] = p[i - <span class="hljs-number">1</span>];   <span class="hljs-comment">// 从后向前赋值, 有些类似于矩阵. 从后一行加到前一行</span><br>    p[<span class="hljs-number">0</span>] = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; p[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-built_in">Move</span>(p, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        cout &lt;&lt; p[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; p[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">delete</span>[] p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice</span><br><span class="hljs-comment">/// 1008 数组元素循环右移问题</span><br><span class="hljs-comment">/// 2023-02-14</span><br><span class="hljs-comment">/// Java 始终不能像 C++ 那般灵活的使用结构体数组......</span><br><span class="hljs-comment">/// 或许我还没有感受到 Java 语言的伟大之处.</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> n, m;<br>        n = input.nextInt();<br>        m = input.nextInt();<br><br>        Number[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>[n];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i].first = input.nextInt();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[(i + m) % n].second = arr[i].first;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            System.out.print(arr[i].second);<br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br>        <span class="hljs-keyword">public</span> Integer first;<br>        <span class="hljs-keyword">public</span> Integer second;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Number</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>.first = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">this</span>.second = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>这个题目有两个要求:</p><ol><li>不许使用额外的数组;</li><li>程序移动数据的次数尽量少;</li></ol><p>但从这两点来说, C++程序, 明显是不合格的, 因为其通过调用函数实现每次只向右移动一个位置, 总共循环 $M$ 次, 移动次数显然增多了不少.<br>然而, Java程序, 使用了一种巧妙的思路, 首先它先自定义了一个新的数据类型 <code>Number</code>, 其中包含两种数据, 数组的初始数据 <code>first</code> 和移动后的数据 <code>second</code> (这种命名方式类似于 C++ 中的 <code>pair</code>, 两个的作用也是类似的), 这样通过一次循环就可直接判断出 元素移动后的位置, 而不必一次次机械地移动.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后:"></a>写在最后:</h2><p>网上的资料有些更为简单的写法 (是否能够AC, 本人并不能保证), 下面粘在这里, 供大家参考.<br><strong><code>CSDN</code> — 柳诺</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    m %= n;<br>    <span class="hljs-comment">// 这一部分是这段代码的核心, 需要好好研究.</span><br>    <span class="hljs-keyword">if</span> (m != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a), <span class="hljs-built_in">begin</span>(a) + n);<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a), <span class="hljs-built_in">begin</span>(a) + m);<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a) + m, <span class="hljs-built_in">begin</span>(a) + n);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; a[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>CSDN</code> — 柳诺评论区</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 这段代码最为简洁, 而且很容易明白</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, i;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> j = i - m % n;<br>        <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>)<br>            cout &lt;&lt; a[j + n];<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; a[j];<br>        <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-02-1</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1007</title>
    <link href="/2023/02/14/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201007/"/>
    <url>/2023/02/14/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201007/</url>
    
    <content type="html"><![CDATA[<h1 id="素数对猜想"><a href="#素数对猜想" class="headerlink" title="素数对猜想"></a>素数对猜想</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>让我们定义 $d_{n}$ 为: $d_{n} &#x3D; p_{n+1} - p_{n}$, 其中 $p_{i}$ 是第 $i$ 个素数. 显然有 $d_{1} &#x3D; 1$, 且对于 $ n &gt; 1$ 有 $d_{n}$ 是个偶数. “素数对猜想” 认为 “存在无穷多对相邻且差为2的素数”.<br>现给定任意正整数 <code>N</code>$(&lt;10^5)$, 请计算不超过<code>N</code>的满足猜想的素数对的个数.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行给出正整数<code>N</code>.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">20<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">4<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1007 素数对猜想</span><br><span class="hljs-comment"> * 2022/07/22</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">sqrt</span>(n)) + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            b = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;   <span class="hljs-comment">// 如果n是合数则返回0.</span><br>        <span class="hljs-keyword">else</span><br>            b = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[a + <span class="hljs-number">1</span>];<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    p[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    p[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt; a + <span class="hljs-number">1</span>; i++)<br>        p[i] = <span class="hljs-built_in">judge</span>(i);<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= a - <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-number">1</span> &amp;&amp; p[i + <span class="hljs-number">2</span>] == <span class="hljs-number">1</span>)<br>            count++;<br>    cout &lt;&lt; count;<br>    <span class="hljs-keyword">delete</span>[] p;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice</span><br><span class="hljs-comment">/// 1007 素数对猜想 20/20</span><br><span class="hljs-comment">/// 2023-02-14</span><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        ArrayList&lt;Integer&gt; prime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (isPrime(i))<br>                prime.add(i);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prime.size() - <span class="hljs-number">1</span>; i++)<br>            <span class="hljs-keyword">if</span> (prime.get(i) - prime.get(i + <span class="hljs-number">1</span>) == -<span class="hljs-number">2</span>)<br>                num++;<br>        System.out.println(num);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= Math.sqrt(number); i++)<br>            <span class="hljs-keyword">if</span> (number % i == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>这道题主要考察了 <strong>“素数”</strong> 这个概念和如何判断一个数是否为素数. 判断素数的算法多种多样, 我以后应该会专门写一篇blogs来总结一下常用的各种计算素数的算法.<br>结合本题的数据范围, 我们这里选择一种最为简便的方式进行判断:</p><blockquote><p>对于数字 $n$, 如果 $n$ 能被 $[2,\sqrt n)$ 范围内任意一个整数整除, 说明 $n$ 不是素数. 否则说明 $n$ 是素数. </p></blockquote><p>在本题中, 我首先计算出 $n$ 内 所有的素数, 并在数组 <code>p</code> 中进行标记, 之后开始遍历, 判断 <code>i</code> 和 <code>i+2</code> 是否均为素数, 并使用 <code>count</code> 进行计数. 最后输出 <code>count</code> 即可.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后:"></a>写在最后:</h2><p>为什么 $\sqrt n$ 而不是 $n$, 这一点很容易看出. 因为, 一个整数的因数是成对的. 例如, 12可以分解为: </p><blockquote><p>$1 \times 12 \quad 2 \times 6 \quad 3 \times 4 \quad 4 \times 3 \quad 6 \times 2 \quad 12 \times 1$</p></blockquote><p>可以发现后半部分是前半部分的翻转.<br>如果6是12的因数, 就一定会有另外一个对应的因数2. 因为因数6大于根号12, 所以另一个因数2., 就一定小于根号12.<br>换句话说, 每一个大于根号n的因数, 都有一个对应的小于根号n的因数, 等于根号n的因数, 对应的另一个因数也是根号n, 比如 $5 \times 5 &#x3D; 25$.<br>因此, 只需要判断到 (包括) 根号n为止即可.</p><pre class="note note-info"><strong>2023-02-14</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断 C++ 中 const 修饰问题的技巧</title>
    <link href="/2023/02/14/%E5%85%B6%E4%BB%96/%E5%88%A4%E6%96%AD%20C++%20%E4%B8%AD%20const%20%E4%BF%AE%E9%A5%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/02/14/%E5%85%B6%E4%BB%96/%E5%88%A4%E6%96%AD%20C++%20%E4%B8%AD%20const%20%E4%BF%AE%E9%A5%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="判断-C-中-const-修饰问题的技巧"><a href="#判断-C-中-const-修饰问题的技巧" class="headerlink" title="判断 C++ 中 const 修饰问题的技巧"></a>判断 C++ 中 const 修饰问题的技巧</h1><p>最近我在阅读 <code>&lt;C++ Primer&gt;</code> 时被书中 <code>2.4 const 限定符</code> 这一节内容搞得很头疼, 于是寻觅互联网, 在知乎上发现一个不错的技巧, 特此记录下来.</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p><strong>const默认是修饰它左边的符号的，如果左边没有，那么就修饰它右边的符号</strong></p><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p;<br></code></pre></td></tr></table></figure><p><code>const</code> 左边没有, 看右边的一个, 是<code>int</code>, 自然就是p指针指向的值不能改变.<br><em>注意, 此处因为个人代码风格的问题, 表示指针的 <code>*</code> 是紧靠<code>int</code></em></p><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span>* p;<br></code></pre></td></tr></table></figure><p>此时 <code>const</code> 左边有<code>int</code>, 效果和例一, 还是修饰的<code>int</code>.</p><h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p; <br></code></pre></td></tr></table></figure><p>修饰的是<code>*</code>, 即指针不能改变.</p><h2 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *<span class="hljs-type">const</span> p;<br></code></pre></td></tr></table></figure><p>第一个 <code>const</code> 左边没有, 所以修饰的是右边的 <code>int</code>, 第二个 <code>const</code> 左边有, 所以修饰的是 <code>*</code>, 因此指针和指针指向的值都不能改变.</p><h2 id="例五"><a href="#例五" class="headerlink" title="例五"></a>例五</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-type">const</span> *p;<br></code></pre></td></tr></table></figure><p>这里两个 <code>const</code> 修饰的都是 <code>int</code>了, 所以重复修饰了, 有的编译器可以通过但会有警告, 有的可能直接编译错误.</p><h2 id="例六"><a href="#例六" class="headerlink" title="例六"></a>例六</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span>* <span class="hljs-type">const</span> p;<br></code></pre></td></tr></table></figure><p>留做练习题, 自己分析吧, 欢迎大家在评论区留下自己的见解.<br>总而言之, 看到 <code>const</code> 就看它左边是什么, 如果左边没有, 才看右边的, 就永远不会出错! ! !</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>既然, 本人习惯将 <code>*</code> 与 <code>int</code> 绑定在一起由例一可以看出, 这样会造成一定的误解.<br>那么不妨修改我自己的代码风格为将 <code>const</code> 置于 <code>int</code> 之后.<br>于是便有:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span> p1;   <span class="hljs-comment">// 值不可修改</span><br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p2;   <span class="hljs-comment">// 指针不能修改, 即指针不能转向.</span><br><span class="hljs-type">int</span> <span class="hljs-type">const</span>* <span class="hljs-type">const</span> p3;   <span class="hljs-comment">// 指针和指针指向的值均不能修改.</span><br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-02-14</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1006</title>
    <link href="/2023/02/12/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201006/"/>
    <url>/2023/02/12/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201006/</url>
    
    <content type="html"><![CDATA[<h1 id="换个格式输出整数"><a href="#换个格式输出整数" class="headerlink" title="换个格式输出整数"></a>换个格式输出整数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>让我们用字母 <code>B</code>来表示 “百”, 字母 <code>S</code> 表示 “十”, 用 <code>12...n</code> 来表示不为零的个位数字 $<code>n</code>(n&lt;10&gt;)$, 换个格式来输出任一个不超过 3 位的正整数. 例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个”百”, 3 个”十”, 以及个位的 4.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例，给出正整数 $n(n&lt;1000)$.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>每个测试用例的输出占一行，用规定的格式输出 $n$.</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1:"></a>输入样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">234<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1:"></a>输出样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">BBSSS1234<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例 2:"></a>输入样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">23<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例 2:"></a>输出样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">SS123<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1006 换个格式输出整数</span><br><span class="hljs-comment"> * 2022/07/21</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;B&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;S&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++)<br>        cout &lt;&lt; i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch[<span class="hljs-number">3</span>];<br>    cin &gt;&gt; ch;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">strlen</span>(ch);<br>    <span class="hljs-keyword">switch</span> (a) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">fun1</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun2</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">1</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">2</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">fun2</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">1</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1006 换个格式输出整数</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">100</span>; i++)<br>            System.out.print(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>; i++)<br>            System.out.print(<span class="hljs-string">&quot;S&quot;</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n % <span class="hljs-number">10</span>; i++)<br>            System.out.print(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>这道题非常简单. 只需要简单地根据 <code>n</code> 的每一位的数字, 循环输出对应位的字母即可, 没有什么难度.<br>也可以像 <code>C++</code> 代码所写的那样, 先对数据进行位数判断, 之后根据不同位数进行处理, 当然这样就比较麻烦了.<br>总的来说, 还是 <code>Java</code> 代码的解题思路简单明了.</p><pre class="note note-info"><strong>2023-02-12</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1005</title>
    <link href="/2023/01/24/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201005/"/>
    <url>/2023/01/24/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201005/</url>
    
    <content type="html"><![CDATA[<h1 id="继续-3n-1-猜想"><a href="#继续-3n-1-猜想" class="headerlink" title="继续(3n+1)猜想"></a>继续(3n+1)猜想</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述. 在这个题目里. 情况稍微有些复杂.</p><p>当我们验证卡拉兹猜想的时候, 为了避免重复计算, 可以记录下递推过程中遇到的每一个数. 例如对 $n&#x3D;3$ 进行验证的时候，我们需要计算3, 5, 8, 4, 2, 1, 则当我们对 $n&#x3D;5,8,4,2$ 进行验证的时候, 就可以直接判定卡拉兹猜想的真伪, 而不需要重复计算. 因为这 4 个数已经在验证 3 的时候遇到过了, 我们称 5, 8, 4, 2 是被 3 “覆盖” 的数. 我们称一个数列中的某个数 $n$ 为 “关键数”, 如果 $n$ 不能被数列中的其他数字所覆盖.</p><p>现在给定一系列待验证的数字, 我们只需要验证其中的几个关键数, 就可以不必再重复验证余下的数字. 你的任务就是找出这些关键数字, 并按从大到小的顺序输出它们.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例, 第 1 行给出一个正整数 $K(K&lt;100)$, 第 2 行给出 $K$ 个互不相同的待验证的正整数 $n(1 &lt; n \leq 100)$ 的值, 数字间用空格隔开.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>每个测试用例的输出占一行, 按从大到小的顺序输出关键数字. 数字间用 1 个空格隔开, 但一行中最后一个数字后没有空格.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">6<br>3 5 6 7 8 11<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">7 6<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> p[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; p[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = p[i]; j != <span class="hljs-number">1</span>;) &#123;<br>                <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                    j /= <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span><br>                    j = (<span class="hljs-number">3</span> * j + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>                    <span class="hljs-keyword">if</span> (p[k] == j)<br>                        p[k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(p, p + n, greater&lt;&gt;());<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; m &lt; n; m++)<br>        <span class="hljs-keyword">if</span> (p[m] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cout &lt;&lt; p[i];<br>        <span class="hljs-keyword">if</span> (i != m - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1005 继续(3n+1)猜想</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-comment">/* 要想使用Java中sort函数实现降序排列, 竟然要使用其对应的类, 比C++麻烦不少 */</span><br>        Integer[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            p[i] = input.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (p[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> p[i]; j != <span class="hljs-number">1</span>; ) &#123;<br>                    <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                        j /= <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span><br>                        j = (<span class="hljs-number">3</span> * j + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n; k++)<br>                        <span class="hljs-keyword">if</span> (p[k] == j)<br>                            p[k] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Arrays.sort(p, Collections.reverseOrder());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; m &lt; n; m++)<br>            <span class="hljs-keyword">if</span> (p[m] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            System.out.print(p[i]);<br>            <span class="hljs-keyword">if</span> (i != m - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>这道题总体来说并不难, 下面说一下我的主要思路(两种语言思路一致, 这里我以C++为例子):</p><p>首先, 读入n和相应的n个数. 接着, 对每个数进行 <strong>卡拉兹(Callatz)</strong> 猜想所描述的操作进行处理, 并将处理中出现的中间数且在输入的数中的那部分数赋值为零, 表示此数被<strong>覆盖</strong>了.</p><p>对这n个数据进行降序排序, 最后对那些不为0的数据输出即可.</p><pre class="note note-info"><strong>2023-01-24</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1004</title>
    <link href="/2023/01/20/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201004/"/>
    <url>/2023/01/20/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201004/</url>
    
    <content type="html"><![CDATA[<h1 id="成绩排名"><a href="#成绩排名" class="headerlink" title="成绩排名"></a>成绩排名</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>读入 $n(n&gt;0)$ 名学生的姓名, 学号, 成绩, 分别输出成绩最高和成绩最低学生的姓名和学号.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例, 格式为:</p><blockquote><p>第 1 行：正整数 n<br>第 2 行：第 1 个学生的姓名 学号 成绩<br>第 3 行：第 2 个学生的姓名 学号 成绩<br>… … …<br>第 n+1 行：第 n 个学生的姓名 学号 成绩</p></blockquote><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串, 成绩为 0 到 100 之间的一个整数, 这里保证在一组测试用例中没有两个学生的成绩是相同的.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>对每个测试用例输出 2 行, 第 1 行是成绩最高学生的姓名和学号, 第 2 行是成绩最低学生的姓名和学号, 字符串间有 1 空格.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mike CS991301<br>Joe Math990112<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1004 成绩排名</span><br><span class="hljs-comment"> * 2022/07/18</span><br><span class="hljs-comment"> * 2023-01-20: 没想到当时竟然写出这么低效的代码</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">char</span> number[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = N;<br>    student stu[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) <br>        cin &gt;&gt; stu[i].name &gt;&gt; stu[i].number &gt;&gt; stu[i].score;<br><br>    student temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= N - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (stu[j].score &gt; stu[j + <span class="hljs-number">1</span>].score) &#123;<br>                temp = stu[j];<br>                stu[j] = stu[j + <span class="hljs-number">1</span>];<br>                stu[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; stu[n - <span class="hljs-number">1</span>].name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; stu[n - <span class="hljs-number">1</span>].number &lt;&lt; endl;<br>    cout &lt;&lt; stu[<span class="hljs-number">0</span>].name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; stu[<span class="hljs-number">0</span>].number;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1004 成绩排名</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name, ID;<br>    <span class="hljs-type">int</span> score;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">maxStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(), minStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        maxStudent.score = -<span class="hljs-number">1</span>;<br>        minStudent.score = Integer.MAX_VALUE;<br>        String tempName, tempID;<br>        <span class="hljs-type">int</span> tempScore;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            tempName = scanner.next();<br>            tempID = scanner.next();<br>            tempScore = scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (tempScore &gt; maxStudent.score) &#123;<br>                maxStudent.name = tempName;<br>                maxStudent.ID = tempID;<br>                maxStudent.score = tempScore;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (tempScore &lt; minStudent.score) &#123;<br>                minStudent.name = tempName;<br>                minStudent.ID = tempID;<br>                minStudent.score = tempScore;<br>            &#125;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;%s %s\n&quot;</span>, maxStudent.name, maxStudent.ID);<br>        System.out.printf(<span class="hljs-string">&quot;%s %s\n&quot;</span>, minStudent.name, minStudent.ID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>这道题应该是非常简单的来, 解题的思路也不少. 下面先来说一下Java语言的解题思路, 因为其算法的时间复杂度更低,只有 $O(n)$.<br>首先在主函数外定义了一个”结构体”, 用来存储有关学生的各种信息(包括成绩和ID), 之后在主函数中定义<code>maxStudent</code>和<code>minStudent</code>, 用来记录成绩最好的学生和成绩最差的学生. 注意: <strong>在正式进行比较之前, 要给它们赋予对应的初始值.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">maxStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(), minStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>maxStudent.score = -<span class="hljs-number">1</span>;<br>minStudent.score = Integer.MAX_VALUE;<br></code></pre></td></tr></table></figure><blockquote><p>关于初始值的问题: 根据题目给的条件<br>成绩为 0 到 100 之间的一个整数 所以也可以如此赋值:<br>maxStudent.score &#x3D; -1; minStudent.score &#x3D; 101;<br>之后, 遍历所有数据, 使用if语句进行比较即可, 这一点通过查看源代码是很清晰易懂的, 在此不做过多赘述.</p></blockquote><p>下面, 再来说一下C++语言版本的做法, 首先还是定义了一个结构体用来存储有关学生的各种信息.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">char</span> number[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure><p>申请一个结构体数组 <code>student stu[n]</code>, 存储输入的数据.<br>最后, 对这个数组进行排序(此处使用的是冒泡排序的排序方法), 最后按要求输出即可.</p><blockquote><p>其实这两版代码都写麻烦了, 根本不需要什么”结构体”.<br>只要定义 <code>maxName</code> 和 <code>maxScore</code>, <code>minName</code> 和 <code>minScore</code>(这些变量的含义应该很容易理解, 见名知意即可), 遍历整个数据, 进行比较, 最后直接输出即可.</p></blockquote><pre class="note note-info"><strong>2023-01-20</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1003</title>
    <link href="/2023/01/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201003/"/>
    <url>/2023/01/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201003/</url>
    
    <content type="html"><![CDATA[<h1 id="我要通过！"><a href="#我要通过！" class="headerlink" title="我要通过！"></a>我要通过！</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>“<strong>答案正确</strong>“ 是自动判题系统给出的最令人欢喜的回复. 本题属于 PAT 的 “<strong>答案正确</strong>“ 大派送—只要读入的字符串满足下列条件,<br>系统就输出 “<strong>答案正确</strong>“, 否则输出 “<strong>答案错误</strong>“. 得到 “<strong>答案正确</strong>“的条件是:</p><ol><li>字符串中必须仅有<code>P</code>, <code>A</code>, <code>T</code>, 这三种字符, 不可以包含其它字符;</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得”<strong>答案正确</strong>“, 其中 <code>x</code> 或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串;</li><li>如果 <code>aPbTc</code> 是正确的, 那么 <code>aPbATca</code> 也是正确的. 其中<code>a</code>, <code>b</code>, <code>c</code>均或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串.</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得”<strong>答案正确</strong>“的.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例, 第 1 行给出一个正整数 $n \leq 10$, 是需要检测的字符串个数. 接下来每个字符串占一行,<br>字符串长度不超过 100，且不包含空格.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>每个字符串的检测结果占一行, 如果该字符串可以获得”<strong>答案正确</strong>“, 则输出 YES, 否则输出 NO.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">10<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA<br>APT<br>APATTAA<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">YES<br>YES<br>YES<br>YES<br>NO<br>NO<br>NO<br>NO<br>NO<br>NO<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1003 我要通过!</span><br><span class="hljs-comment">/// 首次写于: 2022-07-17, 修改与 2023-01-17</span><br><span class="hljs-comment">/// m没想到竟然都在去年7月和今年1月碰到这个题, 真可以说是缘分的呢.</span><br><span class="hljs-comment">/// 之前太注意通过了, 代码没怎么写注释, 今天回来不上, ☺</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-comment">// 这两个变量分别用来记录字符串中P, T出现的次数</span><br>    <span class="hljs-type">int</span> PNum = <span class="hljs-number">0</span>, TNum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来统计A出现的次数, 根据题意可以将A出现的位置划分为三中情况:</span><br><span class="hljs-comment">     * &lt;ol&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在P的左边, 用&lt;strong&gt;ANum[0]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在P和T的中间, 用&lt;strong&gt;ANum[1]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在T的右边, 用&lt;strong&gt;ANum[3]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;/ol&gt;</span><br><span class="hljs-comment">     * 统计到最后只要判断一下:</span><br><span class="hljs-comment">     * &lt;p&gt;ANum[0]*ANum[1]?=ANum[3]&lt;/p&gt;即可</span><br><span class="hljs-comment">     * */</span><br><br>    <span class="hljs-type">int</span> ANum[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i : s) &#123;<br>        <span class="hljs-comment">// 当一个字符串中出现了非`P`, `A`, `T`这三种字符时, 直接返回false</span><br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;T&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 当检测到字符==&#x27;P&#x27;时, PNum++, </span><br>        <span class="hljs-comment">// 同时进行判断, 若字符串中P出现的次数&gt;1 || 在P出现之前, T已经出现, 直接返回false</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;P&#x27;</span>) &#123;<br>            PNum++;<br>            <span class="hljs-keyword">if</span> (PNum &gt; <span class="hljs-number">1</span> || TNum != <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 当检测到字符==&#x27;T&#x27;时, TNum++, </span><br>        <span class="hljs-comment">// 同时进行判断, 若字符串中T出现的次数&gt;1 || 在T出现后, P仍未出现, 直接返回false.</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;T&#x27;</span>) &#123;<br>            TNum++;<br>            <span class="hljs-keyword">if</span> (TNum &gt; <span class="hljs-number">1</span> || PNum == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                ANum[<span class="hljs-number">0</span>]++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PNum != <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                ANum[<span class="hljs-number">1</span>]++;<br>            <span class="hljs-keyword">else</span><br>                ANum[<span class="hljs-number">2</span>]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// &quot;PAAAAA&quot; 这样的输入也是不能通过的</span><br>    <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> || TNum == <span class="hljs-number">0</span> || ANum[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span>(ANum[<span class="hljs-number">0</span>]*ANum[<span class="hljs-number">1</span>]!=ANum[<span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(s))<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice (中文)</span><br><span class="hljs-comment">/// 1003 我要通过!</span><br><span class="hljs-comment">/// 2023-01-17</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        String str;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            str = in.next();<br>            <span class="hljs-keyword">if</span> (judge(str))<br>                System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">PNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, TNum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span>[] ANum = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (str.charAt(i) != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; str.charAt(i) != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; str.charAt(i) != <span class="hljs-string">&#x27;T&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;P&#x27;</span>) &#123;<br>                PNum++;<br>                <span class="hljs-keyword">if</span> (PNum &gt; <span class="hljs-number">1</span> || TNum != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;T&#x27;</span>) &#123;<br>                TNum++;<br>                <span class="hljs-keyword">if</span> (TNum &gt; <span class="hljs-number">1</span> || PNum == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                    ANum[<span class="hljs-number">0</span>]++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PNum != <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                    ANum[<span class="hljs-number">1</span>]++;<br>                <span class="hljs-keyword">else</span><br>                    ANum[<span class="hljs-number">2</span>]++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> || TNum == <span class="hljs-number">0</span> || ANum[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> || (ANum[<span class="hljs-number">0</span>] * ANum[<span class="hljs-number">1</span>] != ANum[<span class="hljs-number">2</span>]))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>相比起前两道题, 这道题就稍显麻烦了, 我记得我第一次做这道题目时, 搞不懂题目描述的规则在说什么, 于是前去百度, 最终才明白题目的含义.<br>综合题目给的几个条件, 我们可以得出以下判断字符串是否<strong>正确</strong>的规则:</p><ol><li>字符串仅含<code>P</code>, <code>A</code>, <code>T</code>三个字符，且不存在其它字符(这是题目原话);</li><li>字符串中 <code>P</code> 和 <code>T</code> 均只能出现一次, 且 <code>P</code> 一定要出现在 <code>T</code> 的前面;</li><li><code>P</code> 和 <code>T</code> 中间一定要有一个 <code>A</code>. 也就是说 <code>PT</code> 也是不正确的输入, 这一点可以从输入样例里看出;</li><li><strong>P左侧A的数量 $\times$ 中间A的数量 $&#x3D;$ 右侧A的数量</strong></li></ol><p>前三个条件并没有什么难以理解的地方, 主要是第四个条件需要费点时间. 下面, 我们就来重点说一下第四个条件的由来.</p><blockquote><ol start="2"><li>任意形如 <code>xPATx</code> 的字符串都可以获得”<strong>答案正确</strong>“, 其中 <code>x</code> 或者是空字符串, 或者是仅由字母<code>A</code>组成的字符串;</li><li>如果 <code>aPbTc</code> 是正确的, 那么 <code>aPbATca</code> 也是正确的. 其中<code>a</code>, <code>b</code>, <code>c</code>均或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串.</li></ol></blockquote><p>由条件2可知, <code>PAT</code>, <code>APATA</code>, <code>AAPATAA</code> 等均是<strong>答案正确</strong>的字符串;<br>条件3实质上就是在条件2的基础上进行拓展, 为方便描述, 下面举几个例子(第一个可由条件2推得一定正确):</p><blockquote><p>a &#x3D; null, b &#x3D; A, c &#x3D; null</p><blockquote><p>PAT $\rightarrow$ PAAT $\rightarrow$ PAAAT $\rightarrow$ PAAAAT $\rightarrow$ …</p></blockquote><p>a &#x3D; A, b &#x3D; A, c &#x3D; A</p><blockquote><p>APATA $\rightarrow$ APAATAA $\rightarrow$ APAAATAAA $\rightarrow$ APAAAATAAAA $\rightarrow$ …</p></blockquote><p>a &#x3D; AA, b &#x3D; A, c &#x3D; AA</p><blockquote><p>AAPATAA $\rightarrow$ AAPAATAAAA $\rightarrow$ …</p></blockquote></blockquote><p>通过以上的三个例子, 我们可以得出结论: <strong>P左侧A的数量 $\times$ 中间A的数量 $&#x3D;$ 右侧A的数量</strong>  </p><p>依照这些规则, 就可以编写程序了, C++代码中写了比较详尽的注释, 特别是在如何实现这4条规则上, 在这里就不做过多赘述了.</p><pre class="note note-info"><strong>2023-01-18</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1002</title>
    <link href="/2023/01/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201002/"/>
    <url>/2023/01/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201002/</url>
    
    <content type="html"><![CDATA[<h1 id="写出这个数"><a href="#写出这个数" class="headerlink" title="写出这个数"></a>写出这个数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>读入一个正整数 $n$, 计算其各位数字之和, 用汉语拼音写出和的每一位数字.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例，即给出自然数 $n$ 的值。这里保证 $n$ 小于 $10^{100}$.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行内输出 $n$ 的各位数字之和的每一位, 拼音数字间有 1 空格, 但一行中最后一个拼音数字后没有空格.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><blockquote><p>1234567890987654321123456789</p></blockquote><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><blockquote><p>yi san wu</p></blockquote><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>第一版:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*  PTA 1002 写出这个数</span><br><span class="hljs-comment"> *  2022/07/17</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>, ss = <span class="hljs-number">0</span>;<span class="hljs-comment">//c用于记录数字</span><br><span class="hljs-type">int</span> gg = <span class="hljs-number">0</span>, z = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mm = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">gets</span>(a);<span class="hljs-comment">//输入到字符数组，算出总和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; a[x] != <span class="hljs-string">&#x27;\0&#x27;</span>; x++)<br>&#123;<br>sum = a[x] - <span class="hljs-number">48</span> + sum;<br>&#125;<br>ss = sum;<br><span class="hljs-comment">//判断多少位</span><br><span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>)<br>&#123;<br>sum /= <span class="hljs-number">10</span>;<br>c++;<br>&#125;<br><span class="hljs-comment">// 开始输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br>z = ss / <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i - <span class="hljs-number">1</span>);<br>z = z % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">switch</span> (z)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ling&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yi&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;er&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;san&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;si&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qi&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ba&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jiu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">switch</span> (z)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ling &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yi &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;er &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;san &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;si &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qi &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ba &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jiu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二版:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1002 写出这个数</span><br><span class="hljs-comment">/// 初次写于 2022-07-17, 修改于 2023-01-16</span><br><span class="hljs-comment">/// 感觉之前对这个题写的代码写的代码太&quot;娘希匹&quot;了.</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span> ((ch = <span class="hljs-built_in">getchar</span>()) &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        sum += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    string arr[] = &#123;<span class="hljs-string">&quot;ling&quot;</span>, <span class="hljs-string">&quot;yi&quot;</span>, <span class="hljs-string">&quot;er&quot;</span>, <span class="hljs-string">&quot;san&quot;</span>, <span class="hljs-string">&quot;si&quot;</span>, <span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;liu&quot;</span>, <span class="hljs-string">&quot;qi&quot;</span>, <span class="hljs-string">&quot;ba&quot;</span>, <span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br>    string str = <span class="hljs-built_in">to_string</span>(sum);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>(); i++) &#123;<br>        cout &lt;&lt; arr[<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(str[i] - <span class="hljs-string">&#x27;0&#x27;</span>)];<br>        <span class="hljs-keyword">if</span> (i &lt; str.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/// PTA 1002 写出这个数</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>            sum += str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>        str = String.valueOf(sum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">switch</span> (str.charAt(i)) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;ling&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;yi&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;er&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;san&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;si&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;wu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;liu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;qi&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;ba&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;jiu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &lt; str.length() - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><ul><li>首先读入这个正整数 $n$ 值得注意的是题目中给出的 $n$ 范围是 $[1,10^{100})$, 而C++中即便使用unsigned long int, 表示的最大整数为 $2^{64}-1$, 也就是 <code>18,446,744,073,709,551,615</code> (这个数是用计算器算出来的, 应该是正确的), 也不能满足题意, 所以我们应该考虑其他的输入方式</li><li>结合题目可知, 题目只要求我们计算出这个数各位上数的和, 于是我们可以用输入单个字符的方式读入这个数, 同时在读入的过程中接着把正整数各位上的和算出来, 于是有以下代码:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> ((ch = <span class="hljs-built_in">getchar</span>()) &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        sum += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch - <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 其实这里不必使用显式类型转换</span><br></code></pre></td></tr></table></figure></li><li>其实也可以首先把 $n$ 以字符串的形式读进来, 之后调用库函数, 将字符串中各位和算出来, 于是有Java版的算法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>    sum += str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>str = String.valueOf(sum);<br></code></pre></td></tr></table></figure></li><li>算出和之后, 将和每一位求出来后, 进行输出即可, 取和的每一位可以使用循环, 不断的对和进行对10模和除10操作(详见第一版C++代码), 也可以使用库函数, 将和转化为字符串(C++中的<code>to_stringJava</code>终的<code>String.valueOf()</code>) , 从知乎上找了一个<a href="https://zhuanlan.zhihu.com/p/441819455">参考资料</a></li><li>最后的问题便是输出, 可以使用switch语句对每个字符进行判断并输出. 因为输出内容与上文提到的’和’有着一 一对应的关系, 同时明显是存在偏序关系的, 于是可以先将要求输出的内容存到一个数组中, 之后找到字符和需要输出的内容的数组下标的对应关系即可.<br>于是有:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span> (str.<span class="hljs-built_in">charAt</span>(i)) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ling&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yi&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;er&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;san&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;si&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;liu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;qi&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ba&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jiu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">string arr[] = &#123;<span class="hljs-string">&quot;ling&quot;</span>, <span class="hljs-string">&quot;yi&quot;</span>, <span class="hljs-string">&quot;er&quot;</span>, <span class="hljs-string">&quot;san&quot;</span>, <span class="hljs-string">&quot;si&quot;</span>, <span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;liu&quot;</span>, <span class="hljs-string">&quot;qi&quot;</span>, <span class="hljs-string">&quot;ba&quot;</span>, <span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>        cout &lt;&lt; arr[static_cast&lt;<span class="hljs-type">int</span>&gt;(str[i] - <span class="hljs-string">&#x27;0&#x27;</span>)];<br>        <span class="hljs-keyword">if</span> (i &lt; str.length() - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>最后需要注意的问题是: <strong>行末没有空格!</strong></li><li>总的来说, 这道题不算太难, 许多繁琐的操作都有库函数的帮忙, 就是最后输出需要将规定的输出写入程序中, 比较烦人.</li></ul><h2 id="回想"><a href="#回想" class="headerlink" title="回想:"></a>回想:</h2><p>现在看第一版C++代码, 感觉当时真是太辣鸡了, 这么简单的题竟然用了86行代码, 有时回来看看自己之前写过的题目还是有必要的.</p><pre class="note note-info"><strong>2023-01-16</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1001</title>
    <link href="/2023/01/15/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201001/"/>
    <url>/2023/01/15/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201001/</url>
    
    <content type="html"><![CDATA[<h1 id="害死人不偿命的-3n-1-猜想"><a href="#害死人不偿命的-3n-1-猜想" class="headerlink" title="害死人不偿命的(3n+1)猜想"></a>害死人不偿命的(3n+1)猜想</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 $n$, 如果它是偶数, 那么把它砍掉一半; 如果它是奇数, 那么把 $3n+1$ 砍掉一半.这样一直反复砍下去, 最后一定在某一步得到 $n&#x3D;1$, 卡拉兹在 1950 年的世界数学家大会上公布了这个猜想, 传说当时耶鲁大学师生齐动员, 拼命想证明这个貌似很傻很天真的命题, 结果闹得学生们无心学业, 一心只证 $3n+1$, 以至于有人说这是一个阴谋, 卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想, 而是对给定的任一不超过 1000 的正整数 $n$, 简单地数一下, 需要多少步 (砍几下) 才能得到 $n&#x3D;1$?</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>每个测试输入包含 1 个测试用例，即给出正整数 $n$ 的值.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>输出从 $n$ 计算到 $1$ 需要的步数.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1001 害死人不偿命的(3n+1)猜想</span><br><span class="hljs-comment">/// 2022/07/17</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N, i = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">for</span> (; N != <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (N % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            N = N / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span><br>            N = (<span class="hljs-number">3</span> * N + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>    cout &lt;&lt; i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1001 害死人不偿命的(3n+1)猜想</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">myscan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> myscan.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                n /= <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                n = (<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            count++;<br>        &#125;<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a href="#简要解析" class="headerlink" title="简要解析:"></a>简要解析:</h2><p>本题作为 PAT (Basic Level) Practice 的开篇之题, 难度并不是很大, 只要读懂题意按照要求输出即可, 没有什么花花绕绕.</p><p>首先读入一个整数 $n$, 接着对这个整数进行如下操作:</p><ol><li>$n$ 是偶数, 即:<code>if(n%2 == 0)</code>或者简写为:<code>if(!N%2)</code>要注意, 这种简单写法只使用与C++, Java中并不适用, 因为Java中没有定义int类型与boolean类型的转换关系. 砍掉 $n$ 的一半, 即: <code>n /= 2</code>;</li><li>如果为奇数, 即在上面的if语句下添加一个else即可, 把 $3n+1$ 砍掉一半, 即:<code>n = (3 * n + 1) / 2</code>;</li><li>重复这种操作, 直到 $n&#x3D;1$, 这也启示我们直接在上述的逻辑判断外再加一层循环即可. 同时初始化一个用于记录循环进行次数的变量即可.</li><li>最后注意输入和输出格式即可.</li></ol><pre class="note note-info"><strong>2023-01-15</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
