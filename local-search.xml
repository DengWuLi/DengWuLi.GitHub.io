<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BUPT JAVA: Blackjack</title>
    <link href="/2023/05/23/BUPT_JAVA/Blackjack/"/>
    <url>/2023/05/23/BUPT_JAVA/Blackjack/</url>
    
    <content type="html"><![CDATA[<h1 id="blackjack"><a class="markdownIt-Anchor" href="#blackjack"></a> Blackjack</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>21 点又名黑杰克 (Blackjack), 起源于法国, 已流传到世界各地, 有着悠久的历史. 现在在世界各地的赌场中都可以看到二十一点. 随着互联网的发展, 二十一点开始走向网络时代. 该游戏由 2 到 6 个人玩, 使用除大小王之外的 52 张牌, 游戏者的目标是使手中的牌的点数之和不超过 21 点且尽量大.<br />大家手中扑克点数的计算规则是: 2 至 9 牌, 按其原点数计算; <code>K</code>, <code>Q</code>, <code>J</code> 和 10 牌都算作 10 点; <code>A</code> 牌 (ace) 既可算作 1 点也可算作 11 点, 由玩家自己决定 (当玩家停牌时, 点数一律视为最大而尽量不爆, 如 <code>A + 9</code> 为 20, <code>A + 4+ 8</code> 为 13, <code>A + 3 + A</code> 视为 15) .<br />你的任务设计基于指定策略的一个 21 点游戏的部分功能.<br />指定策略为: 如果手中牌的点数之和小于 17 点则继续要下一张牌, 直到大于等于 17 点为止. 如果手里的牌有 A, 且 A 的点数当成 11 点没有超过 21 点, 则此时 A 要按 11 点计算, 如果超过 21 点, 则 A 要按 1 点计算.<br />一个参考的设计为:</p><ol><li>设计一个 card 类, 用于保存一张牌;</li><li>设计一个 hand 类, 用于保存一手牌;</li><li>设计一个 player 类, 该类可以基于指定策略完成一次游戏过程.</li></ol><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>若干行 (至少 2 行), 每行代表一张牌. 具体格式见样例.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>若干行.<br />读入前两张牌不输出, 从第三张牌开始 (如果需要), 则每次要牌, 要先输出 <code>Hit</code>, 然后读入下一张牌, 并依次输出该牌的花色及点数 (A 输出 <code>1 11</code>, 即它有两个点数). 当不再要牌时要先输出 <code>Stand</code>, 然后在一行内输出这一手牌, 牌与牌之间用一个空格分隔. 牌输出的顺序为先看牌面, 牌面小的在前 (牌面由小到大的顺序为 A, 2, 3…J, Q, K), 当牌面相同时看花色, 输出顺序从前到后为 <code>Spade</code>, <code>Heart</code>, <code>Diamond</code>, <code>Club</code>. 最后一行输出这一手牌的结果, 如果总点数超过 21 点，则输出 <code>Bust</code>, 如果是 Blackjack (一手牌只有两张牌且点数相加和为 21 点) 则输出 <code>Blackjack</code>. 其他情况则输出一个整数, 代表这手牌的点数 (尽量大且不爆). 具体格式见样例.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Spade 4<br>Heart A<br>Heart 3<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">Hit<br>Heart 3<br>Stand<br>HeartA Heart3 Spade4<br>18<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Blackjack</span><br><span class="hljs-comment">// 2023/05/22 ~ 2023/05/23</span><br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        String color, point;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (input.hasNext()) &#123;<br>            color = input.next();<br>            point = input.next();<br>            i++;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">3</span>) &#123;<br>                System.out.print(color + <span class="hljs-string">&quot; &quot;</span>);<br>                <span class="hljs-keyword">switch</span> (point) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;A&quot;</span> -&gt; System.out.println(<span class="hljs-string">&quot;1 11&quot;</span>);<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;K&quot;</span> -&gt; System.out.println(<span class="hljs-string">&quot;10&quot;</span>);<br>                    <span class="hljs-keyword">default</span> -&gt; System.out.println(Integer.parseInt(point));<br>                &#125;<br>            &#125;<br>            Hand.add(color, point);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Hand.getPoints();<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span> (Hand.getPoints() &lt; <span class="hljs-number">17</span>)<br>                    System.out.println(<span class="hljs-string">&quot;Hit&quot;</span>);<br>                <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Stand&quot;</span>);<br>                    Hand.cardsPrint();<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">points</span> <span class="hljs-operator">=</span> Hand.getPoints();<br>                    <span class="hljs-keyword">if</span> (points &gt; <span class="hljs-number">21</span>)<br>                        System.out.println(<span class="hljs-string">&quot;Bust&quot;</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (points == <span class="hljs-number">21</span> &amp;&amp; Hand.cards.size() == <span class="hljs-number">2</span>)<br>                        System.out.println(<span class="hljs-string">&quot;Blackjack&quot;</span>);<br>                    <span class="hljs-keyword">else</span><br>                        System.out.println(points);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Card&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] SUITS = &#123;<span class="hljs-string">&quot;Spade&quot;</span>, <span class="hljs-string">&quot;Heart&quot;</span>, <span class="hljs-string">&quot;Diamond&quot;</span>, <span class="hljs-string">&quot;Club&quot;</span>&#125;;<br>    <span class="hljs-type">int</span> suit; <span class="hljs-comment">// 花色</span><br>    <span class="hljs-type">int</span> rank; <span class="hljs-comment">// 点数</span><br><br>    Card(String suit, String rank) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; SUITS.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (suit.equals(SUITS[i])) &#123;<br>                <span class="hljs-built_in">this</span>.suit = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">switch</span> (rank) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;A&quot;</span> -&gt; <span class="hljs-built_in">this</span>.rank = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;J&quot;</span> -&gt; <span class="hljs-built_in">this</span>.rank = <span class="hljs-number">11</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Q&quot;</span> -&gt; <span class="hljs-built_in">this</span>.rank = <span class="hljs-number">12</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;K&quot;</span> -&gt; <span class="hljs-built_in">this</span>.rank = <span class="hljs-number">13</span>;<br>            <span class="hljs-keyword">default</span> -&gt; <span class="hljs-built_in">this</span>.rank = Integer.parseInt(rank);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Card other)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.rank == other.rank)<br>            <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.suit &lt; other.suit) ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.rank &lt; other.rank) ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hand</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Vector&lt;Card&gt; cards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">points</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">aceCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String suit, String rank)</span> &#123;<br>        cards.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(suit, rank));<br><br>        <span class="hljs-keyword">switch</span> (rank) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;A&quot;</span> -&gt; aceCount++;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;K&quot;</span> -&gt; points += <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">default</span> -&gt; points += Integer.parseInt(rank);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPoints</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 当 ACE 全部都是 1 时, 已经超过了 21 点, 就直接返回</span><br>        <span class="hljs-keyword">if</span> (points + aceCount &gt; <span class="hljs-number">21</span>)<br>            <span class="hljs-keyword">return</span> points + aceCount;<br><br>        <span class="hljs-comment">// 返回不超过 21 点的最大点数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= aceCount; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">tempPoint</span> <span class="hljs-operator">=</span> points + i * <span class="hljs-number">11</span> + (aceCount - i);<br>            <span class="hljs-keyword">if</span> (tempPoint &lt;= <span class="hljs-number">21</span> &amp;&amp; tempPoint &gt;= res)<br>                res = tempPoint;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cardsPrint</span><span class="hljs-params">()</span> &#123;<br>        Collections.sort(cards);<br>        <span class="hljs-keyword">for</span> (Card card : cards) &#123;<br>            String rank;<br>            <span class="hljs-keyword">switch</span> (card.rank) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; rank = <span class="hljs-string">&quot;A&quot;</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">11</span> -&gt; rank = <span class="hljs-string">&quot;J&quot;</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">12</span> -&gt; rank = <span class="hljs-string">&quot;Q&quot;</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">13</span> -&gt; rank = <span class="hljs-string">&quot;K&quot;</span>;<br>                <span class="hljs-keyword">default</span> -&gt; rank = String.valueOf(card.rank);<br>            &#125;<br>            System.out.print(Card.SUITS[card.suit] + rank + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-05-23</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 括号匹配二</title>
    <link href="/2023/05/22/BUPT_JAVA/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E4%BA%8C/"/>
    <url>/2023/05/22/BUPT_JAVA/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="括号匹配二"><a class="markdownIt-Anchor" href="#括号匹配二"></a> 括号匹配二</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>假设表达式中包含三种括号: <code>(), [], &#123;&#125;</code>. 其嵌套顺序随意，即 <code>()</code> 或 <code>&#123;[&#123;&#125;]&#125;</code> 均为正确格式, <code>[(])</code> 或 <code>(()]</code> 均为不正确格式.<br />现给出一个只包含这三种括号的括号序列, 试判断该括号序列是否合法.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>只包含一行, 为只包含 <code>(), [], &#123;&#125;</code>的括号序列. (序列长度不超过 100 个字符)</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>若括号序列合法, 输出 <code>YES</code>, 反之输出 <code>NO</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;([]())&#125;<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">YES<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 括号匹配二</span><br><span class="hljs-comment">// 2023/05/22</span><br><span class="hljs-comment">// 一个 LeeCode 上的题目吧</span><br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Character&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.nextLine();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                linkedList.addLast(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>                linkedList.addLast(<span class="hljs-string">&#x27;]&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.charAt(i) == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                linkedList.addLast(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (linkedList.isEmpty() || s.charAt(i) != linkedList.removeLast()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (linkedList.isEmpty())<br>            System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-05-22</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 查词典</title>
    <link href="/2023/05/22/BUPT_JAVA/%E6%9F%A5%E8%AF%8D%E5%85%B8/"/>
    <url>/2023/05/22/BUPT_JAVA/%E6%9F%A5%E8%AF%8D%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="查词典"><a class="markdownIt-Anchor" href="#查词典"></a> 查词典</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>现在有一本将汪星人语言翻译成喵星人语言的词典, 请你写一段查该词典的程序.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个整数 $ n (0 &lt; n \leq 1000) $, 后边是 n 行, 每行均为两个用空格分隔的字符串, 前边的字符串代表喵星人的单词, 后边的字符串代表汪星人的单词, 而且在词典中不会有某个汪星人的单词出现两次或两次以上.<br />从第 n + 2 行开始有若干行 (行数大于 1 且小于等于 1000), 每行均为一个字符串, 代表汪星人语言的文档, 该文档最后一行一定是 <code>dog</code>.<br />测试用例保证:</p><ol><li>输入中出现所有单词都只包含小写字母, 而且长度不会超过 10;</li><li>输入中只会在最后一行出现一次 dog.</li></ol><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>在输出中, 你需要把输入文档翻译成喵星人语言, 每行输出一个喵星人单词. 如果某个汪星人单词不在词典中, 就把这个单词翻译成 <code>dog</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br>mmm www<br>m w<br>mm ww<br>ww<br>wwww<br>w<br>dog<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">mm<br>dog<br>m<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查词典</span><br><span class="hljs-comment">// 2023/05/22</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">dict</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> input.next(),<br>                    dog = input.next();<br>            dict.put(dog, cat);<br>        &#125;<br><br>        String str;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            str = input.next();<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;dog&quot;</span>))<br>                <span class="hljs-keyword">break</span>;<br>            System.out.println(dict.getOrDefault(str, <span class="hljs-string">&quot;dog&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-05-22</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 群体对象_TreeMap</title>
    <link href="/2023/05/22/BUPT_JAVA/%E7%BE%A4%E4%BD%93%E5%AF%B9%E8%B1%A1_TreeMap/"/>
    <url>/2023/05/22/BUPT_JAVA/%E7%BE%A4%E4%BD%93%E5%AF%B9%E8%B1%A1_TreeMap/</url>
    
    <content type="html"><![CDATA[<h1 id="群体对象_treemap"><a class="markdownIt-Anchor" href="#群体对象_treemap"></a> 群体对象_TreeMap</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>定义下述 5 个类 (这 5 个类与前边的作业的要求一致, 可以直接拿来用)<br />其中<code>SalariedEmployee</code>, <code>HourlyEmployee</code>, <code>CommissionEmployee</code> 继承自 <code>Employee</code>, <code>basePlusCommissionEmployee</code> 继承自 <code>CommissionEmployee</code>.<br />类属性如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Employee: firstName,lastName,socialSecurityNumber<br>SalariedEmployee: weeklySalary <span class="hljs-comment">// 周薪</span><br>HourlyEmployee: wage <span class="hljs-comment">// 每周工钱</span><br>                hours <span class="hljs-comment">//月工作小时数</span><br>CommissionEmployee: grossSales <span class="hljs-comment">// 销售额</span><br>                   commissionRate <span class="hljs-comment">// 提成比率</span><br>basePlusCommissionEmployee: baseSalary <span class="hljs-comment">// 月基本工资</span><br></code></pre></td></tr></table></figure><p><code>Employee</code> 类中定义了抽象方法 <code>earning</code>, 用于计算员工的月工资<br />不同类中工资的计算方式:</p><table><thead><tr><th style="text-align:left">类名</th><th style="text-align:left">计算方式</th></tr></thead><tbody><tr><td style="text-align:left"><code>SalariedEmployee</code></td><td style="text-align:left"><code>weeklySalary * 4</code></td></tr><tr><td style="text-align:left"><code>HourlyEmployee</code></td><td style="text-align:left"><code>wage * hours</code></td></tr><tr><td style="text-align:left"><code>CommissionEmployee</code></td><td style="text-align:left"><code>grossSales * commissionRate</code></td></tr><tr><td style="text-align:left"><code>basePlusCommissionEmployee</code></td><td style="text-align:left"><code>grossSales*commissionRate+baseSalary</code></td></tr></tbody></table><p>类还应该包括构造方法, <code>toString</code> 方法, 属性的 <code>get/set</code> 方法.<br /><code>firstName</code>, <code>lastName</code>, <code>socialSecurityNumber</code> 的初始化在构造方法中完成. 其中对 <code>firstName</code>, <code>lastName</code> 也要提供 <code>get/set</code> 方法, 对 <code>socialSecurityNumber</code> 只提供 <code>get</code> 方法.<br />其他属性要提供 <code>get/set</code> 方法</p><p>定义 <code>EmployeeException</code> 类, 该类继承自 <code>Exception</code>, 至少包含 <code>code</code> 和 <code>message</code> 两个属性, 分别代表错误码和错误信息.</p><p>定义类 <code>Factory</code>, 该类有私有属性 <code>employees</code>, 类型为 <code>TreeMap</code>.<br />完成下述功能 (将原题目的文字描述变成了表格描述, 语言表述略有化简):</p><table><thead><tr><th style="text-align:left">定义的方法</th><th style="text-align:left">作用</th><th style="text-align:left">异常错误码和错误信息</th><th>返回值</th></tr></thead><tbody><tr><td style="text-align:left"><code>Employee getEmployee(String empSecNum)</code></td><td style="text-align:left">用于查找并返回社会保险号为 <code>empSecNum</code> 的员工</td><td style="text-align:left">错误码为 <code>1004</code>, 错误信息为 <code>employee not found.</code></td><td>根据返回的员工对象的引用.</td></tr><tr><td style="text-align:left"><code>Employee deleteEmployee(String empSecNum)</code></td><td style="text-align:left">用于从 <code>TreeMap</code> 中删除社会保险号为 <code>empSecNum</code> 的员工</td><td style="text-align:left">错误码为 <code>1002</code>, 错误信息为 <code>employee not found.</code></td><td>返回该员工对象的引用</td></tr><tr><td style="text-align:left"><code>Employee addEmployee(Employee emp)</code></td><td style="text-align:left">用于添加参数定义的员工对象到 <code>TreeMap</code>中</td><td style="text-align:left">误码为 <code>1001</code>, 错误信息为 <code>employee exists.</code></td><td>返回该员工对象的引用</td></tr><tr><td style="text-align:left"><code>Employee updateEmployee(String empSecNum, Employee emp)</code></td><td style="text-align:left">用于更新员工集合中社会保险号为 <code>empSecNum</code> 的员工对象信息, 更新后的信息为 <code>emp</code></td><td style="text-align:left">错误码为<code>1003</code>, 错误信息为 <code>employee not found.</code></td><td>返回<code>emp</code></td></tr><tr><td style="text-align:left"><code>void printEmployees()</code></td><td style="text-align:left">用于输出每一个员工的信息</td><td style="text-align:left">-</td><td>-</td></tr></tbody></table><p>用以上各类完成下述功能.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为若干行, 每行代表一个操作. 每行的格式为: 第一个字符串为操作命令, 其中:</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">对应方法</th></tr></thead><tbody><tr><td style="text-align:left"><code>get</code></td><td style="text-align:left"><code>getEmployee</code> 方法</td></tr><tr><td style="text-align:left"><code>add</code></td><td style="text-align:left"><code>addEmployee</code> 方法</td></tr><tr><td style="text-align:left"><code>update</code></td><td style="text-align:left"><code>updateEmployee</code> 方法</td></tr><tr><td style="text-align:left"><code>delete</code></td><td style="text-align:left"><code>deleteEmployee</code> 方法</td></tr><tr><td style="text-align:left"><code>print</code></td><td style="text-align:left"><code>printEmployees</code> 方法</td></tr><tr><td style="text-align:left"><code>exit</code></td><td style="text-align:left">表示程序结束</td></tr></tbody></table><p><code>add</code> 和 <code>update</code> 的后续格式为一个雇员的信息 (具体见样例):</p><p>输入个数如表所示, 紧跟着的三个字符串依次代表 <code>firstName</code>, <code>lastName</code>, <code>socialSecurityNumber</code>.</p><table><thead><tr><th style="text-align:left">Tag</th><th style="text-align:left">类名</th><th style="text-align:left">数字意义 (按输入顺序标记的对应的意义)</th></tr></thead><tbody><tr><td style="text-align:left"><code>0</code></td><td style="text-align:left"><code>SalariedEmployee</code></td><td style="text-align:left"><code>weeklySalary</code></td></tr><tr><td style="text-align:left"><code>1</code></td><td style="text-align:left"><code>HourlyEmployee</code></td><td style="text-align:left"><code>wage</code>, <code>hours</code></td></tr><tr><td style="text-align:left"><code>2</code></td><td style="text-align:left"><code>CommissionEmployee</code></td><td style="text-align:left"><code>grossSales</code>, <code>commissionRate</code></td></tr><tr><td style="text-align:left"><code>3</code></td><td style="text-align:left"><code>basePlusCommissionEmployee</code></td><td style="text-align:left"><code>grossSales</code>, <code>commissionRate</code>, <code>baseSalary</code></td></tr></tbody></table><p><code>get</code> 和 <code>delete</code> 的后续格式为雇员的社会保险号 (具体见样例).<br /><code>print</code> 与 <code>exit</code> 没有后续输入。</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p><code>print</code> 操作, 依次输出 <code>TreeMap</code> 全部雇员信息 (格式见样例).<br />其他操作, 如果发生异常, 则输出错误代码和错误信息 (格式见样例), 否则, 输出对应方法返回的雇员信息 (格式见样例).</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">add 0 Ai Meng 2012673901 4312<br>add 1 NanXiong Qimu 2016782340 15.2 200<br>add 2 Guo Yang 2017672347 46781.3 0.1<br>add 3 Rong Huang 2018768901 7854.4 0.28 7098<br>get 2016782340<br>delete 2018768901<br>update 2 Guo Yang 2017672347 46780 0.1<br>get 2016782345<br>delete 20187890<br>print<br>exit<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">firstName:Ai; lastName:Meng; socialSecurityNumber:2012673901; earning:17248.00<br>firstName:NanXiong; lastName:Qimu; socialSecurityNumber:2016782340; earning:3040.00<br>firstName:Guo; lastName:Yang; socialSecurityNumber:2017672347; earning:4678.13<br>firstName:Rong; lastName:Huang; socialSecurityNumber:2018768901; earning:9297.23<br>firstName:NanXiong; lastName:Qimu; socialSecurityNumber:2016782340; earning:3040.00<br>firstName:Rong; lastName:Huang; socialSecurityNumber:2018768901; earning:9297.23<br>firstName:Guo; lastName:Yang; socialSecurityNumber:2017672347; earning:4678.00<br>1004<br>employee not found.<br>1002<br>employee not found.<br>firstName:Ai; lastName:Meng; socialSecurityNumber:2012673901; earning:17248.00<br>firstName:NanXiong; lastName:Qimu; socialSecurityNumber:2016782340; earning:3040.00<br>firstName:Guo; lastName:Yang; socialSecurityNumber:2017672347; earning:4678.00<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 群体对象_TreeMap</span><br><span class="hljs-comment">// 2023/05/22</span><br><span class="hljs-comment">// 代码巨长</span><br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> EmployeeException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        String order;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Factory</span>();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            order = input.next();<br>            <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">switch</span> (order) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span> -&gt; &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;update&quot;</span> -&gt; &#123;<br>                        <span class="hljs-type">var</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">firstName</span> <span class="hljs-operator">=</span> input.next(), lastName = input.next(), socialSecurity = input.next();<br>                        <span class="hljs-keyword">switch</span> (tag) &#123;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; &#123;<br>                                employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SalariedEmployee</span>(firstName, lastName, socialSecurity);<br>                                <span class="hljs-type">var</span> <span class="hljs-variable">weeklySalary</span> <span class="hljs-operator">=</span> input.nextDouble();<br>                                ((SalariedEmployee) employee).setWeeklySalary(weeklySalary);<br>                            &#125;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                                employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HourlyEmployee</span>(firstName, lastName, socialSecurity);<br>                                <span class="hljs-type">double</span> <span class="hljs-variable">wage</span> <span class="hljs-operator">=</span> input.nextDouble(), hours = input.nextDouble();<br>                                ((HourlyEmployee) employee).setWage(wage);<br>                                ((HourlyEmployee) employee).setHours(hours);<br>                            &#125;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>                                employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommissionEmployee</span>(firstName, lastName, socialSecurity);<br>                                <span class="hljs-type">double</span> <span class="hljs-variable">grossSales</span> <span class="hljs-operator">=</span> input.nextDouble(), commissionRate = input.nextDouble();<br>                                ((CommissionEmployee) employee).setGrossSales(grossSales);<br>                                ((CommissionEmployee) employee).setCommissionRate(commissionRate);<br>                            &#125;<br>                            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; &#123;<br>                                employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">basePlusCommissionEmployee</span>(firstName, lastName, socialSecurity);<br>                                <span class="hljs-type">double</span> <span class="hljs-variable">grossSales</span> <span class="hljs-operator">=</span> input.nextDouble(), commissionRate = input.nextDouble(), baseSalary = input.nextDouble();<br>                                ((basePlusCommissionEmployee) employee).setGrossSales(grossSales);<br>                                ((basePlusCommissionEmployee) employee).setCommissionRate(commissionRate);<br>                                ((basePlusCommissionEmployee) employee).setBaseSalary(baseSalary);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (order.equals(<span class="hljs-string">&quot;add&quot;</span>))<br>                            employee = factory.addEmployee(employee);<br>                        <span class="hljs-keyword">else</span><br>                            employee = factory.updateEmployee(socialSecurity, employee);<br>                    &#125;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;get&quot;</span> -&gt; employee = factory.getEmployee(input.next());<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;delete&quot;</span> -&gt; employee = factory.deleteEmployee(input.next());<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;print&quot;</span> -&gt; factory.printEmployees();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (employee != <span class="hljs-literal">null</span>)<br>                    System.out.println(employee);<br><br>            &#125; <span class="hljs-keyword">catch</span> (EmployeeException e) &#123;<br>                System.out.println(e.code);<br>                System.out.println(e.message);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Employee&gt; &#123;<br>    <span class="hljs-keyword">private</span> String firstName;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String socialSecurity;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFirstName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSocialSecurity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socialSecurity;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstName</span><span class="hljs-params">(String firstName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>        <span class="hljs-built_in">this</span>.socialSecurity = socialSecurity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;firstName:%s; lastName:%s; socialSecurityNumber:%s; earning:%.2f&quot;</span>, firstName, lastName, socialSecurity, earning());<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Employee other)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.earning() - other.earning());<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SalariedEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> weeklySalary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWeeklySalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> weeklySalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWeeklySalary</span><span class="hljs-params">(<span class="hljs-type">double</span> weeklySalary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.weeklySalary = weeklySalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalariedEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> weeklySalary * <span class="hljs-number">4</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HourlyEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWage</span><span class="hljs-params">(<span class="hljs-type">double</span> wage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.wage = wage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHours</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hours;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHours</span><span class="hljs-params">(<span class="hljs-type">double</span> hours)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hours = hours;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> wage;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> hours;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HourlyEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wage * hours;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommissionEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grossSales;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> commissionRate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getGrossSales</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> grossSales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGrossSales</span><span class="hljs-params">(<span class="hljs-type">double</span> grossSales)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grossSales = grossSales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getCommissionRate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> commissionRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommissionRate</span><span class="hljs-params">(<span class="hljs-type">double</span> commissionRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.commissionRate = commissionRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommissionEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> grossSales * commissionRate;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">basePlusCommissionEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CommissionEmployee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> baseSalary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBaseSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> baseSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBaseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.baseSalary = baseSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">basePlusCommissionEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.earning() + baseSalary;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">public</span> String message;<br><br>    EmployeeException(<span class="hljs-type">int</span> code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Employee&gt; employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmployee</span><span class="hljs-params">(String empSecNum)</span> <span class="hljs-keyword">throws</span> EmployeeException &#123;<br>        <span class="hljs-keyword">if</span> (employees.containsKey(empSecNum))<br>            <span class="hljs-keyword">return</span> employees.get(empSecNum);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeException</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;employee not found.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(String empSecNum)</span> <span class="hljs-keyword">throws</span> EmployeeException &#123;<br>        <span class="hljs-keyword">if</span> (employees.containsKey(empSecNum)) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employees.get(empSecNum);<br>            employees.remove(empSecNum);<br>            <span class="hljs-keyword">return</span> employee;<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeException</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;employee not found.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee emp)</span> <span class="hljs-keyword">throws</span> EmployeeException &#123;<br>        <span class="hljs-keyword">if</span> (employees.containsKey(emp.getSocialSecurity()))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeException</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;employee exists.&quot;</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            employees.put(emp.getSocialSecurity(), emp);<br>            <span class="hljs-keyword">return</span> emp;<br>        &#125;<br>    &#125;<br><br>    Employee <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(String empSecNum, Employee emp)</span> <span class="hljs-keyword">throws</span> EmployeeException &#123;<br>        <span class="hljs-keyword">if</span> (employees.containsKey(empSecNum)) &#123;<br>            employees.put(empSecNum, emp);<br>            <span class="hljs-keyword">return</span> employees.get(empSecNum);<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeException</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;employee not found.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployees</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Employee&gt; entry : employees.entrySet()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>            <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>)<br>                System.out.println(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-05-22</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 集合运算</title>
    <link href="/2023/05/22/BUPT_JAVA/%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97/"/>
    <url>/2023/05/22/BUPT_JAVA/%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="集合运算"><a class="markdownIt-Anchor" href="#集合运算"></a> 集合运算</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>给出两个整数集合 A, B, 求出他们的交集, 并集以及B在A中的余集。</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个整数 n, 表示集合 A 中的元素个数.<br />第二行有 n 个互不相同的用空格隔开的整数, 表示集合 A 中的元素.<br />第三行为一个整数 m, 表示集合 B 中的元素个数.<br />第四行有 m 个互不相同的用空格隔开的整数, 表示集合 B 中的元素.<br />集合中的所有元素均为 <code>int</code> 范围内的整数, $ n, m \leq 1000 $.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>第一行按从小到大的顺序输出 A, B 交集中的所有元素.<br />第二行按从小到大的顺序输出 A, B 并集中的所有元素.<br />第三行按从小到大的顺序输出 B 在 A 中的余集中的所有元素.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">5<br>1 2 3 4 5<br>5<br>2 4 6 8 10<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">2 4<br>1 2 3 4 5 6 8 10<br>1 3 5<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 集合运算</span><br><span class="hljs-comment">// 2023/05/22</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            A.add(input.nextInt());<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++)<br>            B.add(input.nextInt());<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Integer&gt;();<br>        res.addAll(A);<br>        res.retainAll(B);<br><br>        <span class="hljs-keyword">for</span> (Integer i : res)<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        System.out.println();<br><br>        res.clear();<br>        res.addAll(A);<br>        res.addAll(B);<br>        <span class="hljs-keyword">for</span> (Integer i : res)<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        System.out.println();<br><br>        res.clear();<br>        res.addAll(A);<br>        res.removeAll(B);<br>        <span class="hljs-keyword">for</span> (Integer i : res)<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-05-22</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networks Part Answers 4</title>
    <link href="/2023/04/25/ComputerNetworks/ComputerNetworksPartAnswers4/"/>
    <url>/2023/04/25/ComputerNetworks/ComputerNetworksPartAnswers4/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-networks-part-answers-4"><a class="markdownIt-Anchor" href="#computer-networks-part-answers-4"></a> Computer Networks Part Answers 4</h1><font face = "Times New Roman" size = 4><b>1.</b> What is the length of a contention slot in CSMA/CD for <br>(a) a 2-km twin-lead cable (signal propagation speed is 82% of the signal propagation speed in vacuum)? <br>(b) a 40-km multimode fiber optic cable (signal propagation speed is 65% of the signal propagation speed in vacuum)?</font><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn><msub><mi>τ</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn><mfrac><mrow><mn>2</mn><mi>K</mi><mi>m</mi></mrow><mrow><mn>0.82</mn><mo>×</mo><mn>30</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mi>K</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mn>16.16</mn><mi>μ</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">t_1 = 2 \tau_1 = 2 \frac{2 Km}{0.82 \times 30 \times 10^4 Km/s} = 16.16 \mu s </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.29633em;vertical-align:-0.936em;"></span><span class="mord">2</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">8</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">.</span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal">μ</span><span class="mord mathnormal">s</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><msub><mi>τ</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mfrac><mrow><mn>40</mn><mi>K</mi><mi>m</mi></mrow><mrow><mn>0.65</mn><mo>×</mo><mn>30</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mi>K</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac><mo>=</mo><mn>0.41</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">t_2 = 2 \tau_2 = 2 \frac{40 Km}{0.65 \times 30 \times 10^4 Km/s} = 0.41 ms </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.29633em;vertical-align:-0.936em;"></span><span class="mord">2</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord">1</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span></span></span></span></span></p><p><em>本题考查课本的基础知识, 只需要记住采用 CSMA/CD 的网络中, 一个站点在开始发送数据后, 最多需要经过 $ 2 \tau $ 的时间才能发现冲突,<br />因此 $ 2 \tau $ 称为竞争时隙 (或争用期)</em></p><br><font face = "Times New Roman" size = 4><b>2.</b> Six stations, A through F, communicate using the MACA protocol. Is it possible for two transmissions to take place simultaneously? Explain your answer.</font><p>可能. 发送 RTS 的站点只要收到 CTS, 就可以无冲突发送.<br />假设从 A 到 F 各个站点依次排列在一条直线上 (如下图所示), 其信号覆盖范围只到自己的邻居站点, 即 A 的信号只有 B 能收到 ,<br />B的信号只有 A 和 C 能收到, 以此类推.<br />若 A 要发送数据给 B, E 要发送数据给 F, 由于 A 和 E 通过 RTS 和 CTS 都检测出没有冲突, 这两个传输可以同时发生.</p><pre><code class=" mermaid">graph LR  A --- B --- C --- D --- E --- F</code></pre><br><font face = "Times New Roman" size = 4><b>3.</b> What is the baud rate of classic 10-Mbps Ethernet?</font><p>传统的 10Mbps 以太网使用曼彻斯特编码, 它发送的每一位都有两个信号周期, 即信号频率是数据率的2倍.<br />数据率为 10 Mbps, 因此信号速率是 20M 波特.</p><br><font face = "Times New Roman" size = 4><b>4.</b> Sketch the Manchester encoding on a classic Ethernet for the bit stream $ 0001110101 $.</font><p>如下图所示:</p><div width="100%" style="overflow-x: auto;">   <?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="460.8pt" height="345.6pt" viewBox="0 0 460.8 345.6" xmlns="http://www.w3.org/2000/svg" version="1.1"> <metadata>  <rdf:RDF xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">   <cc:Work>    <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>    <dc:date>2023-04-23T12:00:18.788590</dc:date>    <dc:format>image/svg+xml</dc:format>    <dc:creator>     <cc:Agent>      <dc:title>Matplotlib v3.7.0, https://matplotlib.org/</dc:title>     </cc:Agent>    </dc:creator>   </cc:Work>  </rdf:RDF> </metadata> <defs>  <style type="text/css">*{stroke-linejoin: round; stroke-linecap: butt}</style> </defs> <g id="figure_1">  <g id="patch_1">   <path d="M 0 345.6 L 460.8 345.6 L 460.8 0 L 0 0 z" style="fill: #ffffff"/>  </g>  <g id="axes_1">   <g id="patch_2">    <path d="M 57.6 307.584 L 414.72 307.584 L 414.72 41.472 L 57.6 41.472 z" style="fill: #ffffff"/>   </g>   <g id="matplotlib.axis_1">    <g id="xtick_1">     <g id="line2d_1">      <defs>       <path id="m5dc0263618" d="M 0 0 L 0 3.5 " style="stroke: #000000; stroke-width: 0.8"/>      </defs>      <g>       <use xlink:href="#m5dc0263618" x="73.832727" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_1">      <!-- 0.0 -->      <g transform="translate(65.881165 322.182437) scale(0.1 -0.1)">       <defs>        <path id="DejaVuSans-30" d="M 2034 4250 Q 1547 4250 1301 3770 Q 1056 3291 1056 2328 Q 1056 1369 1301 889 Q 1547 409 2034 409 Q 2525 409 2770 889 Q 3016 1369 3016 2328 Q 3016 3291 2770 3770 Q 2525 4250 2034 4250 zM 2034 4750 Q 2819 4750 3233 4129 Q 3647 3509 3647 2328 Q 3647 1150 3233 529 Q 2819 -91 2034 -91 Q 1250 -91 836 529 Q 422 1150 422 2328 Q 422 3509 836 4129 Q 1250 4750 2034 4750 z" transform="scale(0.015625)"/>        <path id="DejaVuSans-2e" d="M 684 794 L 1344 794 L 1344 0 L 684 0 L 684 794 z" transform="scale(0.015625)"/>       </defs>       <use xlink:href="#DejaVuSans-30"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-30" x="95.410156"/>      </g>     </g>    </g>    <g id="xtick_2">     <g id="line2d_2">      <g>       <use xlink:href="#m5dc0263618" x="114.414545" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_2">      <!-- 2.5 -->      <g transform="translate(106.462983 322.182437) scale(0.1 -0.1)">       <defs>        <path id="DejaVuSans-32" d="M 1228 531 L 3431 531 L 3431 0 L 469 0 L 469 531 Q 828 903 1448 1529 Q 2069 2156 2228 2338 Q 2531 2678 2651 2914 Q 2772 3150 2772 3378 Q 2772 3750 2511 3984 Q 2250 4219 1831 4219 Q 1534 4219 1204 4116 Q 875 4013 500 3803 L 500 4441 Q 881 4594 1212 4672 Q 1544 4750 1819 4750 Q 2544 4750 2975 4387 Q 3406 4025 3406 3419 Q 3406 3131 3298 2873 Q 3191 2616 2906 2266 Q 2828 2175 2409 1742 Q 1991 1309 1228 531 z" transform="scale(0.015625)"/>        <path id="DejaVuSans-35" d="M 691 4666 L 3169 4666 L 3169 4134 L 1269 4134 L 1269 2991 Q 1406 3038 1543 3061 Q 1681 3084 1819 3084 Q 2600 3084 3056 2656 Q 3513 2228 3513 1497 Q 3513 744 3044 326 Q 2575 -91 1722 -91 Q 1428 -91 1123 -41 Q 819 9 494 109 L 494 744 Q 775 591 1075 516 Q 1375 441 1709 441 Q 2250 441 2565 725 Q 2881 1009 2881 1497 Q 2881 1984 2565 2268 Q 2250 2553 1709 2553 Q 1456 2553 1204 2497 Q 953 2441 691 2322 L 691 4666 z" transform="scale(0.015625)"/>       </defs>       <use xlink:href="#DejaVuSans-32"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-35" x="95.410156"/>      </g>     </g>    </g>    <g id="xtick_3">     <g id="line2d_3">      <g>       <use xlink:href="#m5dc0263618" x="154.996364" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_3">      <!-- 5.0 -->      <g transform="translate(147.044801 322.182437) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-35"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-30" x="95.410156"/>      </g>     </g>    </g>    <g id="xtick_4">     <g id="line2d_4">      <g>       <use xlink:href="#m5dc0263618" x="195.578182" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_4">      <!-- 7.5 -->      <g transform="translate(187.626619 322.182437) scale(0.1 -0.1)">       <defs>        <path id="DejaVuSans-37" d="M 525 4666 L 3525 4666 L 3525 4397 L 1831 0 L 1172 0 L 2766 4134 L 525 4134 L 525 4666 z" transform="scale(0.015625)"/>       </defs>       <use xlink:href="#DejaVuSans-37"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-35" x="95.410156"/>      </g>     </g>    </g>    <g id="xtick_5">     <g id="line2d_5">      <g>       <use xlink:href="#m5dc0263618" x="236.16" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_5">      <!-- 10.0 -->      <g transform="translate(225.027188 322.182437) scale(0.1 -0.1)">       <defs>        <path id="DejaVuSans-31" d="M 794 531 L 1825 531 L 1825 4091 L 703 3866 L 703 4441 L 1819 4666 L 2450 4666 L 2450 531 L 3481 531 L 3481 0 L 794 0 L 794 531 z" transform="scale(0.015625)"/>       </defs>       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-30" x="63.623047"/>       <use xlink:href="#DejaVuSans-2e" x="127.246094"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="xtick_6">     <g id="line2d_6">      <g>       <use xlink:href="#m5dc0263618" x="276.741818" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_6">      <!-- 12.5 -->      <g transform="translate(265.609006 322.182437) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-32" x="63.623047"/>       <use xlink:href="#DejaVuSans-2e" x="127.246094"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="xtick_7">     <g id="line2d_7">      <g>       <use xlink:href="#m5dc0263618" x="317.323636" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_7">      <!-- 15.0 -->      <g transform="translate(306.190824 322.182437) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-35" x="63.623047"/>       <use xlink:href="#DejaVuSans-2e" x="127.246094"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="xtick_8">     <g id="line2d_8">      <g>       <use xlink:href="#m5dc0263618" x="357.905455" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_8">      <!-- 17.5 -->      <g transform="translate(346.772642 322.182437) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-37" x="63.623047"/>       <use xlink:href="#DejaVuSans-2e" x="127.246094"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="xtick_9">     <g id="line2d_9">      <g>       <use xlink:href="#m5dc0263618" x="398.487273" y="307.584" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_9">      <!-- 20.0 -->      <g transform="translate(387.35446 322.182437) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-32"/>       <use xlink:href="#DejaVuSans-30" x="63.623047"/>       <use xlink:href="#DejaVuSans-2e" x="127.246094"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>   </g>   <g id="matplotlib.axis_2">    <g id="ytick_1">     <g id="line2d_10">      <defs>       <path id="m0b942d48aa" d="M 0 0 L -3.5 0 " style="stroke: #000000; stroke-width: 0.8"/>      </defs>      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="295.488" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_10">      <!-- 0.00 -->      <g transform="translate(28.334375 299.287219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-30"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-30" x="95.410156"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_2">     <g id="line2d_11">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="265.248" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_11">      <!-- 0.25 -->      <g transform="translate(28.334375 269.047219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-30"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-32" x="95.410156"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_3">     <g id="line2d_12">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="235.008" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_12">      <!-- 0.50 -->      <g transform="translate(28.334375 238.807219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-30"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-35" x="95.410156"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_4">     <g id="line2d_13">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="204.768" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_13">      <!-- 0.75 -->      <g transform="translate(28.334375 208.567219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-30"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-37" x="95.410156"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_5">     <g id="line2d_14">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="174.528" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_14">      <!-- 1.00 -->      <g transform="translate(28.334375 178.327219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-30" x="95.410156"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_6">     <g id="line2d_15">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="144.288" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_15">      <!-- 1.25 -->      <g transform="translate(28.334375 148.087219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-32" x="95.410156"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_7">     <g id="line2d_16">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="114.048" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_16">      <!-- 1.50 -->      <g transform="translate(28.334375 117.847219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-35" x="95.410156"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_8">     <g id="line2d_17">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="83.808" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_17">      <!-- 1.75 -->      <g transform="translate(28.334375 87.607219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-31"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-37" x="95.410156"/>       <use xlink:href="#DejaVuSans-35" x="159.033203"/>      </g>     </g>    </g>    <g id="ytick_9">     <g id="line2d_18">      <g>       <use xlink:href="#m0b942d48aa" x="57.6" y="53.568" style="stroke: #000000; stroke-width: 0.8"/>      </g>     </g>     <g id="text_18">      <!-- 2.00 -->      <g transform="translate(28.334375 57.367219) scale(0.1 -0.1)">       <use xlink:href="#DejaVuSans-32"/>       <use xlink:href="#DejaVuSans-2e" x="63.623047"/>       <use xlink:href="#DejaVuSans-30" x="95.410156"/>       <use xlink:href="#DejaVuSans-30" x="159.033203"/>      </g>     </g>    </g>   </g>   <g id="line2d_19">    <path d="M 73.832727 295.488 L 90.065455 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_20">    <path d="M 90.065455 295.488 L 90.065455 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_21">    <path d="M 90.065455 53.568 L 106.298182 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_22">    <path d="M 106.298182 295.488 L 122.530909 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_23">    <path d="M 122.530909 295.488 L 122.530909 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_24">    <path d="M 122.530909 53.568 L 138.763636 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_25">    <path d="M 138.763636 295.488 L 154.996364 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_26">    <path d="M 154.996364 295.488 L 154.996364 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_27">    <path d="M 154.996364 53.568 L 171.229091 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_28">    <path d="M 171.229091 53.568 L 187.461818 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_29">    <path d="M 187.461818 53.568 L 187.461818 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_30">    <path d="M 187.461818 295.488 L 203.694545 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_31">    <path d="M 203.694545 53.568 L 219.927273 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_32">    <path d="M 219.927273 53.568 L 219.927273 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_33">    <path d="M 219.927273 295.488 L 236.16 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_34">    <path d="M 236.16 53.568 L 252.392727 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_35">    <path d="M 252.392727 53.568 L 252.392727 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_36">    <path d="M 252.392727 295.488 L 268.625455 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_37">    <path d="M 268.625455 295.488 L 284.858182 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_38">    <path d="M 284.858182 295.488 L 284.858182 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_39">    <path d="M 284.858182 53.568 L 301.090909 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_40">    <path d="M 301.090909 53.568 L 317.323636 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_41">    <path d="M 317.323636 53.568 L 317.323636 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_42">    <path d="M 317.323636 295.488 L 333.556364 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_43">    <path d="M 333.556364 295.488 L 349.789091 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_44">    <path d="M 349.789091 295.488 L 349.789091 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_45">    <path d="M 349.789091 53.568 L 366.021818 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_46">    <path d="M 366.021818 53.568 L 382.254545 53.568 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_47">    <path d="M 382.254545 53.568 L 382.254545 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="line2d_48">    <path d="M 382.254545 295.488 L 398.487273 295.488 " clip-path="url(#pbd5a2c1914)" style="fill: none; stroke: #ff0000; stroke-width: 1.5; stroke-linecap: square"/>   </g>   <g id="patch_3">    <path d="M 57.6 307.584 L 57.6 41.472 " style="fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square"/>   </g>   <g id="patch_4">    <path d="M 414.72 307.584 L 414.72 41.472 " style="fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square"/>   </g>   <g id="patch_5">    <path d="M 57.6 307.584 L 414.72 307.584 " style="fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square"/>   </g>   <g id="patch_6">    <path d="M 57.6 41.472 L 414.72 41.472 " style="fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square"/>   </g>  </g> </g> <defs>  <clipPath id="pbd5a2c1914">   <rect x="57.6" y="41.472" width="357.12" height="266.112"/>  </clipPath> </defs></svg></div><p>我自己还写了一个 python 小程序, 用来画这种编码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>data = <span class="hljs-string">&quot;0001110101&quot;</span><br>basicPoint = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>points = [[]]<br>dirt0 = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)]<br>dirt1 = [(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)]<br><br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-keyword">if</span> bit == <span class="hljs-string">&#x27;0&#x27;</span>:<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dirt0:<br>            points.append([basicPoint[<span class="hljs-number">0</span>] + d[<span class="hljs-number">0</span>], basicPoint[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>]])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dirt1:<br>            points.append([basicPoint[<span class="hljs-number">0</span>] + d[<span class="hljs-number">0</span>], basicPoint[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>]])<br>    basicPoint[<span class="hljs-number">0</span>] = basicPoint[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(points) - <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">4</span> != <span class="hljs-number">0</span>:<br>        plt.plot([points[i][<span class="hljs-number">0</span>], points[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]], [points[i][<span class="hljs-number">1</span>], points[i + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]], color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;.svg&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;svg&#x27;</span>, dpi=<span class="hljs-number">150</span>)  <span class="hljs-comment"># 输出</span><br>plt.show()<br></code></pre></td></tr></table></figure><p>其实就是将每个点描出来, 并填充上线段.</p><br><font face = "Times New Roman" size = 4><b>5.</b> A 1-km-long, 10-Mbps CSMA/CD LAN (not 802.3) has a propagation speed of 200 m/μsec. Repeaters are not allowed in this system. Data frames are 256 bits long, including 32 bits of header, checksum, and other overhead. The first bit slot after a successful transmission is reserved for the receiver to capture the channel in order to send a 32-bit acknowledgement frame. What is the effective data rate, excluding overhead, assuming that there are no collisions?</font><p>单程传播时延 $ \tau =1000 / 200 = 5 \mu s $. 在没有冲突的情况下, 一次成功传输包含下列过程:</p><ol><li>发送站发出一帧, 发送时间为 $ t_1 = 256 / 10M = 25.6 \mu s $</li><li>该数据帧经过 $ t_2 = \tau = 5 \mu s$ 后到达接收站</li><li>接收站用 $ t_3 = 10 \mu s $ 捕获信道, 发送 ACK 帧, 发送时间 $ t_4 = 32 / 10M = 3.2 \mu s $, ACK 经过 $ t_5 = \tau = 5<br />\mu s $ 后到达发送站.</li></ol><p>因此传输总时间 $ t_总 = 25.6 + 5 + 10 + 3.2 + 5 = 48.8 \mu s $, 有效数据率 $ \eta = (256-32) / 48.8 = 4.59 Mbps $</p><br><font face = "Times New Roman" size = 4><b>6.</b> Consider building a CSMA/CD network running at 1 Gbps over a 1-km cable with no repeaters. The signal speed in the cable is 200,000 km/sec. What is the minimum frame size?</font><p>对于 1km 电缆,单程传播时延 $ \tau = 1 / 200000 = 5 \mu s $, 往返时延为 $ 2 \tau = 10 \mu s $,<br />即最短帧的发送时间不能小于 $ 10 \mu s $<br />对于 1Gbps 的发送速率, $ 10 \mu s $ 可以发送的比特数为 $ 10 \times 10^{-6} \times 10^9 = 10^4 bits $<br />因此最短帧长是 $ 10000 \; bits $, 即 $ 1250 \; bytes $.</p><br><font face = "Times New Roman" size = 4><b>7.</b> An IP packet to be transmitted by Ethernet is 60 bytes long, including all its headers. If LLC is not in use, is padding needed in the Ethernet frame, and if so, how many bytes?</font><p>以太网的最短以太帧有 64 bytes, 其中帧头的目的地址, 源地址, 类型, 长度字段和帧尾的校验和字段一共是 18 bytes, 数据部分最少为<br />46 bytes, 如果不足 46 bytes 则需要填充.<br />题目中的 IP 包为 60 bytes, 超过了46 bytes. 因此不需要填充.</p><p>以太网帧构成:</p><table><thead><tr><th style="text-align:center">Preamble</th><th style="text-align:center">Destination Address</th><th style="text-align:center">Source Address</th><th style="text-align:center">Type</th><th style="text-align:center">Data</th><th style="text-align:center">Pad</th><th style="text-align:center">Checksum</th></tr></thead><tbody><tr><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">2</td><td style="text-align:center">0~1500</td><td style="text-align:center">0~46</td><td style="text-align:center">4</td></tr></tbody></table><p>感觉答案没有说 “Preamble” 也不知道为什么.</p><br><font face = "Times New Roman" size = 4><b>8.</b> Ethernet frames must be at least 64 bytes long to ensure that the transmitter is still going in the event of a collision at the far end of the cable. Fast Ethernet has the same 64-byte minimum frame size but can get the bits out ten times faster. How is it possible to maintain the same minimum frame size?</font><p>标准答案:<br />快速以太网的速率是传统以太网的 10 倍, 但保留了传统以太网的最短帧长的规定, 这是通过限制电缆最大长度来实现的,<br />快速以太网的最大电缆长度是传统以太网的 1/10.</p><p>我的答案:<br />方法一: 载波扩充, 让硬件在普通的帧后面增加一些填充位, 将帧的长度扩充到 512 字节, 并由接收方硬件去掉后提交给上层<br />方法二: 帧突发, 允许发送方将多个待发送帧级连在一起, 一次传输出去.</p><p>我的解题思路应该是偏离的题意…</p><br><font face = "Times New Roman" size = 4><b>9.</b> How many frames per second can gigabit Ethernet handle? Think carefully and take into account all the relevant cases. Hint: the fact that it is gigabit Ethernet matters.</font><p>当使用 “帧突发” 时, 每帧的大小为 64 bytes, 可处理的帧个数为 1953125;<br />当使用 “载波扩充” 时, 每帧的大小为 512 bytes, 可处理的帧个数为 244140;<br />最大帧发送时, 每帧大小为 1518 bytes, 可处理的帧个数为 82345.</p><br><font face = "Times New Roman" size = 4><b>10.</b> In following figure, four stations, A, B, C, and D, are shown. Which of the last two stations do you think is closest to A and why?</font><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">     +-----+                 +-----------------------------------------+<br>A:   | RTS |                 |                   Data                  |<br>  ---+-----+-----------------+-----------------------------------------+---------------------------<br>           .<br>           .   +-----+                                                         +-----+<br>B:         .   | CTS |                                                         | ACK |<br>  ---------.---+-----+---------------------------------------------------------+-----+-------------<br>           .         .                                                               .<br>           +---------.---------------------------------------------------------------+<br>C:         |         .                         NAV                                   |<br>  ---------+---------.---------------------------------------------------------------+-------------<br>                     .                                                               .<br>                     +---------------------------------------------------------------+<br>D:                   |                            NAV                                | <br>  -----------------------------------------------------------------------------------+-------------<br><br>                                            Time   ------&gt;<br></code></pre></td></tr></table></figure><p>站点 C 离 A 更近<br />因为 C 能收到 A 的 RTS 帧, 并且通过 NAV (网络分配向量) 做出相应. D 的 NAV 不包括 RTS 的时间, 说明 D 没有收到 RTS 帧, 即 D 位于 A 的无线信号覆盖范围之外.</p><p><strong>注意: 最后一句的中文翻译应为: 你认为后两个站点中哪一个最接近 A 并解释原因. 而不是哪两个站点最接近 A</strong></p><font face = "Times New Roman" size = 4><b>11.</b> Give an example to show that the RTS/CTS in the 802.11 protocol is a little different than in the MACA protocol.</font><p>由于 NAV, 802.11 的 RTS/CTS 不能解决暴露站的问题.<br />例如, 在教材图 4-11 的情景 (B), MACA 协议将允许两对主机同时通信, 即 B 发送给到 A 和 C 发送给 D; 但 802.11 中, C 收到 B 发送的 RTS, 根据 NAV, 它将在 B 的数据帧传输的整个过程中 (包括传输 ACK) 退避, 而不能发送给 D.</p><br><font face = "Times New Roman" size = 4><b>12.</b> A wireless LAN with one AP has 10 client stations. Four stations have data rates of 6 Mbps, four stations have data rates of 18 Mbps, and the last two stations have data rates of 54 Mbps. What is the data rate experienced by each station when all ten stations are sending data together, and <br>(a) TXOP is not used? <br>(b) TXOP is used? <br></font><ol><li><p>不使用 TXOP 时, 每个站点在占用信道时只发送一个数据帧, 该帧的发送时间可归一化为 1 / 数据率, 因此每个站点得到相同的平均数据率, 即 $ \frac{1}{\frac{4}{6} + \frac{4}{18} + \frac{2}{54}} = \frac{54}{50} = 1.08 Mbps $</p></li><li><p>使用 TXOP 时, 每个站点按照平均分配时间来占用信道, 即每个站点占用 1/10 信道, 所以每个设备的传输速率都变为原来的 1/10.</p></li></ol><br><font face = "Times New Roman" size = 4><b>13.</b> Consider the extended LAN connected using bridges B1 and B2 in Fig. 4-41(b). Suppose the hash tables in the two bridges are empty. List all ports on which a packet will be forwarded for the following sequence of data transmissions: <br>(a) A sends a packet to C. <br>(b) E sends a packet to F. <br>(c) F sends a packet to E. <br>(d) G sends a packet to E. <br>(e) D sends a packet to A. <br>(f) B sends a packet to F. <br></font><p><em>使用 mermaid 绘制的图, 结果不尽人意, 将就着看一下吧</em></p><pre><code class=" mermaid">graph TD   B1&#123;&#123;B1 Bridge&#125;&#125;   B2&#123;&#123;B2 Bridge&#125;&#125;   H1[H1 Hub]    B2-- 4 ---B1        subgraph 1        direction LR        A-- 1 ---B1        B-- 2 ---B1        C-- 3 ---B1    end    subgraph 2        direction RL            D-- 1 ---B2            H1-- 2 ---B2            E---H1            F---H1            G-- 3 ---B2    end</code></pre><ol><li>B1 将这个数据帧转发到端口 2, 3 和 4, B2 将转发到端口 1, 2 和 3.</li><li>B2 将这个数据帧转发到端口 1, 3 和 4, B1 将转发到端口 1, 2 和 3.</li><li>B2 不转发该帧, 因此 B1 不会收到这个帧.</li><li>B2 将这个数据帧转发到端口 2, B1 不会收到这个帧.</li><li>B2 将这个数据帧转发到端口 4, B1 将转发到端口 1.</li><li>B1 将这个数据帧转发到端口 1, 3 和 4, B2 将转发到端口 2.</li></ol><p>此题考查对于网桥工作原理 (如何转发帧, 如何生成转发表) 的理解.<br />一般来说, 网桥收到一帧后, 根据帧中的目的地址检查转发表, 如果查到的输出端口与输入端口一致, 则不转发; 如果输出端口与输入端口不一致, 则转发到相应端口; 如果查不到, 则洪泛转发到除输入端口之外的所有端口.<br />转发表采用 “逆向学习” 的方法生成, 即检查收到的帧中的源地址, 将源地址和输入端口加入转发表.<br />更加具体的内容, 可以参考课本.</p><br><font face = "Times New Roman" size = 4><b>14.</b> Store-and-forward switches have an advantage over cut-through switches with respect to damaged frames. Explain what it is.</font><p>存储 - 转发型交换机首先要接收完整的数据帧, 进行校验, 然后再转发. 如果校验出错, 就立即丢弃这个数据帧而不进行转发.<br />对于直通型方式, 交换机在收到帧头的目的地址之后, 即开始转发该帧, 边转发边校验, 因而即使发现了校验错误, 也为时晚矣, 损坏帧将无法丢弃, 依然在网络中传输.</p><pre class="note note-info"><strong>2023-04-25</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>AnswersShare</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ComputerNetworks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLU数据结构课设 - 自动纠错</title>
    <link href="/2023/04/25/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E8%87%AA%E5%8A%A8%E7%BA%A0%E9%94%99/"/>
    <url>/2023/04/25/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E8%87%AA%E5%8A%A8%E7%BA%A0%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="自动纠错"><a class="markdownIt-Anchor" href="#自动纠错"></a> 自动纠错</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>百度, 谷歌等搜索引擎, 以及 Word 等文字处理软件往往包含这样一个功能: 当用户输入了错误的单词时, 系统能够自动识别并向用户建议正确的单词. 这个功能是如何实现的呢? 一种典型的实现方法是: 系统后台维护一个 “字典”, 当用户输入的单词不在字典中时, 则认为是错误的单词, 并在字典中查找与用户所输单词相似度高且用户使用频率高的单词, 向用户建议.</p><p><em>原题目处有个图片, 此处为节约资源, 不予展示</em></p><p>采用 “距离” 衡量两个单词的相似度. 两个字符串的距离定义为一个字符串转化成另一个字符串, 所需的最少 “操作” 次数. 有三种操作: 增加一个字符, 删除一个字符, 替换一个字符. 显然, 距离越大, 说明两个字符串的相似程度越小; 距离越小, 说明两个字符串的相似程度越大. 对于两个完全相同的字符串, 距离为 0.</p><p>例如将 <code>FOOD</code> 转换成 <code>MONEY</code>, 最少通过如下 4 步操作: 第 1 位 <code>F</code> 替换为 <code>M</code>, 第 3 位 <code>O</code> 替换为<code>N</code>, 在第 4 位插入 <code>E</code>, 第<code>5</code>位 <code>D</code> 替换为 <code>Y</code>. 故 <code>FOOD</code> 和 <code>MONDY</code> 的距离为 4.</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center"> </td><td style="text-align:center">D</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">O</td><td style="text-align:center">N</td><td style="text-align:center">E</td><td style="text-align:center">Y</td></tr></tbody></table><p>这样, 当用户输入错误单词后, 则系统可以在字典中查找与该错误单词距离不超过 n (n 一般不超过 3) 的单词建议给用户. 字典通常包含几万个单词, 如果将用户输入单词与字典里的单词逐一比对, 显然非常耗时. 一种高效的处理方法是: 结合各单词间的距离, 将字典组织成一棵多叉树. 在该树中, 每个结点表示一个单词, 对于每个结点 $ p $, 其第 $ i $ 棵子树包含与 $ p $ 的距离为 $ i $ 的所有单词对应的结点.</p><p>树的创建过程如下: 取字典中任意单词作为根结点, 比如第一个单词. 然后将剩余单词逐个插入到树中, 插入一个新单词 $ w $ 时, 首先计算该单词与根结点的距离 $ d $. 若根结点的第 $ d $ 个子树为空, 则将单词 $ w $ 对应的结点作为根结点的第 $ d $ 个子结点. 若根结点的第 $ d $ 个子树非空, 即根结点已有第 $ d $ 个子结点 $ p_d $. 则按上述规则将单词 $ w $ 递归插入以 $ p_d $ 为根的子树, 即计算 $ w $ 与 $ p_d $ 的距离…</p><p>例如字典为 <code>&#123;help, hell, hello, shell, helper, sloop, helps, troop&#125;</code>, 将 <code>help</code> 作为根结点, 然后将 <code>hell</code> 插入, <code>hell</code> 与 <code>help</code> 的距离为 1, 故 <code>hell</code> 作为 <code>help</code> 的第一个子结点. <code>hello</code> 与<code>help</code> 的距离为 2, 故 <code>hello</code> 作为 <code>help</code> 的第 2 个子结点. 如下图(a)所示.</p><pre><code class=" mermaid">graph TDsubgraph a    A(help)    B(hell)    C(hello)    A --1--&gt; B    A --2--&gt; Cendsubgraph b    Ab(help)    Bb(hell)    Cb(hello)    Db(shell)    Ab --1--&gt; Bb    Ab --2--&gt; Cb    Cb --2--&gt; Dbendsubgraph c    Ac(help)    Bc1(hell)    Bc2(hello)    Bc3(sloop)        Cc1(helps)    Cc2(shell)    Cc3(helper)    Cc4(troop)    Ac --1--&gt; Bc1    Ac --2--&gt; Bc2    Ac --4--&gt; Bc3    Bc1 --2--&gt; Cc1    Bc2 --2--&gt; Cc2    Bc2 --3--&gt; Cc3    Bc3 --2--&gt; Cc4end</code></pre><p>然后插入 <code>shell</code>, <code>shell</code>与 <code>help</code> 的距离为 2, 故应在 <code>help</code> 的第 2 个子树里, 但 <code>help</code> 已经有第 2 个子结点<code>hello</code> 了, 此时将 <code>shell</code> 递归插入以 <code>hello</code> 为根结点的子树: 计算 <code>shell</code> 与 <code>hello</code> 的距离为 2, 将 <code>shell</code> 作为 <code>hello</code> 的第 2 个子结点, 如上图 (b) 所示.<br />插入 <code>helper</code> 时, <code>helper</code> 与 <code>help</code> 的距离为 2, 将 <code>helper</code> 递归插入以 <code>hello</code> 为根结点的子树; 计算 <code>helper</code> 与 <code>hello</code> 的距离为 3, 将 <code>helper</code> 作为 <code>hello</code> 的第 3 个子结点. 以此类推, 最终上述字典对应的树结构如上图 © 所示. 该树结构保证与任意结点距离为 d 的单词都在该结点的第 d 棵子树里.</p><p>假定我们需要向用户返回与错误单词距离不超过 $ n $ 的单词, 当用户输入一个单词 $ w $ 时, 在树中查询 $ w $, 计算 $ w $ 与根结点 $ T $ 的距离 $ d $, 接下来我们不必考察 $ T $ 的所有子树中是否包含与 $ w $ 距离不超过 $ n $ 的结点/单词, 而只需要递归考察根结点 $ T $ 的第 $ d - n $ 到第 $ d + n $ 棵子树即可. 例如: $ n = 1, d = 5 $, 我们只需要递归考察根 T 的第 $ 4 $, 第 $ 5 $, 第 $ 6 $ 棵子树是否包含与 $ w $ 距离不超过 $ 1 $ 的结点/单词. 其他子树无需考察, 为什么呢? 举个例子, 我们考虑根 $ T $ 的第 $ 3 $ 棵子树的任意结点 $ P $. $ w $ 与 $ T $ 的距离为 $ d = 5 $, 即 $ w $ 最少经过 $ 5 $ 步操作才能转换为 $ T $, $ T $ 与 $ P $ 的距离为 $ 3 $, $ T $ 经过最少 $ 3 $ 步操作才能变为 $ P $, 这意味着 $ w $ 至少需要 $ 2 $ 步操作才能变为 $ P $. 不可能通过 $ 1 $ 步操作变为 $ P $. 故第 $ 3 $ 棵子树的所有结点都不满足条件.</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo><mover><mo><mo>⟶</mo></mo><mn>5</mn></mover></mo><mi>T</mi><mo><mover><mo><mo>⟶</mo></mo><mn>3</mn></mover></mo><mi>P</mi></mrow><annotation encoding="application/x-tex">w \stackrel{5}{\longrightarrow} T \stackrel{3}{\longrightarrow} P </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.273108em;vertical-align:-0.011em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.262108em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.273108em;vertical-align:-0.011em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.262108em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></span></p><p>由于 $ n $ 通常很小, 因此该方法在查询时往往可以排除很多子树, 进而节省时间. 当考察一个结点时, 计算 $ w $ 与该结点的距离 $ d $; 若 $ d = 0 $, 意味着用户输入的单词 $ w $ 在字典中, 是正确的单词; 若 $ d &gt; n $ 则该结点不是候选单词, 继续递归考察该结点第 $ d - n $到 $ d + n $ 的子树. 若 $ d \leq n $ 则该结点就是候选单词之一, 此时可有两种策略, 一是将该单词直接返回给用户, 二是继续向下考察子树, 找出所有候选单词并选择用户历史使用频率最高的单词返回给用户.</p><p>在本题中, 请你编写程序实现上述功能.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>输入第 $ 1 $ 行为 $ 3 $ 个正整数 $ n, m, d $. $ n $ 为字典中单词个数. $ m $为用户查询数, 即用户输入的单词个数. 对于用户输入的每个错误单词, 程序需要返回与错误单词距离不超过 $ d $ 的单词. 接下来 $ n $ 行, 表示字典信息, 字典包含$ n $ 个单词及其历史使用频率. 每行为 $ 1 $ 个整数和一个由字母组成的字符串, 整数表示单词的历史使用频率, 字符串表示单词. 接下来 $ m $ 行, 表示用户的查询, 每行一个字母组成的字符串, 表示用户输入的单词. ($ n \leq 10000, m \leq 1000, d \leq 2 $, 每个单词长度不超过 $ 15 $, 单词历史使用频率小于 $ 2^{31} $)</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>对于用户输入的每个单词, 若该单词正确 (其在字典中), 则直接输出该单词; 若该单词错误 (不在字典中), 则输出字典中与该单词距离不超过 $ d $ 的所有单词中历史使用频率最高的单词, 若多个满足条件的单词使用频率相等, 则返回字典序最靠前的单词;若没有满足条件的单词, 则输出 <code>No similar word in dictionary</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">9 8 2<br>327769900my<br>322417800are<br>302713400me<br>283256900one<br>282026500their<br>280248100so<br>264141700an<br>263713600said<br>250991700them<br>me<br>wne<br>therr<br>xxxxx<br>they<br>ax<br>sy<br>sds<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">me<br>are<br>their<br>No similar word in dictionary<br>their<br>my<br>my<br>so<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 2023/04/25</span><br><span class="hljs-comment">// 自动纠错</span><br><span class="hljs-comment">// 应 Mar-Bro 要求写的</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> std::cin;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::max;<br><span class="hljs-keyword">using</span> std::min;<br><span class="hljs-keyword">using</span> std::priority_queue;<br><span class="hljs-keyword">using</span> std::set;<br><span class="hljs-keyword">using</span> std::sort;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::vector;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_DISTANCE = <span class="hljs-number">16</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span> &#123;<br>    string word;<br>    <span class="hljs-type">int</span> frequency&#123;&#125;;<br><br>    <span class="hljs-built_in">Data</span>() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-built_in">Data</span>(<span class="hljs-type">const</span> string&amp; word, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; frequency) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;word = word;<br>        <span class="hljs-keyword">this</span>-&gt;frequency = frequency;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Data&amp; other) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">comp</span>(other, *<span class="hljs-keyword">this</span>); &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(<span class="hljs-type">const</span> Data&amp; num1, <span class="hljs-type">const</span> Data&amp; num2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (num1.frequency != num2.frequency)<br>            <span class="hljs-keyword">return</span> num1.frequency &gt; num2.frequency;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> num1.word &lt; num2.word;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; a, <span class="hljs-type">const</span> string&amp; b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> aLen = a.<span class="hljs-built_in">length</span>(), bLen = b.<span class="hljs-built_in">length</span>();<br><br>    <span class="hljs-keyword">if</span> (aLen * bLen == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> aLen + bLen;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">D</span>(aLen + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(bLen + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; aLen + <span class="hljs-number">1</span>; i++)<br>        D[i][<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; bLen + <span class="hljs-number">1</span>; j++)<br>        D[<span class="hljs-number">0</span>][j] = j;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; aLen + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; bLen + <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-type">int</span> left = D[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> down = D[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> left_down = D[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] != b[j - <span class="hljs-number">1</span>]) left_down += <span class="hljs-number">1</span>;<br>            D[i][j] = <span class="hljs-built_in">min</span>(left, <span class="hljs-built_in">min</span>(down, left_down));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> D[aLen][bLen];<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    Data data;<br>    vector&lt;Node*&gt; child = std::<span class="hljs-built_in">move</span>(<span class="hljs-built_in">vector</span>&lt;Node*&gt;(MAX_DISTANCE));<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-type">const</span> Data&amp; data)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;data = data; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Node* root = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> d;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Tree</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;d = d; &#125;;<br><br>    ~<span class="hljs-built_in">Tree</span>() &#123; <span class="hljs-built_in">destroy</span>(root); &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">const</span> Data&amp; data)</span> </span>&#123; <span class="hljs-built_in">insert</span>(root, data); &#125;<br><br>    <span class="hljs-function">vector&lt;Data&gt; <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;Data&gt; res;<br>        <span class="hljs-built_in">preOrder</span>(root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; data)</span> </span>&#123;<br>        priority_queue&lt;Data&gt; ans;<br>        string res = <span class="hljs-string">&quot;No similar word in dictionary&quot;</span>;<br>        <span class="hljs-built_in">search</span>(root, data, ans);<br>        <span class="hljs-keyword">if</span> (!ans.<span class="hljs-built_in">empty</span>())<br>            res = ans.<span class="hljs-built_in">top</span>().word;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Node*&amp; root, <span class="hljs-type">const</span> Data&amp; data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(data);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> dist = <span class="hljs-built_in">distance</span>(root-&gt;data.word, data.word);<br>        <span class="hljs-keyword">if</span> (root-&gt;child[dist] == <span class="hljs-literal">nullptr</span>)<br>            root-&gt;child[dist] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(data);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">insert</span>(root-&gt;child[dist], data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; i : root-&gt;child)<br>                <span class="hljs-keyword">if</span> (i != <span class="hljs-literal">nullptr</span>)<br>                    <span class="hljs-built_in">destroy</span>(i);<br>            <span class="hljs-keyword">delete</span> root;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node* root, vector&lt;Data&gt;&amp; res)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>            res.<span class="hljs-built_in">push_back</span>(root-&gt;data);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; i : root-&gt;child)<br>                <span class="hljs-keyword">if</span> (i != <span class="hljs-literal">nullptr</span>)<br>                    <span class="hljs-built_in">preOrder</span>(i, res);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> Node* root, <span class="hljs-type">const</span> string&amp; data, priority_queue&lt;Data&gt;&amp; ans)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 需要查找的字符串与根节点的距离</span><br>        <span class="hljs-keyword">auto</span> distToRoot = <span class="hljs-built_in">distance</span>(root-&gt;data.word, data);<br><br>        <span class="hljs-keyword">if</span> (distToRoot &lt;= d)<br>            ans.<span class="hljs-built_in">push</span>(root-&gt;data);<br><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, distToRoot - d); i &lt;= distToRoot + d &amp;&amp; i &lt; MAX_DISTANCE; i++)<br>                <span class="hljs-keyword">if</span> (root-&gt;child[i] != <span class="hljs-literal">nullptr</span> &amp;&amp; (ans.<span class="hljs-built_in">empty</span>() || root-&gt;child[i]-&gt;data.frequency &gt;= ans.<span class="hljs-built_in">top</span>().frequency))<br>                    <span class="hljs-built_in">search</span>(root-&gt;child[i], data, ans);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, d;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;<br>    set&lt;string&gt; tab;<br>    <span class="hljs-keyword">auto</span> root = <span class="hljs-built_in">Tree</span>(d);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> tempInt;<br>        string tempStr;<br>        cin &gt;&gt; tempInt &gt;&gt; tempStr;<br>        tab.<span class="hljs-built_in">insert</span>(tempStr);<br>        root.<span class="hljs-built_in">insert</span>(&#123;tempStr, tempInt&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        string testStr;<br>        cin &gt;&gt; testStr;<br><br>        <span class="hljs-keyword">if</span> (tab.<span class="hljs-built_in">find</span>(testStr) != tab.<span class="hljs-built_in">end</span>())<br>            cout &lt;&lt; testStr &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; root.<span class="hljs-built_in">search</span>(testStr) &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>本答案也是应 <strong>Mao-Bro</strong> 写的答案题解.<br />一开始, 我根据题目描述写了一版代码, 结果第二个测试点超时, 百思不得其解, 于是放弃这个题目, 转头去做其他事情了.<br />后来, 在和 <em>Mao-Bro</em> 交流中得知, 第二个点, 如果只建树的话, 只要 $ 33 ms $, 问题一定出在搜索上.<br />于是, 我突然想到是否需要剪枝呢? 于是, 我将节点存储的数据由 <code>string</code> 改为了 <code>string int</code>.<br />同时, 在建树之前, 先对数据进行排序 (先按照使用频率降序, 再按照字符串升序). 而看测试样例发现, 测试样例的输入也是按照这种规则的, 所以把这段代码去掉.<br />这样建立的树, 树子节点的使用频率一定是小于根节点的. 然而, 很容易想到的一个 bug: 当用户输入一个正确的冷门单词时, 会输出一个与这个正确的单词距离最小的最热门的单词.<br />为了解决这个 bug, 我们先用 <code>set</code> 创建词典, 先在词典中搜索一下, 再在树中进行搜索.<br />此后, 在搜索中使用了优先队列, 并且当子节点的单词的使用频率小于队列头节点存储的使用频率时, 直接放弃对此子树的搜索.</p><p>还有关于距离的计算, 这个是听从 <em>Mao-Bro</em> 的建议使用了力扣上的同类型题目的动态规划的算法, 代替了之前自己查到的递归的写法.</p><pre class="note note-info"><strong>2023-04-25</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>PAT题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 二进制文件读取</title>
    <link href="/2023/04/24/BUPT_JAVA/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20/"/>
    <url>/2023/04/24/BUPT_JAVA/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制文件读取"><a class="markdownIt-Anchor" href="#二进制文件读取"></a> 二进制文件读取</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>已知一个二进制文件, 文件名为 <code>dict.dic</code>. 它是由下边的代码生成.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a ;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ;<br><span class="hljs-type">double</span> c , f ;<br>String d ;<br><span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>));<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">cin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">5</span> ; i ++ ) &#123;<br>    a = cin.nextInt() ;<br>    f = Math.random() ;<br>    <span class="hljs-keyword">if</span> ( f &gt; <span class="hljs-number">0.5</span> ) b = <span class="hljs-literal">true</span> ;<br>    <span class="hljs-keyword">else</span> b = <span class="hljs-literal">false</span> ;<br>    c = cin.nextDouble() ;<br>    d = cin.next() ;<br>    out.writeInt(a);<br>    out.writeBoolean(b);<br>    out.writeDouble(c);<br>    out.writeUTF(d);<br>&#125;<br><br>out.close(); <span class="hljs-comment">// Remember this!</span><br>cin.close();<br></code></pre></td></tr></table></figure><p>你的任务是写一段程序, 将这些内容读出来.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为一个整数, 只可能是 1, 2, 3, 4, 5 之一.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>将 dict.dic 中的相关内容输出到屏幕上, 如果输入是 1, 则输出那段代码第一次循环写入的内容, 如果输入是2, 则输出那段代码第二次循环写入的内容, 依此类推.<br />形式如样例. double 类型的不是保留一位小数, 直接输出就可以了.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">100<br>false<br>72.5<br>helloworld<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/24</span><br><span class="hljs-comment">// 二进制文件读取</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>)));<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            a = file.readInt();<br>            b = file.readBoolean();<br>            c = file.readDouble();<br>            d = file.readUTF();<br>        &#125;<br>        System.out.print(a + <span class="hljs-string">&quot;\n&quot;</span> + b + <span class="hljs-string">&quot;\n&quot;</span> + c + <span class="hljs-string">&quot;\n&quot;</span> + d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-24</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 压缩文件读取</title>
    <link href="/2023/04/24/BUPT_JAVA/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20/"/>
    <url>/2023/04/24/BUPT_JAVA/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20/</url>
    
    <content type="html"><![CDATA[<h1 id="压缩文件读取"><a class="markdownIt-Anchor" href="#压缩文件读取"></a> 压缩文件读取</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>现有一个 zip 格式的压缩文件, 文件名为 <code>dict.dic</code>. 它里边压缩了若干个文件 (少于20个), 没有目录.<br />请写一段程序将这些文件的文件名读出来.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为一个整数 $ n (0 &lt; n &lt; 20) $, 代表要输出压缩文件中第 n 个条目的文件名, 比如压缩文件共压缩了 3 个文件, 依次为 a.txt, b.txt, c.txt. 那么当输入为 1 时输出 a.txt, 输入为 2 时输出 b.txt, 输入为 3 时输出 c.txt.<br />测试用例保证输入合法.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>只有一行字符串, 为对应的文件名</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">a.txt<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/24</span><br><span class="hljs-comment">// 压缩文件读取</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>)));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">names</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        ZipEntry zipEntry;<br>        <span class="hljs-keyword">while</span> ((zipEntry = file.getNextEntry()) != <span class="hljs-literal">null</span>)<br>            names.add(zipEntry.getName());<br>        System.out.println(names.get(n - <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-24</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 对象序列化</title>
    <link href="/2023/04/24/BUPT_JAVA/%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/04/24/BUPT_JAVA/%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="对象序列化"><a class="markdownIt-Anchor" href="#对象序列化"></a> 对象序列化</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>现有类 Person 和 Book, 其定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> LocalDate birthday;<br>    <span class="hljs-keyword">private</span> String biography;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String gender, String biography, <span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.biography = biography;<br>        <span class="hljs-built_in">this</span>.birthday = LocalDate.of(year, month, day);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> gender;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<span class="hljs-built_in">this</span>.gender = gender;&#125;<br><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> birthday;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(LocalDate birthday)</span> &#123;<span class="hljs-built_in">this</span>.birthday = birthday;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBiography</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> biography;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBiography</span><span class="hljs-params">(String biography)</span> &#123;<span class="hljs-built_in">this</span>.biography = biography;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot; , gender: &quot;</span> + gender + <span class="hljs-string">&quot; , birthday: &quot;</span><br>                + birthday + <span class="hljs-string">&quot; , biography: &quot;</span> + biography;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Person author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> author;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(Person author)</span> &#123;<span class="hljs-built_in">this</span>.author = author;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> price;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<span class="hljs-built_in">this</span>.price = price;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, Person author, <span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot;\nauthor: &quot;</span> + author + <span class="hljs-string">&quot;\nprice: &quot;</span> + price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有一段程序用 <code>ObjectOutputStream</code> 的 <code>writeObject()</code> 方法连续向文件 <code>dict.dic</code> 中写入了 5 个 Book 类型的对象. 现请你写一段程序将这 5 个对象读出来.<br /><strong>注意: 你的程序中要把 Person 和 Book 类的定义复制过去.</strong></p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为一个整数, 只可能是 1, 2, 3, 4, 5 之一.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>只有一行字符串, 为对应的文件名</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">name: Thinking in Java<br>author: name: Bruce Eckel , gender: male , birthday: 1957-07-08 , biography: Bruce Eckel is a computer programmer, author and consultant.<br>price: 75<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/24</span><br><span class="hljs-comment">// 对象序列化</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">books</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>            books[i] = (Book) file.readObject();<br>        System.out.println(books[n - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Serial</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> LocalDate birthday;<br>    <span class="hljs-keyword">private</span> String biography;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String gender, String biography, <span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.biography = biography;<br>        <span class="hljs-built_in">this</span>.birthday = LocalDate.of(year, month, day);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> gender;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<span class="hljs-built_in">this</span>.gender = gender;&#125;<br><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> birthday;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(LocalDate birthday)</span> &#123;<span class="hljs-built_in">this</span>.birthday = birthday;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBiography</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> biography;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBiography</span><span class="hljs-params">(String biography)</span> &#123;<span class="hljs-built_in">this</span>.biography = biography;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot; , gender: &quot;</span> + gender + <span class="hljs-string">&quot; , birthday: &quot;</span><br>                + birthday + <span class="hljs-string">&quot; , biography: &quot;</span> + biography;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Serial</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Person author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> author;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(Person author)</span> &#123;<span class="hljs-built_in">this</span>.author = author;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> price;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<span class="hljs-built_in">this</span>.price = price;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, Person author, <span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot;\nauthor: &quot;</span> + author + <span class="hljs-string">&quot;\nprice: &quot;</span> + price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-24</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 文本文件读取</title>
    <link href="/2023/04/24/BUPT_JAVA/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <url>/2023/04/24/BUPT_JAVA/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="文本文件读取"><a class="markdownIt-Anchor" href="#文本文件读取"></a> 文本文件读取</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>已知一个文本文件, 文件名为 <code>dict.dic</code>. 它是由下边的代码生成.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">double</span> c, f;<br>String d;<br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">cin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    a = cin.nextInt();<br>    f = Math.random();<br>    <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0.5</span>) b = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> b = <span class="hljs-literal">false</span>;<br>    c = cin.nextDouble();<br>    d = cin.next();<br>    out.println(a);<br>    out.println(b);<br>    out.println(c);<br>    out.println(d);<br>&#125;<br>out.close(); <span class="hljs-comment">// Remember this!</span><br>cin.close();<br></code></pre></td></tr></table></figure><p>你的任务是写一段程序, 将这些内容读出来.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为一个整数, 只可能是 1, 2, 3, 4, 5 之一.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>将 dict.dic 中的相关内容输出到屏幕上, 如果输入是 1, 则输出那段代码第一次循环写入的内容, 如果输入是2, 则输出那段代码第二次循环写入的内容, 依此类推.<br />形式如样例. double 类型的不是保留一位小数, 直接输出就可以了.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">100<br>false<br>72.5<br>helloworld<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/24</span><br><span class="hljs-comment">// 文本文件读取</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;dict.dic&quot;</span>));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                line = file.readLine();<br>                <span class="hljs-keyword">if</span> (i == n)<br>                    System.out.println(line);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-24</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLU数据结构课设 - 手撕STL Sort</title>
    <link href="/2023/04/23/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E6%89%8B%E6%92%95STL-Sort/"/>
    <url>/2023/04/23/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E6%89%8B%E6%92%95STL-Sort/</url>
    
    <content type="html"><![CDATA[<h1 id="手撕stl-sort"><a class="markdownIt-Anchor" href="#手撕stl-sort"></a> 手撕STL Sort</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>C++ STL是 <em>Standard Template Library</em> 的简称, 即标准模板库. 简单来说, STL 将常用的数据结构与算法进行了封装, 用户需要时可以直接调用, 不用重新开发. 排序算法 sort() 是 STL 包含的一个重要算法.</p><p>STL 中的 sort() 函数基于快速排序算法实现, 众所众知, 快速排序是目前已知平均情况下最快的排序算法, 被 IEEE 评选为 20 世纪十大算法之一, 但其最坏情况下时间复杂度会退化为 $ O(n^2) $. STL 中的 sort() 对传统快速排序做了巧妙的改进, 使其最坏情况下时间复杂度也能维持在 $ O(nlogn) $, 它是如何实现的呢？</p><p>快速排序算法最坏情况下时间复杂度退化为 $ O(n^2) $ 的主要原因是, 每次划分 (Partition) 操作时, 都分在子数组的最边上, 导致递归深度恶化为 $ O(n) $层. 而 STL 的 sort() 在 Partition 操作有恶化倾向时, 能够自我侦测, 转而改为堆排序, 使效率维持在堆排序的 $ O(nlogn) $. 其具体方法是: 侦测快速排序的递归深度, 当递归深度达到 $ \lfloor 2 \log_2n \rfloor = O(logn) $ 层时, 强行停止递归, 转而对当前处理的子数组进行堆排序.</p><p>此外, 传统的快速排序在数据量很小时, 为极小的子数组产生许多的递归调用, 得不偿失. 为此, STL 的 sort() 进行了优化, 在小数据量的情况下改用插入排序. 具体做法是: 当递归处理的子数组长度 (子数组包含的元素个数) 小于等于某个阈值 <code>threshold</code> 时, 停止处理并退出本层递归, 使当前子数组停留在 “接近排序但尚未完成” 的状态, 最后待所有递归都退出后, 再对整个序列进行一次插入排序 (注意不是对当前处理的子数组进行插入排序, 而是在快速排序的所有递归完全退出后, 对整个数组统一进行一次插入排序). 实验表明, 此种策略有着良好的效率, 因为插入排序在面对 “接近有序” 的序列时拥有良好的性能.</p><p>在本题中, 请你按照上述思路, 自己实现 STL 的 sort() 函数.</p><p><strong>备注: Partition 操作选取第 1 个元素作为基准元素. Partition 操作的不同实现可能导致不同的输出结果, 为保证输出结果唯一, 该操作的实现请以教材为准</strong></p><h2 id="函数接口定义"><a class="markdownIt-Anchor" href="#函数接口定义"></a> 函数接口定义:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> *R, <span class="hljs-type">int</span> n)</span></span>;<br></code></pre></td></tr></table></figure><p>功能为对整数 <code>R[1]</code>…<code>R[n]</code> 递增排序.</p><h2 id="裁判测试程序样例"><a class="markdownIt-Anchor" href="#裁判测试程序样例"></a> 裁判测试程序样例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> threshold;<br><br><span class="hljs-comment">/* 请在这里补充你的代码，即你所实现的sort函数 */</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">50010</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;threshold);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <br>    <span class="hljs-built_in">sort</span>(a,n);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Final:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>备注: 提交代码时, 只需提交 <code>sort</code> 函数以及你自定义的其他函数, 不用提交 <code>#include</code> 或者 <code>main</code> 函数等内容.</strong></p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>输入第一行为 2 个正整数 <code>n</code> 和 <code>threshold</code>, n 为待排序的元素个数, 不超过50000, threshold 为改用插入排序的阈值, 不超过 20, 含义如上所述. 第二行为 n 个空格间隔的整数. 本题中读入数据的操作无需你来实现, 而由框架程序完成.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>输出第一行为以 <code>depth_limit:</code> 开头的整数, 表示转为堆排序的递归深度, 即 $ \lfloor 2log_2n \rfloor $ 从第二行开始, 输出对某子数组转为堆排序后, 该子数组初始建堆的结果, 每个元素后一个空格, 每个堆占一行, 以<code>Heap:</code>开头. 注意, 可能不止一个堆. 接下来下一行, 输出 n 个整数, 每个整数后一个空格, 为快速排序所有递归退出后, 插入排序执行前的数组元素, 以<code>Intermediate:</code>开头. 最后一行为 n 整数, 每个整数后一个空格, 表示排序后的数组, 以 <code>Final:</code> 开头 (最后一行由框架程序完成, 无需你来输出)</p><h2 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例:</h2><h3 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">10 2<br>10 9 8 7 6 5 4 3 2 1<br></code></pre></td></tr></table></figure><h3 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">depth_limit:6<br>Heap:7 6 5 4 <br>Intermediate:1 2 3 4 5 6 7 8 9 10 <br>Final:1 2 3 4 5 6 7 8 9 10 <br></code></pre></td></tr></table></figure><h3 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">60 2<br>66 61 92 22 50 80 39 2 25 60 49 17 37 19 24 57 40 82 11 52 45 0 33 78 32 25 19 42 92 50 39 87 74 87 56 79 63 63 80 83 50 3 87 2 91 77 87 10 59 23 25 6 49 85 9 95 60 16 28 1 <br></code></pre></td></tr></table></figure><h3 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例 2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">depth_limit:11<br>Heap:24 19 23 19 17 22 <br>Intermediate:1 0 2 2 3 6 10 9 11 16 17 19 19 22 23 24 25 25 25 28 32 33 37 39 39 42 40 45 49 49 50 50 50 52 56 57 59 60 60 61 63 63 66 77 74 78 79 80 80 82 83 85 87 87 87 87 91 92 92 95 <br>Final:0 1 2 2 3 6 9 10 11 16 17 19 19 22 23 24 25 25 25 28 32 33 37 39 39 40 42 45 49 49 50 50 50 52 56 57 59 60 60 61 63 63 66 74 77 78 79 80 80 82 83 85 87 87 87 87 91 92 92 95 <br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 2023/04/23</span><br><span class="hljs-comment">// 手撕STL Soer</span><br><span class="hljs-comment">// 应 Mar-Bro 要求写的</span><br><br><span class="hljs-comment">// 维护堆的性质</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; len, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-type">int</span> largest = pos,<br>        left = <span class="hljs-number">2</span> * pos + <span class="hljs-number">1</span>,<br>        right = <span class="hljs-number">2</span> * pos + <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 找出父节点, 左孩子, 右孩子中最大节点的下标</span><br>    <span class="hljs-keyword">if</span> (left &lt; len &amp;&amp; arr[largest] &lt; arr[left])<br>        largest = left;<br>    <span class="hljs-keyword">if</span> (right &lt; len &amp;&amp; arr[largest] &lt; arr[right])<br>        largest = right;<br><br>    <span class="hljs-keyword">if</span> (largest != pos) &#123;<br>        <span class="hljs-built_in">swap</span>(arr[largest], arr[pos]);<br>        <span class="hljs-built_in">heapify</span>(arr, len, largest);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* first, <span class="hljs-type">const</span> <span class="hljs-type">int</span>* last)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> len = last - first;<br>    <span class="hljs-comment">// 建堆</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">heapify</span>(first, len, i);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Heap:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = first; i &lt; last; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">// 排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">swap</span>(first[i], first[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">heapify</span>(first, i, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 用于 introSort 的分割函数, 返回, pivot 所在的指针</span><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>* first, <span class="hljs-type">int</span>* last)</span> </span>&#123;<br>    <span class="hljs-type">int</span> pivot = *first;   <span class="hljs-comment">// 默认是以第一个作为枢轴量</span><br>    <span class="hljs-keyword">auto</span> p = first;<br>    <span class="hljs-comment">// 这一段循环基本必须照着这个格式写, 不然不能 AC</span><br>    <span class="hljs-comment">// 因为分组的实现方式有很多, 但是要想 AC 许多细节的地方需要注意</span><br>    <span class="hljs-comment">// 这种实现方式选择的是, 一开始 first 并不参与排序, 直到返回时, 才将 first 对应的值进行交换</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">while</span> (*(++first) &lt;= pivot) <span class="hljs-comment">// 少一个等号都不行!</span><br>            ;<br>        <span class="hljs-keyword">while</span> (*(--last) &gt; pivot)<br>            ;<br>        <span class="hljs-keyword">if</span> (first &gt;= last) &#123;<br>            <span class="hljs-built_in">swap</span>(*p, *last);   <span class="hljs-comment">// 这里是选择 last 与枢轴量进行交换</span><br>            <span class="hljs-keyword">return</span> last;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(*first, *last);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">introSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* first, <span class="hljs-type">int</span>* last, <span class="hljs-type">int</span>&amp; depthLimit)</span> </span>&#123;<br>    --depthLimit;<br>    <span class="hljs-keyword">if</span> ((last - first) &gt; threshold) &#123;<br>        <span class="hljs-keyword">if</span> (depthLimit &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">heapSort</span>(first, last);<br>            ++depthLimit;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">auto</span> cut = <span class="hljs-built_in">partition</span>(first, last);<br>        <span class="hljs-built_in">introSort</span>(first, cut, depthLimit);      <span class="hljs-comment">// 对 [first, cut) 进行排序</span><br>        <span class="hljs-built_in">introSort</span>(cut + <span class="hljs-number">1</span>, last, depthLimit);   <span class="hljs-comment">// 对 [cut + 1, last) 进行排序</span><br>    &#125;<br>    ++depthLimit;<br>&#125;<br><br><span class="hljs-comment">// 插入排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* first, <span class="hljs-type">const</span> <span class="hljs-type">int</span>* last)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (first == last)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> *i, *j;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-keyword">for</span> (i = first + <span class="hljs-number">1</span>; i != last; ++i) &#123;<br>        val = *i;<br>        <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= first &amp;&amp; val &lt; *j; --j)<br>            *(j + <span class="hljs-number">1</span>) = *j;<br>        *(j + <span class="hljs-number">1</span>) = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 请在这里补充你的代码, 即你所实现的 sort 函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>* R, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> *first = R + <span class="hljs-number">1</span>, *last = R + n + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">auto</span> depthLimit = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span> * (<span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;depth_limit:%d\n&quot;</span>, depthLimit);<br>    <span class="hljs-comment">// 此处自加一下, 是因为, 在第一调用 introSort 时会默认递归了一次, 其实不然</span><br>    <span class="hljs-built_in">introSort</span>(first, last, ++depthLimit);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Intermediate:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = first; p &lt; last; ++p)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">insertSort</span>(first, last);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>本答案也是应 <strong>Mao-Bro</strong> 写的答案题解.<br />我一开始也写了个代码 (按照我之前看 <code>STL源码剖析</code> 时写的 sort, 进行了一定的简化), 但是输入输出样例都对不上, 于是搁置在一边了.<br />后来 <em>Mao-Bro</em> 成功的 AC 了此题, 特来向 <s>它</s> 求教后, 结合 <s>它</s> 的代码修改后, 才能 AC.<br />下面就来说一下我的心得体会:</p><p>我感觉, 一般学校学数据也会让学生实现一个 <code>sort</code>, 估计也就是课下实现一下就可以了, 并不会放到 OJ上, 因为此函数有多种实现方式 (实现时有很多细节问题, 不同的选择, 导致排序中间状态的输出也不同), 不方便 OJ 判题.<br />但是, 作为 <s>酒吧舞</s> 高校, <em>Mar-Bro</em> 的老师还是选择放到 OJ 上进行评测, 因此给这个 <code>sort</code> 增加了许多限制条件, 一些写在了题目描述中, 一些则需要自己的研究. 这就导致了你看自己的思路确实没问题, 但是就是不能和样例对上的烦人的结果.<br />然而, 我们的 <em>Mao-Bro</em> 顶住课业压力, 终于研究出来了!<br />许多实现的具体细节, 我已经写在代码注释中了, 大家可以研究一下.</p><p>对了, 这篇 blog 写于 2023 年劳动节补班的周日, <em>Mao-Bro</em> 正在补课 🤣. 作为 <strong>北京放假大学</strong> 的我们, 从来没有补班这种事情!</p><p>😆 😆 😆</p><pre class="note note-info"><strong>2023-04-23</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>PAT题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JLU数据结构课设 - 手撕BST</title>
    <link href="/2023/04/21/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E6%89%8B%E6%92%95BST/"/>
    <url>/2023/04/21/%E5%85%B6%E4%BB%96/JLU%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%20-%20%E6%89%8B%E6%92%95BST/</url>
    
    <content type="html"><![CDATA[<h1 id="手撕bst"><a class="markdownIt-Anchor" href="#手撕bst"></a> 手撕BST</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>对一棵初始为空的二叉查找树 (Binary Search Tree, BST) 进行若干插入或删除操作, 请输出最后的二叉查找树.</p><pre><code class=" mermaid">graph TB    5    5--&gt;3    5--&gt;7    3--&gt;1    3--&gt;4    1--&gt;null    1--&gt;2    7--&gt;6    7--&gt;9    9--&gt;8    9--&gt;10</code></pre><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>输入第一行为一个整数 $ T $, 表示操作数目. 随后 $ T $ 行,每行为 <code>Insert K</code> (表示插入整数K) 或 <code>Remove K</code> (表示删除整数K).<br />$ T $ 不超过 $ 2 \times 10^5 $, 树高不超过 $ 10^4 $.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>输出经上述操作后得到的二叉查找树的中根序列和先根序列, 序列中每个整数后一个空格 (<strong>包括最后一个</strong>), 两个序列之间用空行间隔 (<strong>最后也要有个空行</strong>).</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">16<br>Insert 17<br>Insert 31<br>Insert 13<br>Insert 11<br>Insert 20<br>Insert 35<br>Insert 25<br>Insert 8<br>Insert 4<br>Insert 11<br>Insert 24<br>Insert 40<br>Insert 27<br>Insert 9<br>Remove 17<br>Remove 13<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">4 8 9 11 20 24 25 27 31 35 40 <br><br>20 11 8 4 9 31 25 24 27 35 40 <br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 2023/04/21</span><br><span class="hljs-comment">// 手撕BST</span><br><span class="hljs-comment">// 应 Mar-Bro 要求写的</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *left, *right;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; data)</span> </span>&#123;<br>        left = right = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">this</span>-&gt;data = data;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BSTree</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Node* root = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">BSTree</span>() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">BSTree</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; data)</span> </span>&#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(data);<br>    &#125;<br><br>    ~<span class="hljs-built_in">BSTree</span>() &#123;<br>        <span class="hljs-built_in">destroy</span>(root);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(data);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        Node *parent = <span class="hljs-literal">nullptr</span>, *cur = root;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cur-&gt;data &lt; data) &#123;<br>                parent = cur;<br>                cur = cur-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;data &gt; data) &#123;<br>                parent = cur;<br>                cur = cur-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">else</span>   <span class="hljs-comment">// 不允许插入相同的 data, 这一点可以从测试样例看出来</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        cur = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(data);<br>        <span class="hljs-keyword">if</span> (parent-&gt;data &gt; data)<br>            parent-&gt;left = cur;<br>        <span class="hljs-keyword">else</span><br>            parent-&gt;right = cur;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; data)</span> </span>&#123;<br>        Node *parent = <span class="hljs-literal">nullptr</span>,<br>             *cur = root;<br><br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cur-&gt;data &gt; data) &#123;<br>                parent = cur;<br>                cur = cur-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;data &lt; data) &#123;<br>                parent = cur;<br>                cur = cur-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// data 的左子树为空, 所以父节点链接右子树</span><br>                <span class="hljs-keyword">if</span> (cur-&gt;left == <span class="hljs-literal">nullptr</span>) &#123;<br>                    <span class="hljs-comment">// 如果删除的是根节点, 此时父节点指向 nullptr</span><br>                    <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">nullptr</span>)<br>                        root = root-&gt;right;   <span class="hljs-comment">// 注意因为不是对 root 的引用, 所以需要直接修改 root 节点</span><br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 判断应该链接到父节点左还是右</span><br>                        <span class="hljs-keyword">if</span> (cur == parent-&gt;left)<br>                            parent-&gt;left = cur-&gt;right;<br>                        <span class="hljs-keyword">else</span><br>                            parent-&gt;right = cur-&gt;right;<br>                    &#125;<br>                    <span class="hljs-keyword">delete</span> cur;<br>                &#125;<br>                <span class="hljs-comment">// data 的右子树为空, 所以父节点链接左子树</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;right == <span class="hljs-literal">nullptr</span>) &#123;<br>                    <span class="hljs-comment">// 如果删除的是根节点, 此时父节点指向 nullptr</span><br>                    <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">nullptr</span>)<br>                        root = root-&gt;left;   <span class="hljs-comment">// 注意因为不是对 root 的引用, 所以需要直接修改 root 节点</span><br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 判断应该链接到父节点左还是右</span><br>                        <span class="hljs-keyword">if</span> (cur == parent-&gt;left)<br>                            parent-&gt;left = cur-&gt;left;<br>                        <span class="hljs-keyword">else</span><br>                            parent-&gt;right = cur-&gt;left;<br>                    &#125;<br>                    <span class="hljs-keyword">delete</span> cur;<br>                &#125;<br>                <span class="hljs-comment">// 左右子树均不为空, 使用左子树的最大节点或者右子树的最小节点进行替换</span><br>                <span class="hljs-comment">// 此处选择用 右子树的最小节点进行替换</span><br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">auto</span> minNodeParent = cur;<br>                    <span class="hljs-keyword">auto</span> minNode = cur-&gt;right;<br><br>                    <span class="hljs-keyword">while</span> (minNode-&gt;left != <span class="hljs-literal">nullptr</span>) &#123;<br>                        minNodeParent = minNode;<br>                        minNode = minNode-&gt;left;<br>                    &#125;<br><br>                    std::<span class="hljs-built_in">swap</span>(cur-&gt;data, minNode-&gt;data);<br>                    <span class="hljs-comment">// 解决野指针或 minNode-&gt;right 有子树的情况</span><br>                    <span class="hljs-comment">// minNodeParent-&gt;left = minNode-&gt;right</span><br><br>                    <span class="hljs-keyword">if</span> (minNodeParent-&gt;left == minNode)<br>                        minNodeParent-&gt;left = minNode-&gt;right;<br>                    <span class="hljs-keyword">else</span><br>                        minNodeParent-&gt;right = minNode-&gt;right;<br>                    <span class="hljs-keyword">delete</span> minNode;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 先序遍历</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> res = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br>        <span class="hljs-built_in">preOrder</span>(<span class="hljs-keyword">this</span>-&gt;root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> res = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br>        <span class="hljs-built_in">inOrder</span>(<span class="hljs-keyword">this</span>-&gt;root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-built_in">delete</span> (root-&gt;left);<br>            <span class="hljs-built_in">delete</span> (root-&gt;right);<br>            <span class="hljs-keyword">delete</span> root;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(<span class="hljs-type">const</span> Node* root, std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (root-&gt;left != <span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">inOrder</span>(root-&gt;left, res);<br>            res.<span class="hljs-built_in">push_back</span>(root-&gt;data);<br>            <span class="hljs-keyword">if</span> (root-&gt;right != <span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">inOrder</span>(root-&gt;right, res);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(<span class="hljs-type">const</span> Node* root, std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>            res.<span class="hljs-built_in">push_back</span>(root-&gt;data);<br>            <span class="hljs-keyword">if</span> (root-&gt;left != <span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">preOrder</span>(root-&gt;left, res);<br>            <span class="hljs-keyword">if</span> (root-&gt;right != <span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">preOrder</span>(root-&gt;right, res);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">using</span> std::cin;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> T, data;<br>    cin &gt;&gt; T;<br>    BSTree root;<br>    <span class="hljs-type">char</span> order[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, order, &amp;data);<br>        <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">strcmp</span>(order, <span class="hljs-string">&quot;Insert&quot;</span>) == <span class="hljs-number">0</span>)<br>            root.<span class="hljs-built_in">insert</span>(data);<br>        <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">strcmp</span>(order, <span class="hljs-string">&quot;Remove&quot;</span>) == <span class="hljs-number">0</span>)<br>            root.<span class="hljs-built_in">remove</span>(data);<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-keyword">auto</span> inOrder = root.<span class="hljs-built_in">inOrder</span>();<br>    size = inOrder.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>        cout &lt;&lt; inOrder[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><br><br>    <span class="hljs-keyword">auto</span> preOrder = root.<span class="hljs-built_in">preOrder</span>();<br>    size = preOrder.<span class="hljs-built_in">size</span>();<br>    cout &lt;&lt; endl<br>         &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>        cout &lt;&lt; preOrder[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>本答案是应 <strong>Mao-Bro</strong> 写的答案题解.<br />Mro-Bro 是来自 JLU 的高材生, 因为近期课业繁忙, 不得不出此下策让我替他写几道题.<br />不过也好, 正好锻炼一下我的编码能力. 如果有兴趣, 大家可以在 <a href="https://github.com/mar-bro">GitHub</a> 上关注一下他.<br />为了保护他的个人隐私, 这里就不贴他的照片了.</p><p><em>今个是破题, 文章还在后头呢</em></p><pre class="note note-info"><strong>2023-04-21</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>PAT题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networks Part Answers 3 - 2</title>
    <link href="/2023/04/19/ComputerNetworks/ComputerNetworksPartAnswers3-2/"/>
    <url>/2023/04/19/ComputerNetworks/ComputerNetworksPartAnswers3-2/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-networks-part-answers-3-2"><a class="markdownIt-Anchor" href="#computer-networks-part-answers-3-2"></a> Computer Networks Part Answers 3 - 2</h1><font face = "Times New Roman" size = 4><b>11.</b> A channel has a bit rate of 4 kbps and a propagation delay of 20 msec. For what range of frame sizes does stop-and-wait give an efficiency of at least $ 50 \% $?</font>由停等协议效率公式: $$ \eta = \frac{I}{ I + 2bR }$$其中 $ I $ 是帧长, $ b = 4kbps, R = 20ms  \eta = 50 \% \Longrightarrow I \geq 160bits $<br><font face = "Times New Roman" size = 4><b>12.</b> A 3000-km-long T1 trunk is used to transmit 64-byte frames using protocol 5. If the propagation speed is 6 μsec/km, how many bits should the sequence numbers be?</font><p>假定序号为 $ n $位, GobackN 协议的最大发送窗口 $ W = 2^n - 1 $<br />其信道利用率公式为:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><mi>W</mi><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mi>a</mi></mrow></mfrac><mspace width="1em"/><mi>a</mi><mo>=</mo><mfrac><mtext>传播时延</mtext><mtext>发送时延</mtext></mfrac><mspace width="1em"/><mi>η</mi><mo>=</mo><mn>100</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\eta = \frac{W}{1 + 2a} \quad a = \frac{传播时延}{发送时延} \quad \eta = 100 \\% </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span><span class="mspace newline"></span></span></span></span></p><p>$ 传播时延 = 3000 \times 6 = 18 ms, \; 发送时延 = 64 \times 8 \div 1.536M = 0.3ms \Longrightarrow a = 60 $<br />综上: $ W \geq 121 \Longrightarrow n \geq 7 $, 即至少要 7 位序号</p><br><font face = "Times New Roman" size = 4><b>13.</b> Consider the operation of protocol 6 over a 1-Mbps perfect (i.e., error-free) line. The maximum frame size is 1000 bits. New packets are generated 1 second apart. The timeout interval is 10 msec. If the special acknowledgement timer were eliminated, unnecessary timeouts would occur. How many times would the average message be transmitted?</font><p>发送一帧所需的时间是 1000/10M = 1ms，又因为每秒只有一帧要发送, 而重传间隔 10ms &lt; 1s, 且没有ACK 定时器, 即只采用捎带确认, 所以帧重传不可避免.</p><p>假设 A 发送某一帧, B 收到后, 接收窗口滑动, 但因为没有要发送给 A 主机的帧, 则等待;<br />10ms 之后 A 主机重发该帧, B 收到后发现是重复帧发送 NAK;<br />A 收到 NAK 之后不再重发. 因此每一帧都发送两次.</p><br><font face = "Times New Roman" size = 4><b>14.</b> In protocol 6, $ MAX\_SEQ = 2^n − 1 $. While this condition is obviously desirable to make efficient use of header bits, we have not demonstrated that it is essential. Does the protocol work correctly for $ MAX\_SEQ = 4 $, for example?</font><p><em>本题最好结合协议代码来理解, 以下解释为我本人所写, 不是标准答案</em><br />不能正常工作.<br />例如:<br />发送数据编号:<br />0 1 2 3 4 0 …<br />当发送窗口滑动到 [4 0] 时, 发送方发送编号为 4 的帧, 接受方收到后会将其存放在 arrived[0] 中.<br />而在接受窗口 [3 4] 时, arrived[1] 已经被标记为0, 由此 arrived数组全部为 true, 数据链路层就会上交网络层.<br />而此时上交的数据的顺序是不正确的, 会出错.</p><br><font face = "Times New Roman" size = 4><b>15.</b> When a file is transferred between two computers, two acknowledgement strategies are possible. In the first one, the file is chopped up into packets, which are individually acknowledged by the receiver, but the file transfer as a whole is not acknowledged. In the second one, the packets are not acknowledged individually, but the entire file is acknowledged when it arrives. Discuss these two approaches.</font><p>第一种机制中, 当某个分组的传输发生错误时, 可以只重发该分组, 而无需重发整个文件. 其优点是重传开销小, 但确认的开销相对第二种机制要大. 适合于网络可靠性能较差, 容易发生传输错误或丢失的情况.<br />第二种机制中,一旦某个分组发生错误, 则需要重传整个文件. 适合于网络传输故障率比较低的情况, 其优点是节省确认所消耗的网络资源.</p><br><font face = "Times New Roman" size = 4><b>16.</b> In some networks, the data link layer handles transmission errors by requesting that damaged frames be retransmitted. If the probability of a frame' s being damaged is $ p $, what is the mean number of transmissions required to send a frame? Assume that acknowledgements are never lost.</font><p><em>无穷级数的计算, 大一下 (2021) 网课阶段没怎么学好</em><br />由题意可知, 发送一帧需要的平均传输次数为:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mi>i</mi><msup><mi>p</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i = 1}^{\infty} ip^{i - 1}(1 - p) = \frac{1}{1 - p} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><font face = "Times New Roman" size = 4><b>17.</b> Frames of 1000 bits are sent over a 1-Mbps channel using a geostationary satellite whose propagation time from the earth is 270 msec.Acknowledgements are always piggybacked onto data frames. The headers are very short. Three-bit sequence numbers are used. What is the maximum achievable channel utilization for <br>(a) Stop-and-wait? <br>(b) Protocol 5? <br>(c) Protocol 6? <br></font>$$ 发送时延 = \frac{1000}{1M} = 1 ms \quad 传播时延 = 270 ms \quad a = \frac{传播时延}{发送时延} = 270 $$<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: gather at position 7: \begin{̲g̲a̲t̲h̲e̲r̲}̲  \eta_{停等协议} …'>\begin{gather}  \eta_{停等协议} = \frac{1}{2(1 + a)} = \frac{1}{542} = 0.18 \\% \\  \eta_{协议5} = \frac{2^3 - 1}{2(1 + a)} = \frac{7}{542} = 1.29 \\% \\  \eta_{协议6} = \frac{2^{3 - 1}}{2(1 + a)} = \frac{4}{542} = 0.74 \\%\end{gather}</p><font face = "Times New Roman" size = 4><b>18.</b> Consider an error-free 64-kbps satellite channel used to send 512-byte data frames in one direction, with very short acknowledgements coming back the other way. What is the maximum throughput for window sizes of 1, 7, 15, and 127? The earth-satellite propagation time is 270 msec.</font><p>$ 发送时延 = 512 \times 8 \div 64k = 64 ms, 传播时延 = 270 ms, \Longrightarrow a = 4.2 $<br />设发送窗户大小为 $ W, 且当 \frac{W}{1 + 2a} \geq 1 \Longrightarrow W \geq 10 $ 时, 信道利用率最高.</p><p>$ W = 1, 吞吐量 = \frac{1}{1 + 2a} \times 64k = 6.8kbps $</p><p>$ W = 7, 吞吐量 = \frac{7}{1 + 2a} \times 64k = 47.7kbps $</p><p>当 $ W = 15 \; OR \; 127 $ 时, 信道满负荷工作, 最大吞吐量 = $ 64kbps $</p><br><font face = "Times New Roman" size = 4><b>19.</b> A 100-km-long cable runs at the T1 data rate. The propagation speed in the cable is 2/3 the speed of light in vacuum. How many bits fit in the cable?</font><p>由题意可知, 电缆的传播速度为 $ 20 \times 10^4 km/s $, 100 公里的电缆将在 0.5 毫秒内被填满, 所以需要: $ 1.544M \times 0.5 m = 772 bits$ 即可填满电缆.<br /><br></p><font face = "Times New Roman" size = 4><b>20.</b> Give at least one reason why PPP uses byte stuffing instead of bit stuffing to prevent accidental flag bytes within the payload from causing confusion.</font><p>PPP 是由软件实现的, 而位填充几乎都是在硬件协议中实现的. 对于软件实现, 字节操作比位操作更简单.<br />此外, PPP是设计用于调制解调器的. 调制解调器接收和传送数据的单位是字符而不是位.</p><p><strong>注: 从本篇 blogs 开始, hexo markdown 渲染器更换为 ‘hexo-renderer-markdown-it-plus’, 因为其对 LaxteX 语法有着更好的支持, 所以可能导致之前的一些 blgos 数学公式出现问题.</strong><br /><strong>同时, 我发现, 换用此 markdown 渲染器之后, 行间公式会发生重复渲染的情况, 目前 (2023-04-19) 还无法解决这个问题.</strong><br /><strong>还有, 目前本地渲染没有问题, 目前 (2023-04-19 14:47) 还未上传 GitHub, 不清楚 GitHub Actions 会不会有问题</strong></p><pre class="note note-info"><strong>2023-04-19</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>AnswersShare</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ComputerNetworks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networks Part Answers 3 - 3</title>
    <link href="/2023/04/19/ComputerNetworks/ComputerNetworksPartAnswers3-3/"/>
    <url>/2023/04/19/ComputerNetworks/ComputerNetworksPartAnswers3-3/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-networks-part-answers-3-3"><a class="markdownIt-Anchor" href="#computer-networks-part-answers-3-3"></a> Computer Networks Part Answers 3 - 3</h1><font face = "Times New Roman" size = 4><b>21.</b> What is the minimum overhead to send an IP packet using PPP? Count only the overhead introduced by PPP itself, not the IP header overhead.What is the maximum overhead?</font><p>最小开销: 每一帧有 2 个标志字节, 1 个协议字节和 2 个校验字节, 每帧总共 5 字节开销.<br />最大开销: 2 个标志字节, 1 个地址字节, 1 个控制字节, 2 个协议字节和 4 个校验字节, 一共 10 字节开销.<br />附 PPP 协议帧约定:</p><table><thead><tr><th style="text-align:center">Flag (01111110)</th><th style="text-align:center">Address (11111111)</th><th style="text-align:center">Control (00000011)</th><th style="text-align:center">Protocol</th><th style="text-align:center">Payload</th><th style="text-align:center">Checksun</th><th style="text-align:center">Flag (01111110)</th></tr></thead><tbody><tr><td style="text-align:center">1 Byte</td><td style="text-align:center">1 Byte</td><td style="text-align:center">1 Byts</td><td style="text-align:center">1 Byte OR 2 Bytes</td><td style="text-align:center">Changeable</td><td style="text-align:center">2 Bytes OR 4 Bytes</td><td style="text-align:center">1 Byte</td></tr></tbody></table><p><strong>因为 <code>Address</code> 和 <code>Control</code> 字段总是取默认配置的常数, 因此 LCP 提供了某种必要的机制, 允许通信双方就是否省略这两个字段进行协商, 去掉的话可以为每帧节省 2 个字节的空间.</strong></p><br><font face = "Times New Roman" size = 4><b>22.</b> 已知数据位流为 $ 1101 0110 $, 采用 CRC 校验, $ G(x) = x^3 + 1 $, 计算出校验位.</font><p>非常简单, 答案: $ 111 $.</p><br><font face = "Times New Roman" size = 4><b>23.</b> 采用 3 比特序号的 SR 协议, 若接收窗口为 5, 则发送窗口的最大值是多少?</font><p>使用 n 位序号的选择传协议的滑动窗口个数应满足:<br />$ W_T + W_R \leq 2^n $, 对于 3 位序号, $ W_T + W_R \leq 8 $, $ W_R = 5, W_T \leq 3 $</p><br><font face = "Times New Roman" size = 4><b>24.</b> $ 50kbps $ 的卫星信道, 往返时延为 $ 500 ms $, 帧长为 $ 1000 $ 位, 使用 SR 协议, 若使效率达到 $ 50 \% $, 序号的比特数至少是多少?</font><p>因题目中没有强调使用忽略发送时间的 ACK 帧来确认, 假定为捎带确认.<br />$ a = \frac{传播时延}{发送时延} = \frac{250}{1000 \div 50} = 12.5 $<br />设发送窗口为 $ W $, 选择重传协议的信道利用率为 $ \frac{W}{2 + 2a} = 50 % $, 可求出 $ W = 14 $<br />$ W \leq 2^n - 1 \therefore n = 5 $</p><br><font face = "Times New Roman" size = 4><b>25.</b> 数据链路层采用 GBN 协议, 发送方已经发送了编号为 0-7 的帧, 当计时器超时时, 若发送方只收到 0, 4, 5 号帧的确认, 则发送方需要重发的帧数是多少?</font><p>对 5 号帧的确认说明, 5 号帧及以前的帧全部正确接收, 因此发送方需要重发未确认的 6 号和 7 号帧, 即需要重发的帧数是 2.</p><br><font face = "Times New Roman" size = 4><b>26.</b> 两台计算机的数据链路层协议实体采取滑动窗口机制. 利用 16kbps 的卫星信道传输长度为 128 字节的数据帧, 信道传播时延为270ms. <br>(1) 计算使用停等协议的信道利用率; <br>(2) 计算使用发送窗口为 7 的 GBN 协议的信道利用率; <br>(3) 计算使用发送窗口为 15 的 GBN 协议的信道利用率; <br>(4) 为使信道利用率达到最高,使 用 GBN 协议时序号的比特数最 少为多少位?</font><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>发送时延</mtext><mo>=</mo><mfrac><mrow><mn>128</mn><mo>×</mo><mn>8</mn></mrow><mrow><mn>16</mn><mi>k</mi></mrow></mfrac><mo>=</mo><mn>64</mn><mi>m</mi><mi>s</mi><mspace width="1em"/><mtext>传播时延</mtext><mo>=</mo><mn>270</mn><mi>m</mi><mi>s</mi><mspace width="1em"/><mi>a</mi><mo>=</mo><mfrac><mtext>传播时延</mtext><mtext>发送时延</mtext></mfrac><mo>=</mo><mn>4.2</mn><mspace width="1em"/><mn>2</mn><mo>+</mo><mn>2</mn><mi>a</mi><mo>=</mo><mn>10.4</mn></mrow><annotation encoding="application/x-tex">发送时延 = \frac{128 \times 8}{16k} = 64 ms \quad 传播时延 = 270 ms \quad a = \frac{传播时延}{发送时延} = 4.2 \quad 2 + 2a = 10.4 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord">0</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">.</span><span class="mord">2</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span></span></span></span></span></p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: gather at position 7: \begin{̲g̲a̲t̲h̲e̲r̲}̲  \eta_{停等协议} …'>\begin{gather}  \eta_{停等协议} = \frac{1}{2(1 + a)} = \frac{1}{10.4} \approx 9.6 \\% \\  \eta_{GBN7} = \frac{7}{2(1 + a)} = \frac{7}{10.4} \approx 67.3 \\% \\\end{gather}</p><p>(3) 因为 15 &gt; 10.4, 因此信道利用率为 1<br />(4) $ W = 2^n - 1 \geq 10.4, \therefore n \geq 4 $</p><font face = "Times New Roman" size = 4><b>27.</b> 某数据链路层协议要传输下列 4 个字符数据: $ A: 01000111; B: 11100011; ESC: 11100000; FLAG: 01111110 $,写出下列成帧方法中实际传输的二进制序列: <br>(1) 字符计数法 <br>(2) 带首尾标志的字节填充法 <br>(3) 带首尾标志的比特填充法 <br>(4) RS-232 协议,每次发送一个 8 位字符, 以位 `0` 为起始位位 `1` 为终止位并计算上述每种方法的效率.</font>以下答案中, 红色字符为填充字符<p>(1)  $ \textcolor{red}{00000101} \quad 01000111 \quad 11100011 \quad 11100000 \quad 01111110 $<br />填充字符解释: 连同字符统计字符在内共 5 个字符, 所以填二进制的5<br />增加了一个长度字节, 效率为 4/5 = 80%</p><p>(2) $ \textcolor{red}{01111110} \quad 01000111 \quad 11100011 \quad \textcolor{red}{11100000} \quad 11100000 \quad  \textcolor{red}{11100000}  \quad 01111110 \quad \textcolor{red}{01111110} $<br />增加了首尾标志和2个转义字符, 效率为 4/8 = 50%</p><p>01111110 01000111 110100011 111000000 011111010 01111110<br />(3) $ \textcolor{red}{01111110} \quad 01000111 \quad 11\textcolor{blue}{0}10001 \quad 1111\textcolor{blue}{0}000 \quad 0011111\textcolor{blue}{0}1 \quad 0 \quad \textcolor{red}{01111110} $<br />增加了首尾标志和 3 位填充, 效率为 32/51 = 62.75%</p><p>(4) RS232: 每个字符前面加 1 位起始位, 后面加 1 位停止位<br />$ \textcolor{red}{0}01000111\textcolor{red}{1} \quad \textcolor{red}{0}11100011\textcolor{red}{1} \quad \textcolor{red}{0}11100000\textcolor{red}{1} \quad \textcolor{red}{0}01111110\textcolor{red}{1} $<br />效率为 32/40 = 80%</p><pre class="note note-info"><strong>2023-04-19</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>AnswersShare</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ComputerNetworks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networks Part Answers 3 - 1</title>
    <link href="/2023/04/18/ComputerNetworks/ComputerNetworksPartAnswers3-1/"/>
    <url>/2023/04/18/ComputerNetworks/ComputerNetworksPartAnswers3-1/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-networks-part-answers-3-1"><a class="markdownIt-Anchor" href="#computer-networks-part-answers-3-1"></a> Computer Networks Part Answers 3 - 1</h1><font face = "Times New Roman" size = 4><b>1.</b> An upper-layer packet is split into 10 frames, each of which has an 80% chance of arriving undamaged. If no error control is done by the data link protocol, how many times must the message be sent on average to get the entire thing through?</font><p>由题意可知:<br />一次发送成功的概率为 $ 0.8^{10} \approx 0.107 $<br />两次发送成功的概率为 $ (1 - 0.107) \times 0.107 $<br />三次发送成功的概率为 $ (1 - 0.107)^{2} \times 0.107 $<br />由此类推 $ k $ 次发送成功的概率为: $ (1 - 0.107)^{k} \times 0.107 $<br />发送次数的平均值 $ = \sum_{k = 1}^{\infty} {k \times (1 - 0.107)^{k} \times 0.107} = \frac{1}{0.107} \approx 9 $</p><blockquote><p>以下内容(公式的推导)更新于 2023-06-15</p></blockquote><p>下面给出一个 $ \sum^{\infty}_{i = 1} i(1 - p)^{i- 1}p $ 这个级数的求和过程:</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲&amp;\sum^{\infty}…'>\begin{align*}&amp;\sum^{\infty}_{i = 1} i(1 - p)^{i- 1}p \\[0.1cm]&amp;= p \cdot \sum^{\infty}_{i = 1} i(1 - p)^{i- 1} \\[0.1cm]&amp;= p \cdot [\sum^{\infty}_{i = 1} i(1 - p)^{i- 1}]^{\prime} \\[0.1cm]&amp;= p \cdot [\frac{(1 - p) - (1 - p)^{\infty}}{1 - (1 - p)}]^{\prime} \\[0.1cm]&amp;= p \cdot (\frac{1 - p}{p})^{\prime} \\[0.1cm]&amp;= - \frac{1}{p}\end{align*}</p><p>值得注意的一点是, 最后推导出的结果多了一个负号, 但是以我目前的能力并不能解决这一点, 希望看到这篇文章的有缘人能够在评论区留下正确的解决办法, 鄙人不胜感激.</p><br><font face = "Times New Roman" size = 4><b>2.</b> The following data fragment occurs in the middle of a data stream for which the bytestuffing algorithm described in the text is used: <br>A B ESC C ESC FLAG FLAG D <br>What is the output after stuffing?</font><p>填充后字符串如下所示, 其中红色的字符为填充的转义字符:<br /><font face = "Times New Roman" size = 4>A B <font color = "red"> ESC </font> ESC C <font color = "red"> ESC </font> ECS <font color = "red"> ESC </font> FLAG <font color = "red"> ESC </font> FLAG D<br /></font></p><br><font face = "Times New Roman" size = 4><b>3.</b> To provide more reliability than a single parity bit can give, an error-detecting coding scheme uses one parity bit for checking all the odd-numbered bits and a second parity bit for all the even-numbered bits. What is the Hamming distance of this code?</font><p>无论是发生在奇数位上的单比特错误, 还是偶数位上的单比特错误都可以被检测出来, 但是两个比特的错误不能被检测出来, 所以这种编码的汉明距离为 2.</p><font face = "Times New Roman" size = 4><b>4.</b> An 8-bit byte with binary value 10101111 is to be encoded using an even-parity Hamming code. What is the binary value after encoding?</font><p>这个题目很基础, 过程不予展示, 直接给出答案: $ 1010 0100 1111 $</p><blockquote><p>以下内容(海明编码解码-简便法)更新于 2023-06-15. 这里插入图片有些问题, 大家可以本博客的<a href="https://github.com/DengWuLi/DengWuLi.github.io/tree/hexo/source/_posts/ComputerNetworks/img/%E6%B5%B7%E6%98%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81-%E7%AE%80%E4%BE%BF%E6%B3%95.png">仓库</a> 查到本图片.</p></blockquote><img alt="海明编码解码-简便法" src="./img/海明编码解码-简便法.png"/><br><font face = "Times New Roman" size = 4><b>5.</b> One way of detecting errors is to transmit data as a block of <i> n </i> rows of <i> k </i> bits per row and add parity bits to each row and each column. The bitin the lower-right corner is a parity bit that checks its row and its column. Will this scheme detect all single errors? Double errors? Triple errors? Show that this scheme cannot detect some four-bit errors.</font><p>这种方法可以检查出所有单比特差错, 一个单比特差错将导致其所在的行和列都出现校验错误. 也可以检查出所有双比特差错, 即使出错的两个比特在同一行或者同一列, 也能查出.<br />但是, 对于 3 比特差错, 如果一个数据位错, 其对应的行列校验位均错, 则无法检测出差错. 对于 4 比特差错, 如果出错的四个点正好位于矩形的 4 个顶点, 则无法检查出差错.</p><br><font face = "Times New Roman" size = 4><b>6.</b> Suppose that data are transmitted in blocks of sizes 1000 bits. What is the maximum error rate under which error detection and retransmission mechanism (1 parity bit per block) is better than using Hamming code? Assume that bit errors are independent of one another and no bit error occurs during retransmission.</font><p>根据不等式: $ m + r + 1 \leq 2^r $<br />可以算出 1000 位数据, 汉明码需要 10 位校验位, 即一共传输 1010 位;<br />而采用奇偶校验并重传的方法, 需要 1 位校验位, 出错时重传 1001 位.<br />假设每位出错的概率为 $ p $, 采用检错重传一共传输 $ 1001 + 1000p \times 1001 $ 位</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1001</mn><mo>+</mo><mn>1000</mn><mi>p</mi><mo>×</mo><mn>1001</mn><mo>&lt;</mo><mn>1010</mn><mo>⟹</mo><mi>p</mi><mo>&lt;</mo><mn>8.99</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1001 + 1000p \times 1001 &lt; 1010 \Longrightarrow p &lt; 8.99 \times 10^{-6} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66844em;vertical-align:-0.024em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord">.</span><span class="mord">9</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></span></p><font face = "Times New Roman" size = 4><b>7.</b> What is the remainder obtained by dividing $ x^7 + x^5 + 1 $ by the generator polynomial $ x^3 + 1 $?</font><p>首先把被除数和生成多项式的系统都写成二进制位串, 被除数为 $ 10100001 $, 生成多项式为 $ 1001 $.<br />然后用2除法 (对应位进行异或, 不进位也不借位), 求出余数为 $ 111$, 其对应的多项式为 $ x^2 + x + 1 $.</p><br><font face = "Times New Roman" size = 4><b>8.</b> A bit stream $ 10011101 $ is transmitted using the standard CRC method described in the text. The generator polynomial is $ x^3 + 1 $. Show the actual bit string transmitted. Suppose that the third bit from the left is inverted during transmission. Show that this error is detected at the receiver’s end. Give an example of bit errors in the bit string transmitted that will not be detected by the receiver.</font><p>生成多项式的最高阶为 3, 因此先在待校验的串之后增加 3 个 0, 即 $ 1001 1101 000 $<br />然后以此位串为被除数, 生成多项式的位串 ($ 1001 $)为除数采用模 2 除法进行计算,求出余数为 $ 100 $.<br />实际传输位串为: $ 1001 1101 100 $<br />第三位反转之后的出错位串为: $ 1011 1101 100 $<br />因为: $ 10111101 100 \ mod \ 1001 = 100 \neq 0 $ 说明该位串有错, 因此可以检测出错误.</p><p>如果发生在左数第三位与第九位均发生了反转错误,即收到的位串为 $ 1011 1101 000 $, 此时校验的结果为 0, 即接收方无法检测出错误.</p><font face = "Times New Roman" size = 4><b>9.</b> Data link protocols almost always put the CRC in a trailer rather than in a header. Why?</font><p>如果把 CRC 放在帧头, 那么在发送前要把整个帧扫描一遍来计算 CRC, 然后再从帧头开始发送, 这样每一位都要处理两次, 比较浪费时间.<br />把 CRC 放在帧尾, 边发送边计算校验位, 可以一次完成, 效率较高.</p><br><font face = "Times New Roman" size = 4><b>10.</b> In the discussion of ARQ protocol in Section 3.3.3, a scenario was outlined that resulted in the receiver accepting two copies of the same frame due to a loss of acknowledgement frame. Is it possible that a receiver may accept multiple copies of the same frame when none of the frames (message or acknowledgement) are lost?</font><p>有可能.<br />接收方发出的 ACK 因为网络延迟等原因而晚于发送方计时器关闭前到达, 导致发送方认为接收方未收到此帧, 于是重传, 此种情况下, 接收方就接收到了两帧相同的帧.</p><pre class="note note-info"><strong>2023-04-18</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>AnswersShare</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ComputerNetworks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 公园门票</title>
    <link href="/2023/04/17/BUPT_JAVA/%E5%85%AC%E5%9B%AD%E9%97%A8%E7%A5%A8/"/>
    <url>/2023/04/17/BUPT_JAVA/%E5%85%AC%E5%9B%AD%E9%97%A8%E7%A5%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="公园门票"><a class="markdownIt-Anchor" href="#公园门票"></a> 公园门票</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>某公园门票有两种, 一种为纸质票, 一种为电子票. 门票的价格根据不同的人群有不同的折扣, 其中军人免费, 儿童减 30, 学生打 8 折, 其他原价. 先请你写一段出票的程序.</p><p>设计要求:</p><ol><li>定义两个抽象策略接口, 一个为折扣 (<code>Discount</code>), 一个为票的类型 (<code>Ticket</code>)</li><li>不同折扣均定义成实现 <code>Discount</code> 接口的类, 不同类型的票均定义成实现 <code>Ticket</code> 接口的类. (各种具体的策略类)</li><li>定义一个公园门票类 (环境类), 该类至少包含两个实例变量, 一个是 <code>Discount</code> 的引用, 一个是 <code>Ticket</code> 的引用.<br />该类可以根据 <code>Discount</code> 引用所指向折扣类型的不同计算出折扣后的票价, 可以根据 <code>Ticket</code> 引用所指向的票的类型不同返回不同类型的票.</li><li>定义一个 <code>Main</code> 类 (客户端类). 该类用上述类实现题目要求.</li></ol><p>这种设计方式叫 <strong>策略模式</strong>, 该模式的一个很重要的优点是:<br />当有新的折扣类型 (比如老年人票) 或新的票的类型 (比如凭身份证入场) 时, 只需要添加相应的类, 去实现对应的策略, 然后修改Main类就可以了. 其他的代码均不用修改.<br />如果使用配置文件, 连Main类都不需要修改.<br />所以检验自己的设计是否符合要求的方法就是真的去增加老年票或凭身份证入场, 看是不是真的只需修改Main类, 而不需要修改原有的其他任何类的代码。</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个整数, 代表原始票价, 第二行也是一个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>0</mn><mo>&lt;</mo><mi>n</mi><mo>&lt;</mo><mn>50</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(0 &lt; n &lt; 50)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>, 代表测试用例组数. 后边是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行, 每行一组测试用例.<br />格式为用空格分隔的两个字符串, 前边的为客户类型 (只可能是 <code>student</code>, <code>children</code>, <code>soldier</code>, <code>adult</code>之一, 依次代表学生, 儿童, 军人和其他), 后边的为票的类型 (只可能是 <code>paper</code>和 <code>electronical</code> 之一, 依次代笔纸质票和电子票)</p><p>测试用例保证合法, 且原始票价为 10 的倍数, 所以计算打折时用整数除法即可.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 行, 其中每两行依次对应输入的测试用例, 格式为第一行输出票的类型，电子票输出 <code>E_ticket</code>, 纸质票输出 <code>PaperTicket</code>. 第二行输出折扣后的票价, 格式见样例.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">100<br>3<br>adult paper<br>children electronical<br>student electronical<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">PaperTicket<br>Price:100<br>E_ticket<br>Price:70<br>E_ticket<br>Price:80<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/17</span><br><span class="hljs-comment">// 公园门票</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> input.nextInt(),<br>                n = input.nextInt();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.next(), b = input.next();<br>            <span class="hljs-type">var</span> <span class="hljs-variable">parkTick</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParkTick</span>(a, b);<br>            System.out.println(parkTick.getTicket() + <span class="hljs-string">&quot;\nPrice:&quot;</span> + parkTick.getPrice(price));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParkTick</span> &#123;<br>    <span class="hljs-keyword">private</span> Discount discount;<br>    <span class="hljs-keyword">private</span> Ticket ticket;<br><br>    ParkTick(String a, String b) &#123;<br>        <span class="hljs-keyword">switch</span> (a) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;adult&quot;</span> -&gt; discount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">adult</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;children&quot;</span> -&gt; discount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">children</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;soldier&quot;</span> -&gt; discount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">soldier</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;student&quot;</span> -&gt; discount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (b) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;paper&quot;</span> -&gt; ticket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paper</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;electronical&quot;</span> -&gt; ticket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Electronical</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> discount.price(price);<br>    &#125;<br><br>    String <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ticket.ticket();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Discount</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">price</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">price</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (price * <span class="hljs-number">0.8</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">children</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">price</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> price - <span class="hljs-number">30</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">soldier</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">price</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">adult</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Discount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">price</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Ticket</span> &#123;<br>    String <span class="hljs-title function_">ticket</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Paper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ticket</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ticket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PaperTicket&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Electronical</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ticket</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ticket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;E_ticket&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-17</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 雇员类</title>
    <link href="/2023/04/17/BUPT_JAVA/%E9%9B%87%E5%91%98%E7%B1%BB/"/>
    <url>/2023/04/17/BUPT_JAVA/%E9%9B%87%E5%91%98%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="雇员类"><a class="markdownIt-Anchor" href="#雇员类"></a> 雇员类</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>定义下述5个类, 其中<code>SalariedEmployee</code>, <code>HourlyEmployee</code>, <code>CommissionEmployee</code> 继承自 <code>Employee</code>, <code>basePlusCommissionEmployee</code> 继承自 <code>CommissionEmployee</code>.<br />类属性如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Employee: firstName,lastName,socialSecurityNumber<br>SalariedEmployee: weeklySalary <span class="hljs-comment">// 周薪</span><br>HourlyEmployee: wage <span class="hljs-comment">// 每周工钱</span><br>                hours <span class="hljs-comment">//月工作小时数</span><br>CommissionEmployee: grossSales <span class="hljs-comment">// 销售额</span><br>                   commissionRate <span class="hljs-comment">// 提成比率</span><br>basePlusCommissionEmployee: baseSalary <span class="hljs-comment">// 月基本工资</span><br></code></pre></td></tr></table></figure><p><code>Employee</code> 类中定义了抽象方法 <code>earning</code>, 用于计算员工的月工资<br />不同类中工资的计算方式:</p><table><thead><tr><th style="text-align:left">类名</th><th style="text-align:left">计算方式</th></tr></thead><tbody><tr><td style="text-align:left"><code>SalariedEmployee</code></td><td style="text-align:left"><code>weeklySalary * 4</code></td></tr><tr><td style="text-align:left"><code>HourlyEmployee</code></td><td style="text-align:left"><code>wage * hours</code></td></tr><tr><td style="text-align:left"><code>CommissionEmployee</code></td><td style="text-align:left"><code>grossSales * commissionRate</code></td></tr><tr><td style="text-align:left"><code>basePlusCommissionEmployee</code></td><td style="text-align:left"><code>grossSales*commissionRate+baseSalary</code></td></tr></tbody></table><p>类还应该包括构造方法, <code>toString</code> 方法, 属性的 <code>get/set</code> 方法.<br /><code>firstName</code>, <code>lastName</code>, <code>socialSecurityNumber</code> 的初始化在构造方法中完成. 其中对 <code>firstName</code>, <code>lastName</code> 也要提供 <code>get/set</code> 方法, 对 <code>socialSecurityNumber</code> 只提供 <code>get</code> 方法.<br />其他属性要提供 <code>get/set</code> 方法</p><p>类中用到的数值建议用 <code>double</code>存储.</p><p>在 <code>Main</code> 类中利用这 5 个类完成相应查询要求.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个整数 $n (0 &lt; n \leq 100) $, 代表共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个雇员. 后边是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行, 每行一个雇员的数据, 数据格式见样例.<br />输入个数如表所示, 紧跟着的三个字符串依次代表 <code>firstName</code>, <code>lastName</code>, <code>socialSecurityNumber</code>.</p><table><thead><tr><th style="text-align:left">Tag</th><th style="text-align:left">类名</th><th style="text-align:left">数字意义 (按输入顺序标记的对应的意义)</th></tr></thead><tbody><tr><td style="text-align:left"><code>0</code></td><td style="text-align:left"><code>SalariedEmployee</code></td><td style="text-align:left"><code>weeklySalary</code></td></tr><tr><td style="text-align:left"><code>1</code></td><td style="text-align:left"><code>HourlyEmployee</code></td><td style="text-align:left"><code>wage</code>, <code>hours</code></td></tr><tr><td style="text-align:left"><code>2</code></td><td style="text-align:left"><code>CommissionEmployee</code></td><td style="text-align:left"><code>grossSales</code>, <code>commissionRate</code></td></tr><tr><td style="text-align:left"><code>3</code></td><td style="text-align:left"><code>basePlusCommissionEmployee</code></td><td style="text-align:left"><code>grossSales</code>, <code>commissionRate</code>, <code>baseSalary</code></td></tr></tbody></table><p>这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行后的第一行为一个整数, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><mn>0</mn><mo>&lt;</mo><mi>m</mi><mo>&lt;</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m(0 &lt; m &lt; 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>, 代表测试用例条数. 后边为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 行, 每行一条测试用例, 数据格式见样例.<br />其中: <code>0</code> 代表根据 <code>firstName</code>(其后边跟的即为 <code>firstName</code>) 查询, <code>1</code>代表根据 <code>socialSecurityNumber</code>查询</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>若干行, 每行表示一个雇员的信息. 具体格式见样例 (注意各类数据之间都有一个空格). 建议依次调用对象的 <code>toString</code> 方法输出对象的信息, 调用 <code>earning</code> 方法来输出对象的月工资 (保留2位小数).<br />如果一条查询有多条结果 (<code>firstName</code>有可能相同), 则按月工资从低到高的顺序输出.</p><h3 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示:</h3><p><code>java.lang</code> 包有一个接口叫 <code>Comparable</code>, 该接口只有一个方法, 即 <code>int compareTo(T o)</code> 方法: 如果我们在自己的类 (比如 <code>Employee</code>) 中实现该接口, 那么就可以使用使用 <code>Arrays.sort()</code> 方法对 <code>Employee</code> 类的数组进行排序.<br /><code>int compareTo(T o)</code>方法：<br />如: <code>obj1.compareTo(obj2)</code>: <code>obj1</code>小于, 等于, 大于 <code>obj2</code> 时, 分别返回负整数, 零, 正整数.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">4<br>0 Ai Meng 2012673901 4312<br>1 NanXiong Qimu 2016782340 15.2 200<br>2 Guo Yang 2017672347 46781.3 0.1<br>3 Rong Huang 2018768901 7854.4 0.28 7098<br>4<br>0 Ai<br>1 2016782340<br>1 2018768901<br>0 Guo<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">firstName:Ai; lastName:Meng; socialSecurityNumber:2012673901; earning:17248.00<br>firstName:NanXiong; lastName:Qimu; socialSecurityNumber:2016782340; earning:3040.00<br>firstName:Rong; lastName:Huang; socialSecurityNumber:2018768901; earning:9297.23<br>firstName:Guo; lastName:Yang; socialSecurityNumber:2017672347; earning:4678.138768901<br>0 Guo<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/17</span><br><span class="hljs-comment">// 雇员类, 代码长的有些过分了</span><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[n];<br>        String firstName, lastName, socialSecurity;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> input.nextInt();<br>            firstName = input.next();<br>            lastName = input.next();<br>            socialSecurity = input.next();<br>            <span class="hljs-keyword">switch</span> (tag) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; &#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SalariedEmployee</span>(firstName, lastName, socialSecurity);<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">weeklySalary</span> <span class="hljs-operator">=</span> input.nextDouble();<br>                    temp.setWeeklySalary(weeklySalary);<br>                    employee[i] = temp;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HourlyEmployee</span>(firstName, lastName, socialSecurity);<br>                    <span class="hljs-type">double</span> <span class="hljs-variable">wage</span> <span class="hljs-operator">=</span> input.nextDouble(), hours = input.nextDouble();<br>                    temp.setWage(wage);<br>                    temp.setHours(hours);<br>                    employee[i] = temp;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommissionEmployee</span>(firstName, lastName, socialSecurity);<br>                    <span class="hljs-type">double</span> <span class="hljs-variable">grossSales</span> <span class="hljs-operator">=</span> input.nextDouble(), commissionRate = input.nextDouble();<br>                    temp.setGrossSales(grossSales);<br>                    temp.setCommissionRate(commissionRate);<br>                    employee[i] = temp;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; &#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">basePlusCommissionEmployee</span>(firstName, lastName, socialSecurity);<br>                    <span class="hljs-type">double</span> <span class="hljs-variable">grossSales</span> <span class="hljs-operator">=</span> input.nextDouble(), commissionRate = input.nextDouble(), baseSalary = input.nextDouble();<br>                    temp.setGrossSales(grossSales);<br>                    temp.setCommissionRate(commissionRate);<br>                    temp.setBaseSalary(baseSalary);<br>                    employee[i] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Arrays.sort(employee);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> input.nextInt();<br>            <span class="hljs-type">var</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> input.next();<br>            <span class="hljs-keyword">switch</span> (tag) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; &#123;<br>                    <span class="hljs-keyword">for</span> (Employee value : employee)<br>                        <span class="hljs-keyword">if</span> (value.getFirstName().equals(str))<br>                            System.out.println(value);<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                    <span class="hljs-keyword">for</span> (Employee value : employee)<br>                        <span class="hljs-keyword">if</span> (value.getSocialSecurity().equals(str))<br>                            System.out.println(value);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Employee&gt; &#123;<br>    <span class="hljs-keyword">private</span> String firstName;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String socialSecurity;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFirstName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSocialSecurity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socialSecurity;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstName</span><span class="hljs-params">(String firstName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>        <span class="hljs-built_in">this</span>.socialSecurity = socialSecurity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;firstName:%s; lastName:%s; socialSecurityNumber:%s; earning:%.2f&quot;</span>, firstName, lastName, socialSecurity, earning());<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Employee other)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (<span class="hljs-built_in">this</span>.earning() - other.earning());<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SalariedEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> weeklySalary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWeeklySalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> weeklySalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWeeklySalary</span><span class="hljs-params">(<span class="hljs-type">double</span> weeklySalary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.weeklySalary = weeklySalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalariedEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> weeklySalary * <span class="hljs-number">4</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HourlyEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWage</span><span class="hljs-params">(<span class="hljs-type">double</span> wage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.wage = wage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHours</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hours;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHours</span><span class="hljs-params">(<span class="hljs-type">double</span> hours)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hours = hours;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> wage;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> hours;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HourlyEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wage * hours;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommissionEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grossSales;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> commissionRate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getGrossSales</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> grossSales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGrossSales</span><span class="hljs-params">(<span class="hljs-type">double</span> grossSales)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grossSales = grossSales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getCommissionRate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> commissionRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommissionRate</span><span class="hljs-params">(<span class="hljs-type">double</span> commissionRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.commissionRate = commissionRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommissionEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> grossSales * commissionRate;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">basePlusCommissionEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CommissionEmployee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> baseSalary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBaseSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> baseSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBaseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> baseSalary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.baseSalary = baseSalary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">basePlusCommissionEmployee</span><span class="hljs-params">(String firstName, String lastName, String socialSecurity)</span> &#123;<br>        <span class="hljs-built_in">super</span>(firstName, lastName, socialSecurity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">earning</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.earning() + baseSalary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>根据学校给的题目, 对格式和其中的一些拼写错误进行了修改, 并不影响代码结果的正确.<br /><code>CommissionEmployee</code> -&gt; <code>CommissionEmployee</code><br /><code>SalaridEmployee</code> -&gt; <code>SalariedEmployee</code></p><pre class="note note-info"><strong>2023-04-17</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 复数</title>
    <link href="/2023/04/10/BUPT_JAVA/%E5%A4%8D%E6%95%B0/"/>
    <url>/2023/04/10/BUPT_JAVA/%E5%A4%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="复数"><a class="markdownIt-Anchor" href="#复数"></a> 复数</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>编写复数类, 该类至少包括计算复数的加法, 减法, 乘法, 除法的方法.<br />编写 <code>ComplexDivException</code> 类，该类继承 <code>Exception</code> 类, 且至少包含两个数据成员, 一个为错误代码, 一个为错误信息. 当复数类除数为 <code>0</code> 时要抛出该异常.<br />编写测试类, 测试以上两个类.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个字符串，只可能为 <code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>四个字符串之一. 依次代表本次测试执行加法, 减法, 乘法和除法.<br />第二行为一个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>0</mn><mo>&lt;</mo><mi>n</mi><mo>&lt;</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n ( 0 &lt; n &lt; 100 )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>, 代表共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 组测试用例。<br />后边为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行, 每行均为 4 个用空格分隔的浮点数, 依次参与运算的两个复数 c1, c2. 第一个数代表 c1 的实部, 第二个数代表 c1 的虚部, 第三个数代表 c2 的实部, 第四个数代表c2的虚部.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>若干行, 通常一行对应输入的一行, 为 c1 加或减或乘或除以 c2 的结果 (保留一位小数, 具体格式见样例), 如果除法的除数为 <code>0</code>, 则输出两行对应输入的一行, 这两行的内容为 (注意空格):<br /><code>Error No : 1001</code><br /><code>Error Message : Divide by zero.</code><br />前边的 <code>1001</code> 为错误代码，后边 <code>Divide by zero.</code> 为错误信息.<br />注意输出时建议 <strong>采用String的格式化, 或printf的格式化</strong>, 不建议采用 <code>DecimalFormat</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">add<br>6<br>1 1 -1 -1<br>90.9 68.8 60.3 79.3<br>4.3 65.4 69.2 -49.7<br>-8.33 -1.14 4.2 1.62<br>3.7 1.86 -5.46 9.22<br>15.1 -19.6 2.2 -3.73<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">0.0+0.0i<br>151.2+148.1i<br>73.5+15.7i<br>-4.1+0.5i<br>-1.8+11.1i<br>17.3-23.3i<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/10</span><br><span class="hljs-comment">// 复数</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argc)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">complexNumbers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>[n][<span class="hljs-number">2</span>];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">4</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>                arr[j] = input.nextDouble();<br>            complexNumbers[i][<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]);<br>            complexNumbers[i][<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(arr[<span class="hljs-number">2</span>], arr[<span class="hljs-number">3</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">switch</span> (order) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span> -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>                    System.out.println(ComplexNumber.add(complexNumbers[i][<span class="hljs-number">0</span>], complexNumbers[i][<span class="hljs-number">1</span>]));<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sub&quot;</span> -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>                    System.out.println(ComplexNumber.sub(complexNumbers[i][<span class="hljs-number">0</span>], complexNumbers[i][<span class="hljs-number">1</span>]));<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;mul&quot;</span> -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>                    System.out.println(ComplexNumber.mul(complexNumbers[i][<span class="hljs-number">0</span>], complexNumbers[i][<span class="hljs-number">1</span>]));<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;div&quot;</span> -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(ComplexNumber.div(complexNumbers[i][<span class="hljs-number">0</span>], complexNumbers[i][<span class="hljs-number">1</span>]));<br>                    &#125; <span class="hljs-keyword">catch</span> (ComplexDivException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;Error No : &quot;</span> + e.errNo);<br>                        System.out.println(<span class="hljs-string">&quot;Error Message : &quot;</span> + e.errMess);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComplexNumber</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> real;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> imaginary;<br><br>    ComplexNumber(<span class="hljs-type">double</span> real, <span class="hljs-type">double</span> imaginary) &#123;<br>        <span class="hljs-built_in">this</span>.real = real;<br>        <span class="hljs-built_in">this</span>.imaginary = imaginary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ComplexNumber <span class="hljs-title function_">add</span><span class="hljs-params">(ComplexNumber c1, ComplexNumber c2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(c1.real + c2.real, c1.imaginary + c2.imaginary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ComplexNumber <span class="hljs-title function_">sub</span><span class="hljs-params">(ComplexNumber c1, ComplexNumber c2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(c1.real - c2.real, c1.imaginary - c2.imaginary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ComplexNumber <span class="hljs-title function_">mul</span><span class="hljs-params">(ComplexNumber c1, ComplexNumber c2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(c1.real * c2.real - c1.imaginary * c2.imaginary, c1.real * c2.imaginary + c2.real * c1.imaginary);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ComplexNumber <span class="hljs-title function_">div</span><span class="hljs-params">(ComplexNumber c1, ComplexNumber c2)</span> <span class="hljs-keyword">throws</span> ComplexDivException &#123;<br>        <span class="hljs-keyword">if</span> (c2.real == <span class="hljs-number">0</span> &amp;&amp; c2.imaginary == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexDivException</span>();<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> c2.real * c2.real + c2.imaginary * c2.imaginary;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">newReal</span> <span class="hljs-operator">=</span> (c1.real * c2.real + c1.imaginary * c2.imaginary) / temp,<br>                newIma = (c2.real * c1.imaginary - c1.real * c2.imaginary) / temp;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComplexNumber</span>(newReal, newIma);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.imaginary &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1f+%.1fi&quot;</span>, <span class="hljs-built_in">this</span>.real, <span class="hljs-built_in">this</span>.imaginary);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1f-%.1fi&quot;</span>, <span class="hljs-built_in">this</span>.real, Math.abs(<span class="hljs-built_in">this</span>.imaginary));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComplexDivException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">errNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">errMess</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Divide by zero.&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-10</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 学生类(异常)</title>
    <link href="/2023/04/10/BUPT_JAVA/%E5%AD%A6%E7%94%9F%E7%B1%BB(%E5%BC%82%E5%B8%B8)/"/>
    <url>/2023/04/10/BUPT_JAVA/%E5%AD%A6%E7%94%9F%E7%B1%BB(%E5%BC%82%E5%B8%B8)/</url>
    
    <content type="html"><![CDATA[<h1 id="学生类异常"><a class="markdownIt-Anchor" href="#学生类异常"></a> 学生类(异常)</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>在上次作业的学生类 (1047 学生类) 基础上:<br />定义一个异常类 <code>ScoreException</code>, 当输入的学生成绩不在 $ [0, 100] $区间时, 抛出该异常.<br />定义一个异常类 <code>StudentNumberException</code>, 当输入的学号不满足下述条件, 则抛出该异常. 条件为:<br />学号为 10 位, 第 1 位为 <code>2</code>, 第2位为<code>0</code>, 其余位为数字 <code>0~9</code>.<br />对 <code>Student</code> 和 <code>StudentTest</code> 类进行必要修改, 提升程序的健壮性.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>只有一行, 先是2个字符串, 依次代表 <code>number</code>, <code>name</code>, 然后是三个整数, 依次代表 <code>maths</code>, <code>english</code>, <code>science</code> 的成绩.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>如果成绩非法, 则输出 <code>Illegal score format</code>: 如果学号非法则输出 <code>Illegal number format</code>.<br />如果正常, 则打印学生信息, 平均分保留一位小数. 具体格式见输出样例.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">2011211301 Tom 88 79 90<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">Student ID:2011211301<br>Name:Tom<br>Math:88<br>English:79<br>Science:90<br>Average Score:85.7<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/10</span><br><span class="hljs-comment">// 学生类(异常)</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> input.next(),<br>                name = input.next();<br>        <span class="hljs-type">int</span>[] grades = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>            grades[i] = input.nextInt();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!number.matches(<span class="hljs-string">&quot;20\\d&#123;8&#125;&quot;</span>))<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentNumberException</span>();<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>                <span class="hljs-keyword">if</span> (grades[i] &lt; <span class="hljs-number">0</span> || grades[i] &gt; <span class="hljs-number">100</span>)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScoreException</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (ScoreException | StudentNumberException ignored) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Student ID:&quot;</span> + number);<br>        System.out.println(<span class="hljs-string">&quot;Name:&quot;</span> + name);<br>        System.out.printf(<span class="hljs-string">&quot;Math:%d\nEnglish:%d\nScience:%d\nAverage Score:%.1f&quot;</span>, grades[<span class="hljs-number">0</span>], grades[<span class="hljs-number">1</span>], grades[<span class="hljs-number">2</span>], (grades[<span class="hljs-number">0</span>] + grades[<span class="hljs-number">1</span>] + grades[<span class="hljs-number">2</span>]) * <span class="hljs-number">1.0</span> / <span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScoreException</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Illegal score format&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentNumberException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StudentNumberException</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Illegal number format&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-10</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 最大匹配最小匹配</title>
    <link href="/2023/04/04/BUPT_JAVA/%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E6%9C%80%E5%B0%8F%E5%8C%B9%E9%85%8D/"/>
    <url>/2023/04/04/BUPT_JAVA/%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E6%9C%80%E5%B0%8F%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="最大匹配最小匹配"><a class="markdownIt-Anchor" href="#最大匹配最小匹配"></a> 最大匹配最小匹配</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>正则表达式, 又称规则表达式. (英语: Regular expression, 在代码中常简写为 regex, regexp 或 RE), 是计算机科学的一个概念.<br />正则表达式通常被用来检索, 替换那些符合某个模式 (规则) 的文本. 在正则表达式中通常有某个字符可以匹配若干个字符.<br />假设在某程序设计语言的正则表达式中 <code>*</code> 就可以匹配 0 个或多个字符. 比如 <code>a*b</code>可以匹配 <code>ab, acb, adb, acdb, adkfjgjdkb</code>等等.<br />在字符串 <code>acbddbeeebff</code> 中, 有多个字串可以和 <code>a*b</code> 匹配，包括 <code>acb, acbddb, acbddbeeeb</code>. 那么应该选哪个呢?<br />通常有两种策略可选, 一种是最小匹配, 就是选最短的 <code>acb</code>; 另一种是贪婪匹配, 就是选最长的 <code>acbddbeeeb</code>.<br />现在就请你写一段程序根据给定模式串和匹配串分别输出最小匹配和贪婪匹配的结果.</p><p><code>提示: java 语言可以用 Matcher 和 Pattern 类</code></p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>为 2 行, 每行都是一个字符串, 字符串长度均大于 2 且小于 100. 第一行的字符串中包含且仅包含一个 <code>*</code>, 且这个 <code>*</code> 不会出现在字符串的开头, 为模式串.<br />也就是说这里的 <code>*</code> 可以匹配0个或多个任意字符. 第二行的字符串一定不包含 <code>*</code>, 为待匹配串.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>也为 2 行, 每行都是一个字符串. 第一行为最小匹配的结果, 第二行为贪婪匹配的结果. 测试用例保证一定有解.<br /><strong>特别注意: 样例中的最小匹配是 <code>aab</code> 而不是 <code>ab</code>, 这种规则意味着我们在待匹配串中从前向后找模式串时, 当模式串 <code>*</code> 号前边的内容一旦与待匹配串中某部分匹配, 就不会再在待匹配串中后边的部分查找是否还有与之匹配的情况. 或者说此时我们找到了最大匹配与最小匹配在待匹配串中的共同的起始位置.</strong></p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">a*b<br>haabaaaabcd<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">aab<br>aabaaaab<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/04</span><br><span class="hljs-comment">// 最大匹配最小匹配</span><br><span class="hljs-comment">// 这个题理解错题意了, 需要对 &quot;正则表达式&quot; 有深刻的理解</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> input.next(), str = input.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>, tail = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; regex.length(); i++)<br>            <span class="hljs-keyword">if</span> (regex.charAt(i) == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                head = regex.substring(<span class="hljs-number">0</span>, i);<br>                <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt;= regex.length())<br>                    tail = regex.substring(i + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        <span class="hljs-comment">// 从网上查一查这种正则匹配串怎么写</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">minRegex</span> <span class="hljs-operator">=</span> head + <span class="hljs-string">&quot;.*?&quot;</span> + tail;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">maxRegex</span> <span class="hljs-operator">=</span> head + <span class="hljs-string">&quot;.*&quot;</span> + tail;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">minPattern</span> <span class="hljs-operator">=</span> Pattern.compile(minRegex), maxPattern = Pattern.compile(maxRegex);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">minMatcher</span> <span class="hljs-operator">=</span> minPattern.matcher(str), maxMatcher = maxPattern.matcher(str);<br><br>        <span class="hljs-comment">// 不用通过循环来查找最短或最长的串, 只需输出匹配成功的第一个匹配串即可.</span><br>        minMatcher.find();<br>        System.out.println(minMatcher.group());<br><br>        maxMatcher.find();<br>        System.out.println(maxMatcher.group());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-04</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 命令补全</title>
    <link href="/2023/04/03/BUPT_JAVA/%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/"/>
    <url>/2023/04/03/BUPT_JAVA/%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="命令补全"><a class="markdownIt-Anchor" href="#命令补全"></a> 命令补全</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>在Linux命令行下, 输入字符后, 按两次Tab键, shell就会列出以这些字符打头的所有可用命令. 如果只有一个命令匹配到, 按一次Tab键就自动将这个命令补全.<br />比如, 想更改密码, 但只记得这个命令前几个字母是pass. 这时候, 按Tab键, shell就自动输出 passwd 命令, 非常方便. 现在就请你写一段程序实现类似功能.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行为一个整数 $ n( 1 &lt; n &lt; 100) $, 代表共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条命令;<br />后边为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行字符串 (长度均不超过50且只包含小写字母), 代表这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条命令;<br />第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n + 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 行为一个字符串 (长度均不超过50且只包含小写字母), 为测试字符串;</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>若干行, 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条命令中所有以测试字符串开头的命令, 每个命令占一行, 按字典序依次输出. 测试数据保证至少会有一条命令被输出.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">6<br>ls<br>cd<br>cp<br>rm<br>mv<br>diff<br>c<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">cd<br>cp<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 命令补全</span><br><span class="hljs-comment">// 2023/04/03</span><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argc)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            order[i] = input.next();<br><br>        Arrays.sort(order);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">testOrder</span> <span class="hljs-operator">=</span> input.next();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (order[i].indexOf(testOrder) == <span class="hljs-number">0</span>)<br>                System.out.println(order[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-03</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 打印日历</title>
    <link href="/2023/04/03/BUPT_JAVA/%E6%89%93%E5%8D%B0%E6%97%A5%E5%8E%86/"/>
    <url>/2023/04/03/BUPT_JAVA/%E6%89%93%E5%8D%B0%E6%97%A5%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="打印日历"><a class="markdownIt-Anchor" href="#打印日历"></a> 打印日历</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>请按要求打印日历</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>只有一行, 为两个用空格分隔的整数, 第一个代表年份 (大于等于 1900 且小于等于 3000), 第二个代表月份 (保证在 1 到 12 之间).</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>该月的月历, 具体格式见样例.<br />注意: 输出中每一列都是 4 个字符, 如果不足 4 个则前边用空格填补. 第一列也是.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">2021 4<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mon Tue Wed Thu Fri Sat Sun<br>              1   2   3   4<br>  5   6   7   8   9  10  11<br> 12  13  14  15  16  17  18<br> 19  20  21  22  23  24  25<br> 26  27  28  29  30<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/03</span><br><span class="hljs-comment">// 打印日历</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> input.nextInt(), month = input.nextInt();<br>        month--; <span class="hljs-comment">// 注意, 输入的 month 值和 Java 默认的 month 值差一</span><br>        <span class="hljs-comment">// 设置日历的年月日, 主要月份是从 (0 ~ 11)</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>(year, month, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 定义一周的起始星期</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">firstDayOfWeek</span> <span class="hljs-operator">=</span> GregorianCalendar.MONDAY;<br>        calendar.setFirstDayOfWeek(Calendar.MONDAY);<br><br>        <span class="hljs-comment">// 获取这个月 1 号是星期几, (周日: 1 --- 周六: 7 )</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekday</span> <span class="hljs-operator">=</span> calendar.get(Calendar.DAY_OF_WEEK);<br><br>        <span class="hljs-comment">// 确定第一行的缩进</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indent</span> <span class="hljs-operator">=</span> (weekday &gt;= firstDayOfWeek) ? (weekday - firstDayOfWeek) : <span class="hljs-number">6</span>;<br><br>        String[] weekdayNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Wed&quot;</span>, <span class="hljs-string">&quot;Thu&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>, <span class="hljs-string">&quot;Sun&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (String weekdayName : weekdayNames)<br>            System.out.printf(<span class="hljs-string">&quot;%4s&quot;</span>, weekdayName);<br>        System.out.println();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= indent; i++)<br>            System.out.print(<span class="hljs-string">&quot;    &quot;</span> );<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);<br>            System.out.printf(<span class="hljs-string">&quot;%4d&quot;</span>, day);<br><br>            <span class="hljs-comment">// 日期后移</span><br>            calendar.add(Calendar.DAY_OF_MONTH, <span class="hljs-number">1</span>);<br>            weekday = calendar.get(Calendar.DAY_OF_WEEK);<br><br>            <span class="hljs-comment">// 又到了一周的开始, 开启下一行</span><br>            <span class="hljs-keyword">if</span> (weekday == firstDayOfWeek)<br>                System.out.println();<br>        &#125;<br>        <span class="hljs-keyword">while</span> (calendar.get(Calendar.MONTH) == month);<br><br>        <span class="hljs-keyword">if</span> (weekday != firstDayOfWeek)<br>            System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-03</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 日期格式转换</title>
    <link href="/2023/04/03/BUPT_JAVA/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/04/03/BUPT_JAVA/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="日期格式转换"><a class="markdownIt-Anchor" href="#日期格式转换"></a> 日期格式转换</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>请按规定转换日期.</p><p>出题人用到的java的类为:<br /><code>java.time.LocalDate</code>;<br /><code>java.time.format.DateTimeFormatter</code>;<br /><code>java.time.format.DateTimeParseException</code>;</p><p>建议大家也用同样的类.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>共三行, 每行一个字符串, 第一行代表待转换日期, 第二行代表输入日期的格式, 第三行代表输出日期的格式.<br />日期格式大概两类, 与 <code>yyyy/MM/dd</code>, <code>yyyy-MM-dd</code> 类似. 也就是说只有 <code>/</code> 和 <code>-</code> 两类分隔符和 <code>d</code>, <code>M</code>, <code>y</code> 三种字符.</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>只有一行, 如果输入的日期正确 (能按要求解析), 则输出为转换后的日期串. 否则输出 “Text could not be parsed .” (不包括双引号).</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">2021-04-13<br>yyyy-MM-dd<br>MM/dd/yyyy<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">04/13/2021<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/03</span><br><span class="hljs-comment">// 日期格式转换</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argc)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">dateInFormat</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">dateOutFormat</span> <span class="hljs-operator">=</span> input.next();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(dateInFormat);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">newDate</span> <span class="hljs-operator">=</span> formatter.parse(date);<br>            formatter = DateTimeFormatter.ofPattern(dateOutFormat);<br>            System.out.println(formatter.format(newDate));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Text could not be parsed .&quot;</span> );<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-03</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT JAVA: 通配符</title>
    <link href="/2023/04/03/BUPT_JAVA/%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <url>/2023/04/03/BUPT_JAVA/%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="通配符"><a class="markdownIt-Anchor" href="#通配符"></a> 通配符</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>通配符是一种特定场合下特殊用途的符号, 用来模糊匹配. 当查找时, 可以使用它来代替一个或多个真正字符;<br />当不知道真正字符或者懒得输入完整名字时, 常常使用通配符代替一个或多个真正的字符.<br />SQL 语言中的 LIKE 子句就允许使用通配符. 其中有两个通配符含义如下:</p><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">_</td><td style="text-align:center">匹配任意一个字符</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">匹配0个或多个字符</td></tr></tbody></table><p>下表是使用这两个通配符进行匹配的示例:</p><table><thead><tr><th style="text-align:center">样式串</th><th style="text-align:center">匹配的串</th><th style="text-align:center">不匹配串</th></tr></thead><tbody><tr><td style="text-align:center">a%b</td><td style="text-align:center">ab, aCCCCb, acb, adfefb等</td><td style="text-align:center">abc, ac等</td></tr><tr><td style="text-align:center">a_b</td><td style="text-align:center">acb, adb等</td><td style="text-align:center">ab, accccb等</td></tr></tbody></table><p>匹配的字符串中也包含 <code>_</code> 或 <code>%</code> 时, 就要使用 <code>ESCAPE</code> 子句来告诉系统哪个 <code>_</code> 或 <code>%</code> 不是通配符.</p><p>现在就请你写一个判断一个含有通配符的字符串在上述规则下是否与另一个字符串相匹配.<br />为了简化程序, 输入的样式串中出现的 <code>_</code> 或 <code>%</code> 一定代表通配符, 且一个样式串中仅包含一个通配符, 与之相匹配的字符串中一定不包含 <code>_</code> 或 <code>%</code>.</p><p><code>提示: java 可以使用 String 类的 matches 方法</code></p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入:</h2><p>第一行一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>0</mn><mo>&lt;</mo><mi>n</mi><mo>&lt;</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(0 &lt; n &lt; 20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 后边是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 行, 每行包含 2 个字符串, 前边为样式串, 后边为匹配串, 中间由一个空格格开 (样式串及匹配串中均不包含空格, 所有字符串长度均小于 20, 且输入的字符均为 ASCII 字符).</p><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出:</h2><p>n 行, 依次对应 n 行测试数据, 如果匹配串与样式串匹配则输出 <code>yes</code>, 否则输出<code>no</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br>a%b aCCCCb<br>a_b aCCCCb<br>a%b cab<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">yes<br>no<br>no<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2023/04/03</span><br><span class="hljs-comment">// 通配符</span><br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> input.next(), str2 = input.next();<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; str1.length(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (str1.charAt(j) == <span class="hljs-string">&#x27;_&#x27;</span>)<br>                    regex.append(<span class="hljs-string">&quot;[^_]&quot;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1.charAt(j) == <span class="hljs-string">&#x27;%&#x27;</span>)<br>                    regex.append(<span class="hljs-string">&quot;[^%]*&quot;</span>);<br>                <span class="hljs-keyword">else</span><br>                    regex.append(str1.charAt(j));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(str2.matches(regex.toString()))<br>                System.out.println(<span class="hljs-string">&quot;yes&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-04-03</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>BUPT_JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1012</title>
    <link href="/2023/02/28/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201012/"/>
    <url>/2023/02/28/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201012/</url>
    
    <content type="html"><![CDATA[<h1 id="数字分类"><a class="markdownIt-Anchor" href="#数字分类"></a> 数字分类</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>给定一系列正整数, 请按要求对数字进行分类, 并输出以下 5 个数字:</p><ul><li>$A_{1} = $ 能被 5 整除的数字中所有偶数的和;</li><li>$A_{2} = $ 将被 5 除后余 1 的数字按给出顺序进行交错求和, 即计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><msub><mi>n</mi><mn>3</mn></msub><mo>−</mo><msub><mi>n</mi><mn>4</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">n_{1} - n_{2} + n_{3} - n_{4} ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span> ;</li><li>$A_{3} = $ 被 5 除后余 2 的数字的个数;</li><li>$A_{4} = $ 被 5 除后余 3 的数字的平均数, 精确到小数点后 1 位;</li><li>$A_{5} = $  被 5 除后余 4 的数字中最大数字.</li></ul><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个输入包含 1 个测试用例. 每个测试用例先给出一个不超过 1000 的正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>, 随后给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个不超过 1000 的待分类的正整数, 数字间以空格分隔.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>对给定的 N 个正整数，按题目要求计算 $A_{1} \sim A_{5} $ 并在一行中顺序输出. 数字间以空格分隔, 但行末不得有多余空格.<br />若分类之后某一类不存在数字, 则在相应位置输出 <code>N</code>.</p><h2 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">13 1 2 3 4 5 6 7 8 9 10 20 16 18<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">30 11 2 9.7 9<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">8 1 2 4 5 6 7 9 16<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">N 11 2 N 9<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1012 数字分类</span><br><span class="hljs-comment"> * 2022/07/29</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;valarray&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br><br>    <span class="hljs-type">int</span> A[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (N--) &#123;<br>        <span class="hljs-type">int</span> temp;<br>        cin &gt;&gt; temp;<br>        <span class="hljs-type">int</span> temp2 = temp % <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">switch</span> (temp2) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> (temp % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                A[<span class="hljs-number">1</span>] += temp;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:   <span class="hljs-comment">// 交错求和结果可能为零或根本没有数据, 要分这两种情况讨论, 这一点比较坑</span><br>            j++;<br>            flag = <span class="hljs-literal">true</span>;<br>            A[<span class="hljs-number">2</span>] += <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">-1</span>, j - <span class="hljs-number">1</span>)) * temp;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            A[<span class="hljs-number">3</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            A[<span class="hljs-number">4</span>] += temp;<br>            count++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            A[<span class="hljs-number">5</span>] = <span class="hljs-built_in">max</span>(A[<span class="hljs-number">5</span>], temp);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">double</span> ave;<br>    <span class="hljs-keyword">if</span> (count != <span class="hljs-number">0</span>)<br>        ave = <span class="hljs-built_in">double</span>(A[<span class="hljs-number">4</span>]) / count;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (flag)   <span class="hljs-comment">// 表示有这个数字</span><br>                cout &lt;&lt; A[i];<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">if</span> (A[i] == <span class="hljs-number">0</span>)<br>                cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f&quot;</span>, ave);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (A[i] == <span class="hljs-number">0</span>)<br>                cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; A[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">5</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1011 A+B 和 C</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>, temp;<br><br>        <span class="hljs-keyword">while</span> (n-- &gt; <span class="hljs-number">0</span>) &#123;<br>            temp = input.nextInt();<br>            <span class="hljs-keyword">switch</span> (temp % <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (temp % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                        a[<span class="hljs-number">0</span>] += temp;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                        a[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>] + temp;<br>                    <span class="hljs-keyword">else</span><br>                        a[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>] - temp;<br>                    j+=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; a[<span class="hljs-number">2</span>]++;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; &#123;<br>                    a[<span class="hljs-number">3</span>] += temp;<br>                    count++;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> -&gt; a[<span class="hljs-number">4</span>] = Math.max(a[<span class="hljs-number">4</span>], temp);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">ave</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (count != <span class="hljs-number">0</span>)<br>            ave = a[<span class="hljs-number">3</span>] * <span class="hljs-number">1.0</span> / count;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">switch</span> (i) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (j != <span class="hljs-number">0</span>)<br>                        System.out.print(a[i]);<br>                    <span class="hljs-keyword">else</span><br>                        System.out.print(<span class="hljs-string">&quot;N&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span>)<br>                        System.out.print(<span class="hljs-string">&quot;N&quot;</span>);<br>                    <span class="hljs-keyword">else</span><br>                        System.out.printf(<span class="hljs-string">&quot;%.1f&quot;</span>, ave);<br>                &#125;<br>                <span class="hljs-keyword">default</span> -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span>)<br>                        System.out.print(<span class="hljs-string">&quot;N&quot;</span>);<br>                    <span class="hljs-keyword">else</span><br>                        System.out.print(a[i]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">4</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题目读完就会发现, 难到是不难, 就是需要各种判断, 所以需要有清晰的思维.<br />详细解析可以看代码(我自认为我写的代码逻辑清晰, 可读性强).<br />当然, 尽管不算难, 但是依然有些小坑, 比如, 处理 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时要注意最后的和可能为<strong>零</strong>, 不能单靠最后的<code>和</code>来判断是否有输入.</p><pre class="note note-info"><strong>2023-02-28</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1013</title>
    <link href="/2023/02/28/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201013/"/>
    <url>/2023/02/28/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201013/</url>
    
    <content type="html"><![CDATA[<h1 id="数素数"><a class="markdownIt-Anchor" href="#数素数"></a> 数素数</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">P_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个素数. 现任给两个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">M \leq N \leq 10^{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>, 请输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">P_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">P_{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的所有素数.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>输入在一行中给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>, 其间以空格分隔.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>输出从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">P_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 $P_{N} 的所有素数, 每 10 个数字占 1 行, 其间以空格分隔, 但行末不得有多余空格.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5 27<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">11 13 17 19 23 29 31 37 41 43<br>47 53 59 61 67 71 73 79 83 89<br>97 101 103<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1013 数素数</span><br><span class="hljs-comment"> * 2022/07/26</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">sqrt</span>(n)) + <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>                b = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;   <span class="hljs-comment">// 如果n是合数则返回0.</span><br>            <span class="hljs-keyword">else</span><br>                b = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-type">int</span> count_1 = <span class="hljs-number">0</span>, count_2 = <span class="hljs-number">0</span>;   <span class="hljs-comment">// count_1用于统计质数的个数，count_2用于按格式输出</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; count_1 &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Judge</span>(i) == <span class="hljs-number">1</span>) &#123;<br>            count_1++;<br>            <span class="hljs-keyword">if</span> (count_1 &gt;= m) &#123;<br>                cout &lt;&lt; i;<br>                count_2++;<br>                <span class="hljs-keyword">if</span> ((count_2 != <span class="hljs-number">10</span>) &amp;&amp; (count_1 != n))<br>                    cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count_2 == <span class="hljs-number">10</span>) &#123;<br>                    cout &lt;&lt; endl;<br>                    count_2 = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice</span><br><span class="hljs-comment">/// 1013 数素数 20/20</span><br><span class="hljs-comment">/// 2023-02-28</span><br><span class="hljs-comment">/// 在毛概课上写题</span><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argc)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        List&lt;Integer&gt; prime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; count &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (isPrime(i)) &#123;<br>                count++;<br>                <span class="hljs-keyword">if</span> (count &gt;= m)<br>                    prime.add(i);<br>            &#125;<br><br>        count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer integer : prime) &#123;<br>            count += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (count % <span class="hljs-number">10</span> != <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            System.out.print(integer);<br>            <span class="hljs-keyword">if</span> (count % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>)<br>                System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题又是有关质数的问题. 相信大家对于判断质数的方法已经了如指掌. 所以说这道题根本没有什么难度, 最后的格式输出也不是什么问题.</p><pre class="note note-info"><strong>2023-02-28</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1011</title>
    <link href="/2023/02/25/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201011/"/>
    <url>/2023/02/25/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201011/</url>
    
    <content type="html"><![CDATA[<h1 id="ab-和-c"><a class="markdownIt-Anchor" href="#ab-和-c"></a> A+B 和 C</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>给定区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mtext>−</mtext><msup><mn>2</mn><mn>31</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>31</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−2^{31}, 2^{31}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 内的 3 个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mtext>和</mtext><mi>C</mi></mrow><annotation encoding="application/x-tex">A, B 和 C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, 请判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A + B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 是否大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>输入第 1 行给出正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>T</mi><mo>≤</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T (T \leq 10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>, 是测试用例的个数. 随后给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 组测试用例, 每组占一行, 顺序给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mtext>和</mtext><mi>C</mi></mrow><annotation encoding="application/x-tex">A, B 和 C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>. 整数间以空格分隔.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>对每组测试用例, 在一行中输出 <code>Case #X: true</code> 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>&gt;</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A + B &gt; C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, 否则输出 <code>Case #X: false</code>, 其中<code> X</code> 是测试用例的编号(从 1 开始).</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">4<br>1 2 3<br>2 3 4<br>2147483647 0 2147483646<br>0 -2147483648 -2147483647<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">Case #1: false<br>Case #2: true<br>Case #3: true<br>Case #4: false<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1011 A+B 和 C</span><br><span class="hljs-comment"> * 2022/07/25</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> T = t;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> A[T], B[T], C[T];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++)<br>        cin &gt;&gt; A[i] &gt;&gt; B[i] &gt;&gt; C[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) <br>        <span class="hljs-keyword">if</span> ((A[i] + B[i]) &gt; C[i])<br>            cout &lt;&lt; <span class="hljs-string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;: true&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;: false&quot;</span> &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// 1011 A + B 和 C</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">long</span> a, b, c;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t; i++) &#123;<br>            a = input.nextInt();<br>            b = input.nextInt();<br>            c = input.nextInt();<br>            <span class="hljs-keyword">if</span> (a + b &gt; c)<br>                System.out.printf(<span class="hljs-string">&quot;Case #%d: true\n&quot;</span>, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                System.out.printf(<span class="hljs-string">&quot;Case #%d: false\n&quot;</span>, i + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题真没什么难度, 在此不做过多讲解了.</p><pre class="note note-info"><strong>2023-02-25</strong> <strong>IP属地: 北京</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1010</title>
    <link href="/2023/02/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201010/"/>
    <url>/2023/02/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201010/</url>
    
    <content type="html"><![CDATA[<h1 id="一元多项式求导"><a class="markdownIt-Anchor" href="#一元多项式求导"></a> 一元多项式求导</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>设计函数求一元多项式的导数. (注: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">x^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 为整数的一阶导数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">nx^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>. )</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>以指数递降方式输入多项式非零项系数和指数 (绝对值均为不超过 1000 的整数). 数字间以空格分隔.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>以与输入相同的格式输出导数多项式非零项的系数和指数. 数字间以空格分隔, 但结尾不能有多余空格. 注意 “零多项式” 的指数和系数都是 0, 但是表示为 <code>0 0</code>.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">3 4 -5 2 6 1 -2 0<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">12 3 -10 1 6 0<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1010 一元多项式求导</span><br><span class="hljs-comment"> * 2022/07/24</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;0 0&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; a * b &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b)<br>        <span class="hljs-keyword">if</span> (b != <span class="hljs-number">0</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a * b &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// 1010 一元多项式求导</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> a, b;<br>        a = input.nextInt();<br>        b = input.nextInt();<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;0 0&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span><br>            System.out.printf(<span class="hljs-string">&quot;%d %d&quot;</span>, a * b, b - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (input.hasNextInt()) &#123;<br>            a = input.nextInt();<br>            b = input.nextInt();<br>            <span class="hljs-keyword">if</span> (b != <span class="hljs-number">0</span>)<br>                System.out.printf(<span class="hljs-string">&quot; %d %d&quot;</span>, a * b, b - <span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题没什么难度, 在此不做过多讲解了, 值得注意的是输出格式, 所以, 要对第一个输入进行特殊处理.</p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后:</h2><p>在学习数据结构的时候, 曾在课本上遇到过类似的问题, 当时课本上给出的代码是使用链表实现的, 同时课本上也实现了诸如多项式的加减乘等算法.</p><pre class="note note-info"><strong>2023-02-18</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1009</title>
    <link href="/2023/02/17/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201009/"/>
    <url>/2023/02/17/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201009/</url>
    
    <content type="html"><![CDATA[<h1 id="说反话"><a class="markdownIt-Anchor" href="#说反话"></a> 说反话</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>给定一句英语, 要求你编写程序, 将句中所有单词的顺序颠倒输出.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>测试输入包含一个测试用例, 在一行内给出总长度不超过 80 的字符串. 字符串由若干单词和若干空格组成, 其中单词是由英文字母 (大小写有区分) 组成的字符串, 单词之间用 1 个空格分开, 输入保证句子末尾没有多余的空格.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>每个测试用例的输出占一行, 输出倒序后的句子.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Hello World Here I Come<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Come I Here World Hello<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1009 说反话</span><br><span class="hljs-comment"> * 2022/07/24</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">81</span>];<br>    cin.<span class="hljs-built_in">getline</span>(a, <span class="hljs-number">81</span>, <span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-type">char</span> p[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (a[i] != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">for</span> (; (a[i] != <span class="hljs-string">&#x27; &#x27;</span>) &amp;&amp; (a[i] != <span class="hljs-string">&#x27;\0&#x27;</span>); y++, i++)<br>            p[count][y] = a[i];<br>        p[count][y] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        count++;<br>        <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>            i++;<br>        y = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = count - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--)<br>        cout &lt;&lt; p[j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; p[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1006 换个格式输出整数</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> input.nextLine();<br>        String[] ans = str.split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ans.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            System.out.print(ans[i]);<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题用 Java 来做的话还是比较简单的, 用一个字符串存放输入的句子, 然后按空格拆分成字符串数组, 然后倒序输出就是结果了.<br />用 C++ 的化比较复杂了, 要自己手写一个 <code>split</code> 函数. (其实, 这个题的 C++ 程序应该更接近 C 语言风格)</p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后:</h2><p>又去 CSDN 上看了看柳诺的代码, 发现她使用了 <strong>“栈”</strong> 这种数据结果, 对这个题来说确实是降维打击啊!<br />附柳诺的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    stack&lt;string&gt; v;<br>    string s;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; s) <br>        v.<span class="hljs-built_in">push</span>(s);<br>    cout &lt;&lt; v.<span class="hljs-built_in">top</span>();<br>    v.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">while</span>(!v.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v.<span class="hljs-built_in">top</span>();<br>        v.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-02-17</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1008</title>
    <link href="/2023/02/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201008/"/>
    <url>/2023/02/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201008/</url>
    
    <content type="html"><![CDATA[<h1 id="数组元素循环右移问题"><a class="markdownIt-Anchor" href="#数组元素循环右移问题"></a> 数组元素循环右移问题</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>一个数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span> 中存在有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(N&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个整数, 在不允许使用另外数组的前提下，将每个整数循环向右移<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M(M \geq 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个位置，即将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span> 中的数据由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mn>0</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>A</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_{0}A_{1}···A_{N-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 变换为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>A</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>A</mi><mn>0</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_{N-M}···A_{N-1}A_{0}A_{1}A_{N-M-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (最后 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 个数循环移至最前面的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 个位置) 如果需要考虑程序移动数据的次数尽量少, 要如何设计移动的方法?</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个输入包含一个测试用例, 第1行输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≥</mo><mi>N</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(1 \geq N \leq 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M(M \geq 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>; 第2行输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个整数, 之间用空格分隔.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>在一行中输出循环右移 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 位以后的整数序列, 之间用空格分隔, 序列结尾不能有多余空格.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">6 2<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5 6 1 2 3 4<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1008 数组元素循环右移问题</span><br><span class="hljs-comment"> * 2022/07/23</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Move</span><span class="hljs-params">(<span class="hljs-type">int</span>* p, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = p[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>        p[i] = p[i - <span class="hljs-number">1</span>];   <span class="hljs-comment">// 从后向前赋值, 有些类似于矩阵. 从后一行加到前一行</span><br>    p[<span class="hljs-number">0</span>] = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; p[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-built_in">Move</span>(p, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        cout &lt;&lt; p[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; p[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">delete</span>[] p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice</span><br><span class="hljs-comment">/// 1008 数组元素循环右移问题</span><br><span class="hljs-comment">/// 2023-02-14</span><br><span class="hljs-comment">/// Java 始终不能像 C++ 那般灵活的使用结构体数组......</span><br><span class="hljs-comment">/// 或许我还没有感受到 Java 语言的伟大之处.</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> n, m;<br>        n = input.nextInt();<br>        m = input.nextInt();<br><br>        Number[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>[n];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i].first = input.nextInt();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[(i + m) % n].second = arr[i].first;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            System.out.print(arr[i].second);<br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br>        <span class="hljs-keyword">public</span> Integer first;<br>        <span class="hljs-keyword">public</span> Integer second;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Number</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">this</span>.first = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">this</span>.second = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这个题目有两个要求:</p><ol><li>不许使用额外的数组;</li><li>程序移动数据的次数尽量少;</li></ol><p>但从这两点来说, C<ins>程序, 明显是不合格的, 因为其通过调用函数实现每次只向右移动一个位置, 总共循环 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 次, 移动次数显然增多了不少.<br />然而, Java程序, 使用了一种巧妙的思路, 首先它先自定义了一个新的数据类型 <code>Number</code>, 其中包含两种数据, 数组的初始数据 <code>first</code> 和移动后的数据 <code>second</code> (这种命名方式类似于 C</ins> 中的 <code>pair</code>, 两个的作用也是类似的), 这样通过一次循环就可直接判断出 元素移动后的位置, 而不必一次次机械地移动.</p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后:</h2><p>网上的资料有些更为简单的写法 (是否能够AC, 本人并不能保证), 下面粘在这里, 供大家参考.<br /><strong><code>CSDN</code> — 柳诺</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    m %= n;<br>    <span class="hljs-comment">// 这一部分是这段代码的核心, 需要好好研究.</span><br>    <span class="hljs-keyword">if</span> (m != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a), <span class="hljs-built_in">begin</span>(a) + n);<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a), <span class="hljs-built_in">begin</span>(a) + m);<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-built_in">begin</span>(a) + m, <span class="hljs-built_in">begin</span>(a) + n);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; a[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>CSDN</code> — 柳诺评论区</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 这段代码最为简洁, 而且很容易明白</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, i;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> j = i - m % n;<br>        <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>)<br>            cout &lt;&lt; a[j + n];<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; a[j];<br>        <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-02-16</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1007</title>
    <link href="/2023/02/14/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201007/"/>
    <url>/2023/02/14/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201007/</url>
    
    <content type="html"><![CDATA[<h1 id="素数对猜想"><a class="markdownIt-Anchor" href="#素数对猜想"></a> 素数对猜想</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>让我们定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">d_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>n</mi></msub><mo>=</mo><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">d_{n} = p_{n+1} - p_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个素数. 显然有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d_{1} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 且对于 $ n &gt; 1$ 有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">d_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是个偶数. “素数对猜想” 认为 “存在无穷多对相邻且差为2的素数”.<br />现给定任意正整数 <code>N</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>&lt;</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(&lt;10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 请计算不超过<code>N</code>的满足猜想的素数对的个数.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>输入在一行给出正整数<code>N</code>.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">20<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">4<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1007 素数对猜想</span><br><span class="hljs-comment"> * 2022/07/22</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">sqrt</span>(n)) + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            b = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;   <span class="hljs-comment">// 如果n是合数则返回0.</span><br>        <span class="hljs-keyword">else</span><br>            b = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[a + <span class="hljs-number">1</span>];<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    p[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    p[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt; a + <span class="hljs-number">1</span>; i++)<br>        p[i] = <span class="hljs-built_in">judge</span>(i);<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= a - <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-number">1</span> &amp;&amp; p[i + <span class="hljs-number">2</span>] == <span class="hljs-number">1</span>)<br>            count++;<br>    cout &lt;&lt; count;<br>    <span class="hljs-keyword">delete</span>[] p;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice</span><br><span class="hljs-comment">/// 1007 素数对猜想 20/20</span><br><span class="hljs-comment">/// 2023-02-14</span><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        ArrayList&lt;Integer&gt; prime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (isPrime(i))<br>                prime.add(i);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prime.size() - <span class="hljs-number">1</span>; i++)<br>            <span class="hljs-keyword">if</span> (prime.get(i) - prime.get(i + <span class="hljs-number">1</span>) == -<span class="hljs-number">2</span>)<br>                num++;<br>        System.out.println(num);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= Math.sqrt(number); i++)<br>            <span class="hljs-keyword">if</span> (number % i == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题主要考察了 <strong>“素数”</strong> 这个概念和如何判断一个数是否为素数. 判断素数的算法多种多样, 我以后应该会专门写一篇blogs来总结一下常用的各种计算素数的算法.<br />结合本题的数据范围, 我们这里选择一种最为简便的方式进行判断:</p><blockquote><p>对于数字 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 能被 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[2,\sqrt n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 范围内任意一个整数整除, 说明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 不是素数. 否则说明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是素数.</p></blockquote><p>在本题中, 我首先计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 内 所有的素数, 并在数组 <code>p</code> 中进行标记, 之后开始遍历, 判断 <code>i</code> 和 <code>i+2</code> 是否均为素数, 并使用 <code>count</code> 进行计数. 最后输出 <code>count</code> 即可.</p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后:</h2><p>为什么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 而不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 这一点很容易看出. 因为, 一个整数的因数是成对的. 例如, 12可以分解为:</p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>12</mn><mspace width="1em"/><mn>2</mn><mo>×</mo><mn>6</mn><mspace width="1em"/><mn>3</mn><mo>×</mo><mn>4</mn><mspace width="1em"/><mn>4</mn><mo>×</mo><mn>3</mn><mspace width="1em"/><mn>6</mn><mo>×</mo><mn>2</mn><mspace width="1em"/><mn>12</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 12 \quad 2 \times 6 \quad 3 \times 4 \quad 4 \times 3 \quad 6 \times 2 \quad 12 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></blockquote><p>可以发现后半部分是前半部分的翻转.<br />如果6是12的因数, 就一定会有另外一个对应的因数2. 因为因数6大于根号12, 所以另一个因数2., 就一定小于根号12.<br />换句话说, 每一个大于根号n的因数, 都有一个对应的小于根号n的因数, 等于根号n的因数, 对应的另一个因数也是根号n, 比如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>25</mn></mrow><annotation encoding="application/x-tex">5 \times 5 = 25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span></span></span></span>.<br />因此, 只需要判断到 (包括) 根号n为止即可.</p><pre class="note note-info"><strong>2023-02-14</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断 C++ 中 const 修饰问题的技巧</title>
    <link href="/2023/02/14/%E5%85%B6%E4%BB%96/%E5%88%A4%E6%96%AD%20C++%20%E4%B8%AD%20const%20%E4%BF%AE%E9%A5%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/02/14/%E5%85%B6%E4%BB%96/%E5%88%A4%E6%96%AD%20C++%20%E4%B8%AD%20const%20%E4%BF%AE%E9%A5%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="判断-c-中-const-修饰问题的技巧"><a class="markdownIt-Anchor" href="#判断-c-中-const-修饰问题的技巧"></a> 判断 C++ 中 const 修饰问题的技巧</h1><p>最近我在阅读 <code>&lt;C++ Primer&gt;</code> 时被书中 <code>2.4 const 限定符</code> 这一节内容搞得很头疼, 于是寻觅互联网, 在知乎上发现一个不错的技巧, 特此记录下来.</p><h2 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h2><p><strong>const默认是修饰它左边的符号的，如果左边没有，那么就修饰它右边的符号</strong></p><h2 id="例一"><a class="markdownIt-Anchor" href="#例一"></a> 例一</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p;<br></code></pre></td></tr></table></figure><p><code>const</code> 左边没有, 看右边的一个, 是<code>int</code>, 自然就是p指针指向的值不能改变.<br /><em>注意, 此处因为个人代码风格的问题, 表示指针的 <code>*</code> 是紧靠<code>int</code></em></p><h2 id="例二"><a class="markdownIt-Anchor" href="#例二"></a> 例二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span>* p;<br></code></pre></td></tr></table></figure><p>此时 <code>const</code> 左边有<code>int</code>, 效果和例一, 还是修饰的<code>int</code>.</p><h2 id="例三"><a class="markdownIt-Anchor" href="#例三"></a> 例三</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p; <br></code></pre></td></tr></table></figure><p>修饰的是<code>*</code>, 即指针不能改变.</p><h2 id="例四"><a class="markdownIt-Anchor" href="#例四"></a> 例四</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *<span class="hljs-type">const</span> p;<br></code></pre></td></tr></table></figure><p>第一个 <code>const</code> 左边没有, 所以修饰的是右边的 <code>int</code>, 第二个 <code>const</code> 左边有, 所以修饰的是 <code>*</code>, 因此指针和指针指向的值都不能改变.</p><h2 id="例五"><a class="markdownIt-Anchor" href="#例五"></a> 例五</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-type">const</span> *p;<br></code></pre></td></tr></table></figure><p>这里两个 <code>const</code> 修饰的都是 <code>int</code>了, 所以重复修饰了, 有的编译器可以通过但会有警告, 有的可能直接编译错误.</p><h2 id="例六"><a class="markdownIt-Anchor" href="#例六"></a> 例六</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span>* <span class="hljs-type">const</span> p;<br></code></pre></td></tr></table></figure><p>留做练习题, 自己分析吧, 欢迎大家在评论区留下自己的见解.<br />总而言之, 看到 <code>const</code> 就看它左边是什么, 如果左边没有, 才看右边的, 就永远不会出错! ! !</p><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>既然, 本人习惯将 <code>*</code> 与 <code>int</code> 绑定在一起由例一可以看出, 这样会造成一定的误解.<br />那么不妨修改我自己的代码风格为将 <code>const</code> 置于 <code>int</code> 之后.<br />于是便有:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> <span class="hljs-type">const</span> p1;   <span class="hljs-comment">// 值不可修改</span><br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p2;   <span class="hljs-comment">// 指针不能修改, 即指针不能转向.</span><br><span class="hljs-type">int</span> <span class="hljs-type">const</span>* <span class="hljs-type">const</span> p3;   <span class="hljs-comment">// 指针和指针指向的值均不能修改.</span><br></code></pre></td></tr></table></figure><pre class="note note-info"><strong>2023-02-14</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1006</title>
    <link href="/2023/02/12/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201006/"/>
    <url>/2023/02/12/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201006/</url>
    
    <content type="html"><![CDATA[<h1 id="换个格式输出整数"><a class="markdownIt-Anchor" href="#换个格式输出整数"></a> 换个格式输出整数</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>让我们用字母 <code>B</code>来表示 “百”, 字母 <code>S</code> 表示 “十”, 用 <code>12...n</code> 来表示不为零的个位数字 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">‘</mi><mi>n</mi><mi mathvariant="normal">‘</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&lt;</mo><mn>10</mn><mo>&gt;</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">`n`(n&lt;10&gt;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">‘</span><span class="mord mathnormal">n</span><span class="mord">‘</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span>, 换个格式来输出任一个不超过 3 位的正整数. 例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个&quot;百&quot;, 3 个&quot;十&quot;, 以及个位的 4.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例，给出正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&lt;</mo><mn>1000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n&lt;1000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>每个测试用例的输出占一行，用规定的格式输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>.</p><h2 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">234<br></code></pre></td></tr></table></figure><h2 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">BBSSS1234<br></code></pre></td></tr></table></figure><h2 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">23<br></code></pre></td></tr></table></figure><h2 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例 2:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">SS123<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1006 换个格式输出整数</span><br><span class="hljs-comment"> * 2022/07/21</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;B&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;S&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++)<br>        cout &lt;&lt; i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch[<span class="hljs-number">3</span>];<br>    cin &gt;&gt; ch;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">strlen</span>(ch);<br>    <span class="hljs-keyword">switch</span> (a) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">fun1</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun2</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">1</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">2</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">fun2</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">1</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">fun3</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch[<span class="hljs-number">0</span>]) - <span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1006 换个格式输出整数</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">100</span>; i++)<br>            System.out.print(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>; i++)<br>            System.out.print(<span class="hljs-string">&quot;S&quot;</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n % <span class="hljs-number">10</span>; i++)<br>            System.out.print(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题非常简单. 只需要简单地根据 <code>n</code> 的每一位的数字, 循环输出对应位的字母即可, 没有什么难度.<br />也可以像 <code>C++</code> 代码所写的那样, 先对数据进行位数判断, 之后根据不同位数进行处理, 当然这样就比较麻烦了.<br />总的来说, 还是 <code>Java</code> 代码的解题思路简单明了.</p><pre class="note note-info"><strong>2023-02-12</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1005</title>
    <link href="/2023/01/24/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201005/"/>
    <url>/2023/01/24/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201005/</url>
    
    <content type="html"><![CDATA[<h1 id="继续3n1猜想"><a class="markdownIt-Anchor" href="#继续3n1猜想"></a> 继续(3n+1)猜想</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述. 在这个题目里. 情况稍微有些复杂.</p><p>当我们验证卡拉兹猜想的时候, 为了避免重复计算, 可以记录下递推过程中遇到的每一个数. 例如对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 进行验证的时候，我们需要计算3, 5, 8, 4, 2, 1, 则当我们对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n=5,8,4,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span> 进行验证的时候, 就可以直接判定卡拉兹猜想的真伪, 而不需要重复计算. 因为这 4 个数已经在验证 3 的时候遇到过了, 我们称 5, 8, 4, 2 是被 3 “覆盖” 的数. 我们称一个数列中的某个数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 为 “关键数”, 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 不能被数列中的其他数字所覆盖.</p><p>现在给定一系列待验证的数字, 我们只需要验证其中的几个关键数, 就可以不必再重复验证余下的数字. 你的任务就是找出这些关键数字, 并按从大到小的顺序输出它们.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例, 第 1 行给出一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>K</mi><mo>&lt;</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K(K&lt;100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>, 第 2 行给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 个互不相同的待验证的正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(1 &lt; n \leq 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 的值, 数字间用空格隔开.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>每个测试用例的输出占一行, 按从大到小的顺序输出关键数字. 数字间用 1 个空格隔开, 但一行中最后一个数字后没有空格.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">6<br>3 5 6 7 8 11<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">7 6<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> p[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; p[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = p[i]; j != <span class="hljs-number">1</span>;) &#123;<br>                <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                    j /= <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span><br>                    j = (<span class="hljs-number">3</span> * j + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>                    <span class="hljs-keyword">if</span> (p[k] == j)<br>                        p[k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(p, p + n, greater&lt;&gt;());<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; m &lt; n; m++)<br>        <span class="hljs-keyword">if</span> (p[m] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cout &lt;&lt; p[i];<br>        <span class="hljs-keyword">if</span> (i != m - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1005 继续(3n+1)猜想</span><br><span class="hljs-comment">/// 2023/01/06</span><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-comment">/* 要想使用Java中sort函数实现降序排列, 竟然要使用其对应的类, 比C++麻烦不少 */</span><br>        Integer[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            p[i] = input.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (p[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> p[i]; j != <span class="hljs-number">1</span>; ) &#123;<br>                    <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                        j /= <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span><br>                        j = (<span class="hljs-number">3</span> * j + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n; k++)<br>                        <span class="hljs-keyword">if</span> (p[k] == j)<br>                            p[k] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Arrays.sort(p, Collections.reverseOrder());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; m &lt; n; m++)<br>            <span class="hljs-keyword">if</span> (p[m] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            System.out.print(p[i]);<br>            <span class="hljs-keyword">if</span> (i != m - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题总体来说并不难, 下面说一下我的主要思路(两种语言思路一致, 这里我以C++为例子):</p><p>首先, 读入n和相应的n个数. 接着, 对每个数进行 <strong>卡拉兹(Callatz)</strong> 猜想所描述的操作进行处理, 并将处理中出现的中间数且在输入的数中的那部分数赋值为零, 表示此数被<strong>覆盖</strong>了.</p><p>对这n个数据进行降序排序, 最后对那些不为0的数据输出即可.</p><pre class="note note-info"><strong>2023-01-24</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1004</title>
    <link href="/2023/01/20/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201004/"/>
    <url>/2023/01/20/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201004/</url>
    
    <content type="html"><![CDATA[<h1 id="成绩排名"><a class="markdownIt-Anchor" href="#成绩排名"></a> 成绩排名</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>读入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 名学生的姓名, 学号, 成绩, 分别输出成绩最高和成绩最低学生的姓名和学号.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例, 格式为:</p><blockquote><p>第 1 行：正整数 n<br />第 2 行：第 1 个学生的姓名 学号 成绩<br />第 3 行：第 2 个学生的姓名 学号 成绩<br />… … …<br />第 n+1 行：第 n 个学生的姓名 学号 成绩</p></blockquote><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串, 成绩为 0 到 100 之间的一个整数, 这里保证在一组测试用例中没有两个学生的成绩是相同的.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>对每个测试用例输出 2 行, 第 1 行是成绩最高学生的姓名和学号, 第 2 行是成绩最低学生的姓名和学号, 字符串间有 1 空格.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mike CS991301<br>Joe Math990112<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PTA 1004 成绩排名</span><br><span class="hljs-comment"> * 2022/07/18</span><br><span class="hljs-comment"> * 2023-01-20: 没想到当时竟然写出这么低效的代码</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">char</span> number[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = N;<br>    student stu[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) <br>        cin &gt;&gt; stu[i].name &gt;&gt; stu[i].number &gt;&gt; stu[i].score;<br><br>    student temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= N - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (stu[j].score &gt; stu[j + <span class="hljs-number">1</span>].score) &#123;<br>                temp = stu[j];<br>                stu[j] = stu[j + <span class="hljs-number">1</span>];<br>                stu[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; stu[n - <span class="hljs-number">1</span>].name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; stu[n - <span class="hljs-number">1</span>].number &lt;&lt; endl;<br>    cout &lt;&lt; stu[<span class="hljs-number">0</span>].name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; stu[<span class="hljs-number">0</span>].number;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1004 成绩排名</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name, ID;<br>    <span class="hljs-type">int</span> score;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">maxStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(), minStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        maxStudent.score = -<span class="hljs-number">1</span>;<br>        minStudent.score = Integer.MAX_VALUE;<br>        String tempName, tempID;<br>        <span class="hljs-type">int</span> tempScore;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            tempName = scanner.next();<br>            tempID = scanner.next();<br>            tempScore = scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (tempScore &gt; maxStudent.score) &#123;<br>                maxStudent.name = tempName;<br>                maxStudent.ID = tempID;<br>                maxStudent.score = tempScore;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (tempScore &lt; minStudent.score) &#123;<br>                minStudent.name = tempName;<br>                minStudent.ID = tempID;<br>                minStudent.score = tempScore;<br>            &#125;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;%s %s\n&quot;</span>, maxStudent.name, maxStudent.ID);<br>        System.out.printf(<span class="hljs-string">&quot;%s %s\n&quot;</span>, minStudent.name, minStudent.ID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>这道题应该是非常简单的来, 解题的思路也不少. 下面先来说一下Java语言的解题思路, 因为其算法的时间复杂度更低,只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.<br />首先在主函数外定义了一个&quot;结构体&quot;, 用来存储有关学生的各种信息(包括成绩和ID), 之后在主函数中定义<code>maxStudent</code>和<code>minStudent</code>, 用来记录成绩最好的学生和成绩最差的学生. 注意: <strong>在正式进行比较之前, 要给它们赋予对应的初始值.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">maxStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(), minStudent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>maxStudent.score = -<span class="hljs-number">1</span>;<br>minStudent.score = Integer.MAX_VALUE;<br></code></pre></td></tr></table></figure><blockquote><p>关于初始值的问题: 根据题目给的条件<br />成绩为 0 到 100 之间的一个整数 所以也可以如此赋值:<br />maxStudent.score = -1; minStudent.score = 101;<br />之后, 遍历所有数据, 使用if语句进行比较即可, 这一点通过查看源代码是很清晰易懂的, 在此不做过多赘述.</p></blockquote><p>下面, 再来说一下C++语言版本的做法, 首先还是定义了一个结构体用来存储有关学生的各种信息.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">char</span> number[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure><p>申请一个结构体数组 <code>student stu[n]</code>, 存储输入的数据.<br />最后, 对这个数组进行排序(此处使用的是冒泡排序的排序方法), 最后按要求输出即可.</p><blockquote><p>其实这两版代码都写麻烦了, 根本不需要什么&quot;结构体&quot;.<br />只要定义 <code>maxName</code> 和 <code>maxScore</code>, <code>minName</code> 和 <code>minScore</code>(这些变量的含义应该很容易理解, 见名知意即可), 遍历整个数据, 进行比较, 最后直接输出即可.</p></blockquote><pre class="note note-info"><strong>2023-01-20</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1003</title>
    <link href="/2023/01/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201003/"/>
    <url>/2023/01/18/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201003/</url>
    
    <content type="html"><![CDATA[<h1 id="我要通过"><a class="markdownIt-Anchor" href="#我要通过"></a> 我要通过！</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>“<strong>答案正确</strong>” 是自动判题系统给出的最令人欢喜的回复. 本题属于 PAT 的 “<strong>答案正确</strong>” 大派送—只要读入的字符串满足下列条件,<br />系统就输出 “<strong>答案正确</strong>”, 否则输出 “<strong>答案错误</strong>”. 得到 &quot;<strong>答案正确</strong>&quot;的条件是:</p><ol><li>字符串中必须仅有<code>P</code>, <code>A</code>, <code>T</code>, 这三种字符, 不可以包含其它字符;</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得&quot;<strong>答案正确</strong>&quot;, 其中 <code>x</code> 或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串;</li><li>如果 <code>aPbTc</code> 是正确的, 那么 <code>aPbATca</code> 也是正确的. 其中<code>a</code>, <code>b</code>, <code>c</code>均或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串.</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得&quot;<strong>答案正确</strong>&quot;的.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例, 第 1 行给出一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n \leq 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>, 是需要检测的字符串个数. 接下来每个字符串占一行,<br />字符串长度不超过 100，且不包含空格.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>每个字符串的检测结果占一行, 如果该字符串可以获得&quot;<strong>答案正确</strong>&quot;, 则输出 YES, 否则输出 NO.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">10<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA<br>APT<br>APATTAA<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">YES<br>YES<br>YES<br>YES<br>NO<br>NO<br>NO<br>NO<br>NO<br>NO<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1003 我要通过!</span><br><span class="hljs-comment">/// 首次写于: 2022-07-17, 修改与 2023-01-17</span><br><span class="hljs-comment">/// m没想到竟然都在去年7月和今年1月碰到这个题, 真可以说是缘分的呢.</span><br><span class="hljs-comment">/// 之前太注意通过了, 代码没怎么写注释, 今天回来不上, ☺</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-comment">// 这两个变量分别用来记录字符串中P, T出现的次数</span><br>    <span class="hljs-type">int</span> PNum = <span class="hljs-number">0</span>, TNum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来统计A出现的次数, 根据题意可以将A出现的位置划分为三中情况:</span><br><span class="hljs-comment">     * &lt;ol&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在P的左边, 用&lt;strong&gt;ANum[0]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在P和T的中间, 用&lt;strong&gt;ANum[1]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;出现在T的右边, 用&lt;strong&gt;ANum[3]&lt;/strong&gt;表示&lt;/li&gt;</span><br><span class="hljs-comment">     * &lt;/ol&gt;</span><br><span class="hljs-comment">     * 统计到最后只要判断一下:</span><br><span class="hljs-comment">     * &lt;p&gt;ANum[0]*ANum[1]?=ANum[3]&lt;/p&gt;即可</span><br><span class="hljs-comment">     * */</span><br><br>    <span class="hljs-type">int</span> ANum[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i : s) &#123;<br>        <span class="hljs-comment">// 当一个字符串中出现了非`P`, `A`, `T`这三种字符时, 直接返回false</span><br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;T&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 当检测到字符==&#x27;P&#x27;时, PNum++, </span><br>        <span class="hljs-comment">// 同时进行判断, 若字符串中P出现的次数&gt;1 || 在P出现之前, T已经出现, 直接返回false</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;P&#x27;</span>) &#123;<br>            PNum++;<br>            <span class="hljs-keyword">if</span> (PNum &gt; <span class="hljs-number">1</span> || TNum != <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 当检测到字符==&#x27;T&#x27;时, TNum++, </span><br>        <span class="hljs-comment">// 同时进行判断, 若字符串中T出现的次数&gt;1 || 在T出现后, P仍未出现, 直接返回false.</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;T&#x27;</span>) &#123;<br>            TNum++;<br>            <span class="hljs-keyword">if</span> (TNum &gt; <span class="hljs-number">1</span> || PNum == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                ANum[<span class="hljs-number">0</span>]++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PNum != <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                ANum[<span class="hljs-number">1</span>]++;<br>            <span class="hljs-keyword">else</span><br>                ANum[<span class="hljs-number">2</span>]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// &quot;PAAAAA&quot; 这样的输入也是不能通过的</span><br>    <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> || TNum == <span class="hljs-number">0</span> || ANum[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span>(ANum[<span class="hljs-number">0</span>]*ANum[<span class="hljs-number">1</span>]!=ANum[<span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(s))<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PAT (Basic Level) Practice (中文)</span><br><span class="hljs-comment">/// 1003 我要通过!</span><br><span class="hljs-comment">/// 2023-01-17</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        String str;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            str = in.next();<br>            <span class="hljs-keyword">if</span> (judge(str))<br>                System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">PNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, TNum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span>[] ANum = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (str.charAt(i) != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; str.charAt(i) != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; str.charAt(i) != <span class="hljs-string">&#x27;T&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;P&#x27;</span>) &#123;<br>                PNum++;<br>                <span class="hljs-keyword">if</span> (PNum &gt; <span class="hljs-number">1</span> || TNum != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;T&#x27;</span>) &#123;<br>                TNum++;<br>                <span class="hljs-keyword">if</span> (TNum &gt; <span class="hljs-number">1</span> || PNum == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                    ANum[<span class="hljs-number">0</span>]++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PNum != <span class="hljs-number">0</span> &amp;&amp; TNum == <span class="hljs-number">0</span>)<br>                    ANum[<span class="hljs-number">1</span>]++;<br>                <span class="hljs-keyword">else</span><br>                    ANum[<span class="hljs-number">2</span>]++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (PNum == <span class="hljs-number">0</span> || TNum == <span class="hljs-number">0</span> || ANum[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> || (ANum[<span class="hljs-number">0</span>] * ANum[<span class="hljs-number">1</span>] != ANum[<span class="hljs-number">2</span>]))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>相比起前两道题, 这道题就稍显麻烦了, 我记得我第一次做这道题目时, 搞不懂题目描述的规则在说什么, 于是前去百度, 最终才明白题目的含义.<br />综合题目给的几个条件, 我们可以得出以下判断字符串是否<strong>正确</strong>的规则:</p><ol><li>字符串仅含<code>P</code>, <code>A</code>, <code>T</code>三个字符，且不存在其它字符(这是题目原话);</li><li>字符串中 <code>P</code> 和 <code>T</code> 均只能出现一次, 且 <code>P</code> 一定要出现在 <code>T</code> 的前面;</li><li><code>P</code> 和 <code>T</code> 中间一定要有一个 <code>A</code>. 也就是说 <code>PT</code> 也是不正确的输入, 这一点可以从输入样例里看出;</li><li><strong>P左侧A的数量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 中间A的数量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span> 右侧A的数量</strong></li></ol><p>前三个条件并没有什么难以理解的地方, 主要是第四个条件需要费点时间. 下面, 我们就来重点说一下第四个条件的由来.</p><blockquote><ol start="2"><li>任意形如 <code>xPATx</code> 的字符串都可以获得&quot;<strong>答案正确</strong>&quot;, 其中 <code>x</code> 或者是空字符串, 或者是仅由字母<code>A</code>组成的字符串;</li><li>如果 <code>aPbTc</code> 是正确的, 那么 <code>aPbATca</code> 也是正确的. 其中<code>a</code>, <code>b</code>, <code>c</code>均或者是空字符串, 或者是仅由字母 <code>A</code> 组成的字符串.</li></ol></blockquote><p>由条件2可知, <code>PAT</code>, <code>APATA</code>, <code>AAPATAA</code> 等均是<strong>答案正确</strong>的字符串;<br />条件3实质上就是在条件2的基础上进行拓展, 为方便描述, 下面举几个例子(第一个可由条件2推得一定正确):</p><blockquote><p>a = null, b = A, c = null</p><blockquote><p>PAT <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> PAAT <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> PAAAT <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> PAAAAT <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> …</p></blockquote><p>a = A, b = A, c = A</p><blockquote><p>APATA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> APAATAA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> APAAATAAA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> APAAAATAAAA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> …</p></blockquote><p>a = AA, b = A, c = AA</p><blockquote><p>AAPATAA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> AAPAATAAAA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> …</p></blockquote></blockquote><p>通过以上的三个例子, 我们可以得出结论: <strong>P左侧A的数量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 中间A的数量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span> 右侧A的数量</strong></p><p>依照这些规则, 就可以编写程序了, C++代码中写了比较详尽的注释, 特别是在如何实现这4条规则上, 在这里就不做过多赘述了.</p><pre class="note note-info"><strong>2023-01-18</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1002</title>
    <link href="/2023/01/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201002/"/>
    <url>/2023/01/16/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201002/</url>
    
    <content type="html"><![CDATA[<h1 id="写出这个数"><a class="markdownIt-Anchor" href="#写出这个数"></a> 写出这个数</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>读入一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 计算其各位数字之和, 用汉语拼音写出和的每一位数字.</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例，即给出自然数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的值。这里保证 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>100</mn></msup></mrow><annotation encoding="application/x-tex">10^{100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>在一行内输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的各位数字之和的每一位, 拼音数字间有 1 空格, 但一行中最后一个拼音数字后没有空格.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><blockquote><p>1234567890987654321123456789</p></blockquote><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><blockquote><p>yi san wu</p></blockquote><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><p>第一版:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*  PTA 1002 写出这个数</span><br><span class="hljs-comment"> *  2022/07/17</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>, ss = <span class="hljs-number">0</span>;<span class="hljs-comment">//c用于记录数字</span><br><span class="hljs-type">int</span> gg = <span class="hljs-number">0</span>, z = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mm = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">gets</span>(a);<span class="hljs-comment">//输入到字符数组，算出总和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; a[x] != <span class="hljs-string">&#x27;\0&#x27;</span>; x++)<br>&#123;<br>sum = a[x] - <span class="hljs-number">48</span> + sum;<br>&#125;<br>ss = sum;<br><span class="hljs-comment">//判断多少位</span><br><span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>)<br>&#123;<br>sum /= <span class="hljs-number">10</span>;<br>c++;<br>&#125;<br><span class="hljs-comment">// 开始输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br>z = ss / <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i - <span class="hljs-number">1</span>);<br>z = z % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">switch</span> (z)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ling&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yi&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;er&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;san&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;si&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qi&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ba&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jiu&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">switch</span> (z)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ling &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yi &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;er &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;san &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;si &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qi &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ba &quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jiu &quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二版:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1002 写出这个数</span><br><span class="hljs-comment">/// 初次写于 2022-07-17, 修改于 2023-01-16</span><br><span class="hljs-comment">/// 感觉之前对这个题写的代码写的代码太&quot;娘希匹&quot;了.</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span> ((ch = <span class="hljs-built_in">getchar</span>()) &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        sum += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    string arr[] = &#123;<span class="hljs-string">&quot;ling&quot;</span>, <span class="hljs-string">&quot;yi&quot;</span>, <span class="hljs-string">&quot;er&quot;</span>, <span class="hljs-string">&quot;san&quot;</span>, <span class="hljs-string">&quot;si&quot;</span>, <span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;liu&quot;</span>, <span class="hljs-string">&quot;qi&quot;</span>, <span class="hljs-string">&quot;ba&quot;</span>, <span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br>    string str = <span class="hljs-built_in">to_string</span>(sum);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>(); i++) &#123;<br>        cout &lt;&lt; arr[<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(str[i] - <span class="hljs-string">&#x27;0&#x27;</span>)];<br>        <span class="hljs-keyword">if</span> (i &lt; str.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/// PTA 1002 写出这个数</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>            sum += str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>        str = String.valueOf(sum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">switch</span> (str.charAt(i)) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;ling&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;yi&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;er&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;san&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;si&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;wu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;liu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;qi&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;ba&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;jiu&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &lt; str.length() - <span class="hljs-number">1</span>)<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><ul><li>首先读入这个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 值得注意的是题目中给出的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 范围是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>100</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[1,10^{100})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 而C++中即便使用unsigned long int, 表示的最大整数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{64}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 也就是 <code>18,446,744,073,709,551,615</code> (这个数是用计算器算出来的, 应该是正确的), 也不能满足题意, 所以我们应该考虑其他的输入方式</li><li>结合题目可知, 题目只要求我们计算出这个数各位上数的和, 于是我们可以用输入单个字符的方式读入这个数, 同时在读入的过程中接着把正整数各位上的和算出来, 于是有以下代码:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> ((ch = <span class="hljs-built_in">getchar</span>()) &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        sum += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(ch - <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 其实这里不必使用显式类型转换</span><br></code></pre></td></tr></table></figure><ul><li>其实也可以首先把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 以字符串的形式读进来, 之后调用库函数, 将字符串中各位和算出来, 于是有Java版的算法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++)<br>    sum += str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>str = String.valueOf(sum);<br></code></pre></td></tr></table></figure><ul><li>算出和之后, 将和每一位求出来后, 进行输出即可, 取和的每一位可以使用循环, 不断的对和进行对10模和除10操作(详见第一版C<ins>代码), 也可以使用库函数, 将和转化为字符串(C</ins>中的<code>to_stringJava</code>终的<code>String.valueOf()</code>) , 从知乎上找了一个<a href="https://zhuanlan.zhihu.com/p/441819455">参考资料</a></li><li>最后的问题便是输出, 可以使用switch语句对每个字符进行判断并输出. 因为输出内容与上文提到的’和’有着一 一对应的关系, 同时明显是存在偏序关系的, 于是可以先将要求输出的内容存到一个数组中, 之后找到字符和需要输出的内容的数组下标的对应关系即可.<br />于是有:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span> (str.<span class="hljs-built_in">charAt</span>(i)) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ling&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yi&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;er&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;san&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;si&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;liu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;qi&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ba&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jiu&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">string arr[] = &#123;<span class="hljs-string">&quot;ling&quot;</span>, <span class="hljs-string">&quot;yi&quot;</span>, <span class="hljs-string">&quot;er&quot;</span>, <span class="hljs-string">&quot;san&quot;</span>, <span class="hljs-string">&quot;si&quot;</span>, <span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;liu&quot;</span>, <span class="hljs-string">&quot;qi&quot;</span>, <span class="hljs-string">&quot;ba&quot;</span>, <span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>        cout &lt;&lt; arr[static_cast&lt;<span class="hljs-type">int</span>&gt;(str[i] - <span class="hljs-string">&#x27;0&#x27;</span>)];<br>        <span class="hljs-keyword">if</span> (i &lt; str.length() - <span class="hljs-number">1</span>)<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>最后需要注意的问题是: <strong>行末没有空格!</strong></li><li>总的来说, 这道题不算太难, 许多繁琐的操作都有库函数的帮忙, 就是最后输出需要将规定的输出写入程序中, 比较烦人.</li></ul><h2 id="回想"><a class="markdownIt-Anchor" href="#回想"></a> 回想:</h2><p>现在看第一版C++代码, 感觉当时真是太辣鸡了, 这么简单的题竟然用了86行代码, 有时回来看看自己之前写过的题目还是有必要的.</p><pre class="note note-info"><strong>2023-01-16</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA: PAT (Basic Level) Practice 1001</title>
    <link href="/2023/01/15/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201001/"/>
    <url>/2023/01/15/PTA%20%E9%A2%98%E8%A7%A3/PAT%20(Basic%20Level)%20Practice%201001/</url>
    
    <content type="html"><![CDATA[<h1 id="害死人不偿命的3n1猜想"><a class="markdownIt-Anchor" href="#害死人不偿命的3n1猜想"></a> 害死人不偿命的(3n+1)猜想</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述:</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 如果它是偶数, 那么把它砍掉一半; 如果它是奇数, 那么把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">3n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 砍掉一半.这样一直反复砍下去, 最后一定在某一步得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 卡拉兹在 1950 年的世界数学家大会上公布了这个猜想, 传说当时耶鲁大学师生齐动员, 拼命想证明这个貌似很傻很天真的命题, 结果闹得学生们无心学业, 一心只证 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">3n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 以至于有人说这是一个阴谋, 卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想, 而是对给定的任一不超过 1000 的正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 简单地数一下, 需要多少步 (砍几下) 才能得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>?</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式:</h2><p>每个测试输入包含 1 个测试用例，即给出正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的值.</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式:</h2><p>输出从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 计算到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 需要的步数.</p><h2 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">3<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5<br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// PTA 1001 害死人不偿命的(3n+1)猜想</span><br><span class="hljs-comment">/// 2022/07/17</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N, i = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">for</span> (; N != <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (N % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            N = N / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span><br>            N = (<span class="hljs-number">3</span> * N + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>    cout &lt;&lt; i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// PTA 1001 害死人不偿命的(3n+1)猜想</span><br><span class="hljs-comment">/// 2023/01/05</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">myscan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> myscan.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                n /= <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                n = (<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            count++;<br>        &#125;<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简要解析"><a class="markdownIt-Anchor" href="#简要解析"></a> 简要解析:</h2><p>本题作为 PAT (Basic Level) Practice 的开篇之题, 难度并不是很大, 只要读懂题意按照要求输出即可, 没有什么花花绕绕.</p><p>首先读入一个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>, 接着对这个整数进行如下操作:</p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是偶数, 即:<code>if(n%2 == 0)</code>或者简写为:<code>if(!N%2)</code>要注意, 这种简单写法只使用与C++, Java中并不适用, 因为Java中没有定义int类型与boolean类型的转换关系. 砍掉 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的一半, 即: <code>n /= 2</code>;</li><li>如果为奇数, 即在上面的if语句下添加一个else即可, 把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">3n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 砍掉一半, 即:<code>n = (3 * n + 1) / 2</code>;</li><li>重复这种操作, 直到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 这也启示我们直接在上述的逻辑判断外再加一层循环即可. 同时初始化一个用于记录循环进行次数的变量即可.</li><li>最后注意输入和输出格式即可.</li></ol><pre class="note note-info"><strong>2023-01-15</strong> <strong>IP属地: 曹县</strong></pre>]]></content>
    
    
    <categories>
      
      <category>PTA题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
